// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "analytics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Analytics {

namespace {

const ::google::protobuf::Descriptor* TopicSubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicUnsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicUnsubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameNavNotFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNavNotFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameNavAutoDownloaded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNavAutoDownloaded_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameAssert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameAssert_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameCrash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameCrash_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameModelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEntityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEntityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEntityInfo_Ammo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEntityInfo_Ammo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEntityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEntityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameWeaponFired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameWeaponFired_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTookDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTookDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameNavigationStuck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNavigationStuck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageUnion_reflection_ = NULL;
struct MessageUnionOneofInstance {
  const ::Analytics::GameInfo* gameinfo_;
  const ::Analytics::GameNavNotFound* gamenavnotfound_;
  const ::Analytics::GameNavAutoDownloaded* systemnavdownloaded_;
  const ::Analytics::GameAssert* gameassert_;
  const ::Analytics::GameCrash* gamecrash_;
  const ::Analytics::GameModelData* gamemodeldata_;
  const ::Analytics::GameEntityList* gameentitylist_;
  const ::Analytics::GameWeaponFired* gameweaponfired_;
  const ::Analytics::GameDeath* gamedeath_;
  const ::Analytics::GameTookDamage* gametookdamage_;
  const ::Analytics::GameNavigationStuck* gamenavigationstuck_;
  const ::Analytics::TopicSubscribe* topicsubscribe_;
  const ::Analytics::TopicUnsubscribe* topicunsubscribe_;
}* MessageUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Compression_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_analytics_2eproto() {
  protobuf_AddDesc_analytics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "analytics.proto");
  GOOGLE_CHECK(file != NULL);
  TopicSubscribe_descriptor_ = file->message_type(0);
  static const int TopicSubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscribe, topic_),
  };
  TopicSubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicSubscribe_descriptor_,
      TopicSubscribe::default_instance_,
      TopicSubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicSubscribe));
  TopicUnsubscribe_descriptor_ = file->message_type(1);
  static const int TopicUnsubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicUnsubscribe, topic_),
  };
  TopicUnsubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicUnsubscribe_descriptor_,
      TopicUnsubscribe::default_instance_,
      TopicUnsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicUnsubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicUnsubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicUnsubscribe));
  GameInfo_descriptor_ = file->message_type(2);
  static const int GameInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, mapname_),
  };
  GameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameInfo_descriptor_,
      GameInfo::default_instance_,
      GameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameInfo));
  GameNavNotFound_descriptor_ = file->message_type(3);
  static const int GameNavNotFound_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavNotFound, mapname_),
  };
  GameNavNotFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameNavNotFound_descriptor_,
      GameNavNotFound::default_instance_,
      GameNavNotFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavNotFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavNotFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameNavNotFound));
  GameNavAutoDownloaded_descriptor_ = file->message_type(4);
  static const int GameNavAutoDownloaded_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavAutoDownloaded, mapname_),
  };
  GameNavAutoDownloaded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameNavAutoDownloaded_descriptor_,
      GameNavAutoDownloaded::default_instance_,
      GameNavAutoDownloaded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavAutoDownloaded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavAutoDownloaded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameNavAutoDownloaded));
  GameAssert_descriptor_ = file->message_type(5);
  static const int GameAssert_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAssert, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAssert, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAssert, line_),
  };
  GameAssert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameAssert_descriptor_,
      GameAssert::default_instance_,
      GameAssert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAssert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameAssert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameAssert));
  GameCrash_descriptor_ = file->message_type(6);
  static const int GameCrash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCrash, info_),
  };
  GameCrash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameCrash_descriptor_,
      GameCrash::default_instance_,
      GameCrash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCrash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameCrash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameCrash));
  GameModelData_descriptor_ = file->message_type(7);
  static const int GameModelData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameModelData, compressiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameModelData, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameModelData, modelbytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameModelData, modelbytesuncompressed_),
  };
  GameModelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameModelData_descriptor_,
      GameModelData::default_instance_,
      GameModelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameModelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameModelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameModelData));
  GameEntityInfo_descriptor_ = file->message_type(8);
  static const int GameEntityInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, healthmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, armormax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo_),
  };
  GameEntityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEntityInfo_descriptor_,
      GameEntityInfo::default_instance_,
      GameEntityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEntityInfo));
  GameEntityInfo_Ammo_descriptor_ = GameEntityInfo_descriptor_->nested_type(0);
  static const int GameEntityInfo_Ammo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo_Ammo, ammotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo_Ammo, ammocount_),
  };
  GameEntityInfo_Ammo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEntityInfo_Ammo_descriptor_,
      GameEntityInfo_Ammo::default_instance_,
      GameEntityInfo_Ammo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo_Ammo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo_Ammo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEntityInfo_Ammo));
  GameEntityList_descriptor_ = file->message_type(9);
  static const int GameEntityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityList, entities_),
  };
  GameEntityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEntityList_descriptor_,
      GameEntityList::default_instance_,
      GameEntityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEntityList));
  GameWeaponFired_descriptor_ = file->message_type(10);
  static const int GameWeaponFired_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, firemode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, team_),
  };
  GameWeaponFired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameWeaponFired_descriptor_,
      GameWeaponFired::default_instance_,
      GameWeaponFired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameWeaponFired));
  GameDeath_descriptor_ = file->message_type(11);
  static const int GameDeath_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, killedbyclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, killedbyweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, killedbyhealth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, team_),
  };
  GameDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDeath_descriptor_,
      GameDeath::default_instance_,
      GameDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDeath));
  GameTookDamage_descriptor_ = file->message_type(12);
  static const int GameTookDamage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, team_),
  };
  GameTookDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTookDamage_descriptor_,
      GameTookDamage::default_instance_,
      GameTookDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTookDamage));
  GameNavigationStuck_descriptor_ = file->message_type(13);
  static const int GameNavigationStuck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, positionz_),
  };
  GameNavigationStuck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameNavigationStuck_descriptor_,
      GameNavigationStuck::default_instance_,
      GameNavigationStuck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameNavigationStuck));
  MessageUnion_descriptor_ = file->message_type(14);
  static const int MessageUnion_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, timestamp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gameinfo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamenavnotfound_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, systemnavdownloaded_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gameassert_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamecrash_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamemodeldata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gameentitylist_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gameweaponfired_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamedeath_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gametookdamage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamenavigationstuck_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, topicsubscribe_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, topicunsubscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, msg_),
  };
  MessageUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageUnion_descriptor_,
      MessageUnion::default_instance_,
      MessageUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, _unknown_fields_),
      -1,
      MessageUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageUnion));
  Compression_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_analytics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicSubscribe_descriptor_, &TopicSubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicUnsubscribe_descriptor_, &TopicUnsubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameInfo_descriptor_, &GameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameNavNotFound_descriptor_, &GameNavNotFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameNavAutoDownloaded_descriptor_, &GameNavAutoDownloaded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameAssert_descriptor_, &GameAssert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameCrash_descriptor_, &GameCrash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameModelData_descriptor_, &GameModelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEntityInfo_descriptor_, &GameEntityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEntityInfo_Ammo_descriptor_, &GameEntityInfo_Ammo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEntityList_descriptor_, &GameEntityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameWeaponFired_descriptor_, &GameWeaponFired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDeath_descriptor_, &GameDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTookDamage_descriptor_, &GameTookDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameNavigationStuck_descriptor_, &GameNavigationStuck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageUnion_descriptor_, &MessageUnion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_analytics_2eproto() {
  delete TopicSubscribe::default_instance_;
  delete TopicSubscribe_reflection_;
  delete TopicUnsubscribe::default_instance_;
  delete TopicUnsubscribe_reflection_;
  delete GameInfo::default_instance_;
  delete GameInfo_reflection_;
  delete GameNavNotFound::default_instance_;
  delete GameNavNotFound_reflection_;
  delete GameNavAutoDownloaded::default_instance_;
  delete GameNavAutoDownloaded_reflection_;
  delete GameAssert::default_instance_;
  delete GameAssert_reflection_;
  delete GameCrash::default_instance_;
  delete GameCrash_reflection_;
  delete GameModelData::default_instance_;
  delete GameModelData_reflection_;
  delete GameEntityInfo::default_instance_;
  delete GameEntityInfo_reflection_;
  delete GameEntityInfo_Ammo::default_instance_;
  delete GameEntityInfo_Ammo_reflection_;
  delete GameEntityList::default_instance_;
  delete GameEntityList_reflection_;
  delete GameWeaponFired::default_instance_;
  delete GameWeaponFired_reflection_;
  delete GameDeath::default_instance_;
  delete GameDeath_reflection_;
  delete GameTookDamage::default_instance_;
  delete GameTookDamage_reflection_;
  delete GameNavigationStuck::default_instance_;
  delete GameNavigationStuck_reflection_;
  delete MessageUnion::default_instance_;
  delete MessageUnion_default_oneof_instance_;
  delete MessageUnion_reflection_;
}

void protobuf_AddDesc_analytics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017analytics.proto\022\tAnalytics\032 google/pro"
    "tobuf/descriptor.proto\"\037\n\016TopicSubscribe"
    "\022\r\n\005topic\030\001 \002(\t\"!\n\020TopicUnsubscribe\022\r\n\005t"
    "opic\030\001 \002(\t\"!\n\010GameInfo\022\017\n\007mapName\030\001 \002(\t:"
    "\004\300\270\002\001\"\"\n\017GameNavNotFound\022\017\n\007mapName\030\001 \002("
    "\t\"(\n\025GameNavAutoDownloaded\022\017\n\007mapName\030\001 "
    "\002(\t\";\n\nGameAssert\022\021\n\tcondition\030\001 \002(\t\022\014\n\004"
    "file\030\002 \001(\t\022\014\n\004line\030\003 \001(\005\"\031\n\tGameCrash\022\014\n"
    "\004info\030\001 \002(\t\"\254\001\n\rGameModelData\022A\n\017compres"
    "sionType\030\001 \001(\0162\026.Analytics.Compression:\020"
    "Compression_None\022\021\n\tmodelName\030\002 \002(\t\022\022\n\nm"
    "odelBytes\030\003 \002(\014\022\036\n\026modelBytesUncompresse"
    "d\030\004 \001(\r:\021\300\270\002\001\312\270\002\tmodelName\"\346\002\n\016GameEntit"
    "yInfo\022\014\n\004name\030\001 \001(\t\022\020\n\010entityId\030\002 \002(\005\022\017\n"
    "\007groupId\030\003 \001(\005\022\017\n\007classId\030\004 \001(\005\022\021\n\tposit"
    "ionX\030\005 \001(\002\022\021\n\tpositionY\030\006 \001(\002\022\021\n\tpositio"
    "nZ\030\007 \001(\002\022\017\n\007heading\030\010 \001(\002\022\r\n\005pitch\030\t \001(\002"
    "\022\014\n\004roll\030\n \001(\002\022\016\n\006health\030\014 \001(\r\022\021\n\thealth"
    "Max\030\r \001(\r\022\r\n\005armor\030\016 \001(\r\022\020\n\010armorMax\030\017 \001"
    "(\r\022\014\n\004team\030\020 \001(\r\022,\n\004ammo\030\024 \003(\0132\036.Analyti"
    "cs.GameEntityInfo.Ammo\032+\n\004Ammo\022\020\n\010ammoTy"
    "pe\030\001 \002(\r\022\021\n\tammoCount\030\002 \001(\r\"C\n\016GameEntit"
    "yList\022+\n\010entities\030\001 \003(\0132\031.Analytics.Game"
    "EntityInfo:\004\300\270\002\001\"|\n\017GameWeaponFired\022\020\n\010w"
    "eaponId\030\001 \002(\005\022\021\n\tpositionX\030\002 \001(\002\022\021\n\tposi"
    "tionY\030\003 \001(\002\022\021\n\tpositionZ\030\004 \001(\002\022\020\n\010fireMo"
    "de\030\005 \001(\r\022\014\n\004team\030\006 \001(\005\"`\n\tGameDeath\022\025\n\rk"
    "illedByClass\030\001 \002(\005\022\026\n\016killedByWeapon\030\002 \002"
    "(\005\022\026\n\016killedByHealth\030\003 \002(\005\022\014\n\004team\030\004 \001(\r"
    "\"i\n\016GameTookDamage\022\020\n\010weaponId\030\001 \002(\005\022\021\n\t"
    "positionX\030\002 \002(\002\022\021\n\tpositionY\030\003 \002(\002\022\021\n\tpo"
    "sitionZ\030\004 \002(\002\022\014\n\004team\030\005 \001(\r\"`\n\023GameNavig"
    "ationStuck\022\020\n\010entityId\030\001 \002(\005\022\021\n\tposition"
    "X\030\002 \002(\002\022\021\n\tpositionY\030\003 \002(\002\022\021\n\tpositionZ\030"
    "\004 \002(\002\"\317\005\n\014MessageUnion\022\021\n\ttimestamp\030\001 \002("
    "\003\022\'\n\010gameInfo\030\t \001(\0132\023.Analytics.GameInfo"
    "H\000\0225\n\017gameNavNotFound\030\n \001(\0132\032.Analytics."
    "GameNavNotFoundH\000\022\?\n\023systemNavDownloaded"
    "\030\013 \001(\0132 .Analytics.GameNavAutoDownloaded"
    "H\000\022+\n\ngameAssert\030\014 \001(\0132\025.Analytics.GameA"
    "ssertH\000\022)\n\tgameCrash\030\r \001(\0132\024.Analytics.G"
    "ameCrashH\000\0221\n\rgameModelData\030\016 \001(\0132\030.Anal"
    "ytics.GameModelDataH\000\0223\n\016gameEntityList\030"
    "d \001(\0132\031.Analytics.GameEntityListH\000\0225\n\017ga"
    "meWeaponFired\030e \001(\0132\032.Analytics.GameWeap"
    "onFiredH\000\022)\n\tgameDeath\030f \001(\0132\024.Analytics"
    ".GameDeathH\000\0223\n\016gameTookDamage\030g \001(\0132\031.A"
    "nalytics.GameTookDamageH\000\022=\n\023gameNavigat"
    "ionStuck\030h \001(\0132\036.Analytics.GameNavigatio"
    "nStuckH\000\0224\n\016topicSubscribe\030\350\007 \001(\0132\031.Anal"
    "ytics.TopicSubscribeH\000\0228\n\020topicUnsubscri"
    "be\030\351\007 \001(\0132\033.Analytics.TopicUnsubscribeH\000"
    "B\005\n\003msg*;\n\013Compression\022\024\n\020Compression_No"
    "ne\020\000\022\026\n\022Compression_FastLZ\020\001:8\n\016cachelas"
    "tvalue\022\037.google.protobuf.MessageOptions\030"
    "\210\' \001(\010:8\n\016cachekeysuffix\022\037.google.protob"
    "uf.MessageOptions\030\211\' \001(\t", 2264);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "analytics.proto", &protobuf_RegisterTypes);
  TopicSubscribe::default_instance_ = new TopicSubscribe();
  TopicUnsubscribe::default_instance_ = new TopicUnsubscribe();
  GameInfo::default_instance_ = new GameInfo();
  GameNavNotFound::default_instance_ = new GameNavNotFound();
  GameNavAutoDownloaded::default_instance_ = new GameNavAutoDownloaded();
  GameAssert::default_instance_ = new GameAssert();
  GameCrash::default_instance_ = new GameCrash();
  GameModelData::default_instance_ = new GameModelData();
  GameEntityInfo::default_instance_ = new GameEntityInfo();
  GameEntityInfo_Ammo::default_instance_ = new GameEntityInfo_Ammo();
  GameEntityList::default_instance_ = new GameEntityList();
  GameWeaponFired::default_instance_ = new GameWeaponFired();
  GameDeath::default_instance_ = new GameDeath();
  GameTookDamage::default_instance_ = new GameTookDamage();
  GameNavigationStuck::default_instance_ = new GameNavigationStuck();
  MessageUnion::default_instance_ = new MessageUnion();
  MessageUnion_default_oneof_instance_ = new MessageUnionOneofInstance;
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    5000, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    5001, 9, false, false);
  TopicSubscribe::default_instance_->InitAsDefaultInstance();
  TopicUnsubscribe::default_instance_->InitAsDefaultInstance();
  GameInfo::default_instance_->InitAsDefaultInstance();
  GameNavNotFound::default_instance_->InitAsDefaultInstance();
  GameNavAutoDownloaded::default_instance_->InitAsDefaultInstance();
  GameAssert::default_instance_->InitAsDefaultInstance();
  GameCrash::default_instance_->InitAsDefaultInstance();
  GameModelData::default_instance_->InitAsDefaultInstance();
  GameEntityInfo::default_instance_->InitAsDefaultInstance();
  GameEntityInfo_Ammo::default_instance_->InitAsDefaultInstance();
  GameEntityList::default_instance_->InitAsDefaultInstance();
  GameWeaponFired::default_instance_->InitAsDefaultInstance();
  GameDeath::default_instance_->InitAsDefaultInstance();
  GameTookDamage::default_instance_->InitAsDefaultInstance();
  GameNavigationStuck::default_instance_->InitAsDefaultInstance();
  MessageUnion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_analytics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_analytics_2eproto {
  StaticDescriptorInitializer_analytics_2eproto() {
    protobuf_AddDesc_analytics_2eproto();
  }
} static_descriptor_initializer_analytics_2eproto_;
const ::google::protobuf::EnumDescriptor* Compression_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Compression_descriptor_;
}
bool Compression_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TopicSubscribe::kTopicFieldNumber;
#endif  // !_MSC_VER

TopicSubscribe::TopicSubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.TopicSubscribe)
}

void TopicSubscribe::InitAsDefaultInstance() {
}

TopicSubscribe::TopicSubscribe(const TopicSubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.TopicSubscribe)
}

void TopicSubscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicSubscribe::~TopicSubscribe() {
  // @@protoc_insertion_point(destructor:Analytics.TopicSubscribe)
  SharedDtor();
}

void TopicSubscribe::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void TopicSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSubscribe_descriptor_;
}

const TopicSubscribe& TopicSubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

TopicSubscribe* TopicSubscribe::default_instance_ = NULL;

TopicSubscribe* TopicSubscribe::New() const {
  return new TopicSubscribe;
}

void TopicSubscribe::Clear() {
  if (has_topic()) {
    if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      topic_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.TopicSubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.TopicSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.TopicSubscribe)
  return false;
#undef DO_
}

void TopicSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.TopicSubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.TopicSubscribe)
}

::google::protobuf::uint8* TopicSubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.TopicSubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.TopicSubscribe)
  return target;
}

int TopicSubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicSubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicSubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicSubscribe::MergeFrom(const TopicSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSubscribe::CopyFrom(const TopicSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TopicSubscribe::Swap(TopicSubscribe* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicSubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSubscribe_descriptor_;
  metadata.reflection = TopicSubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicUnsubscribe::kTopicFieldNumber;
#endif  // !_MSC_VER

TopicUnsubscribe::TopicUnsubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.TopicUnsubscribe)
}

void TopicUnsubscribe::InitAsDefaultInstance() {
}

TopicUnsubscribe::TopicUnsubscribe(const TopicUnsubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.TopicUnsubscribe)
}

void TopicUnsubscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicUnsubscribe::~TopicUnsubscribe() {
  // @@protoc_insertion_point(destructor:Analytics.TopicUnsubscribe)
  SharedDtor();
}

void TopicUnsubscribe::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void TopicUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicUnsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicUnsubscribe_descriptor_;
}

const TopicUnsubscribe& TopicUnsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

TopicUnsubscribe* TopicUnsubscribe::default_instance_ = NULL;

TopicUnsubscribe* TopicUnsubscribe::New() const {
  return new TopicUnsubscribe;
}

void TopicUnsubscribe::Clear() {
  if (has_topic()) {
    if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      topic_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.TopicUnsubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.TopicUnsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.TopicUnsubscribe)
  return false;
#undef DO_
}

void TopicUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.TopicUnsubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.TopicUnsubscribe)
}

::google::protobuf::uint8* TopicUnsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.TopicUnsubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.TopicUnsubscribe)
  return target;
}

int TopicUnsubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicUnsubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicUnsubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicUnsubscribe::MergeFrom(const TopicUnsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicUnsubscribe::CopyFrom(const TopicUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicUnsubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TopicUnsubscribe::Swap(TopicUnsubscribe* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicUnsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicUnsubscribe_descriptor_;
  metadata.reflection = TopicUnsubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameInfo::kMapNameFieldNumber;
#endif  // !_MSC_VER

GameInfo::GameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameInfo)
}

void GameInfo::InitAsDefaultInstance() {
}

GameInfo::GameInfo(const GameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameInfo)
}

void GameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameInfo::~GameInfo() {
  // @@protoc_insertion_point(destructor:Analytics.GameInfo)
  SharedDtor();
}

void GameInfo::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void GameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameInfo_descriptor_;
}

const GameInfo& GameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameInfo* GameInfo::default_instance_ = NULL;

GameInfo* GameInfo::New() const {
  return new GameInfo;
}

void GameInfo::Clear() {
  if (has_mapname()) {
    if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameInfo)
  return false;
#undef DO_
}

void GameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameInfo)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameInfo)
}

::google::protobuf::uint8* GameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameInfo)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameInfo)
  return target;
}

int GameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapName = 1;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameInfo::MergeFrom(const GameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameInfo::CopyFrom(const GameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameInfo::Swap(GameInfo* other) {
  if (other != this) {
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameInfo_descriptor_;
  metadata.reflection = GameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameNavNotFound::kMapNameFieldNumber;
#endif  // !_MSC_VER

GameNavNotFound::GameNavNotFound()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameNavNotFound)
}

void GameNavNotFound::InitAsDefaultInstance() {
}

GameNavNotFound::GameNavNotFound(const GameNavNotFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameNavNotFound)
}

void GameNavNotFound::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNavNotFound::~GameNavNotFound() {
  // @@protoc_insertion_point(destructor:Analytics.GameNavNotFound)
  SharedDtor();
}

void GameNavNotFound::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void GameNavNotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNavNotFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNavNotFound_descriptor_;
}

const GameNavNotFound& GameNavNotFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameNavNotFound* GameNavNotFound::default_instance_ = NULL;

GameNavNotFound* GameNavNotFound::New() const {
  return new GameNavNotFound;
}

void GameNavNotFound::Clear() {
  if (has_mapname()) {
    if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameNavNotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameNavNotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameNavNotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameNavNotFound)
  return false;
#undef DO_
}

void GameNavNotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameNavNotFound)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameNavNotFound)
}

::google::protobuf::uint8* GameNavNotFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameNavNotFound)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameNavNotFound)
  return target;
}

int GameNavNotFound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapName = 1;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNavNotFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameNavNotFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameNavNotFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNavNotFound::MergeFrom(const GameNavNotFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameNavNotFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNavNotFound::CopyFrom(const GameNavNotFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNavNotFound::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameNavNotFound::Swap(GameNavNotFound* other) {
  if (other != this) {
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameNavNotFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNavNotFound_descriptor_;
  metadata.reflection = GameNavNotFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameNavAutoDownloaded::kMapNameFieldNumber;
#endif  // !_MSC_VER

GameNavAutoDownloaded::GameNavAutoDownloaded()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameNavAutoDownloaded)
}

void GameNavAutoDownloaded::InitAsDefaultInstance() {
}

GameNavAutoDownloaded::GameNavAutoDownloaded(const GameNavAutoDownloaded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameNavAutoDownloaded)
}

void GameNavAutoDownloaded::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNavAutoDownloaded::~GameNavAutoDownloaded() {
  // @@protoc_insertion_point(destructor:Analytics.GameNavAutoDownloaded)
  SharedDtor();
}

void GameNavAutoDownloaded::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void GameNavAutoDownloaded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNavAutoDownloaded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNavAutoDownloaded_descriptor_;
}

const GameNavAutoDownloaded& GameNavAutoDownloaded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameNavAutoDownloaded* GameNavAutoDownloaded::default_instance_ = NULL;

GameNavAutoDownloaded* GameNavAutoDownloaded::New() const {
  return new GameNavAutoDownloaded;
}

void GameNavAutoDownloaded::Clear() {
  if (has_mapname()) {
    if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameNavAutoDownloaded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameNavAutoDownloaded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameNavAutoDownloaded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameNavAutoDownloaded)
  return false;
#undef DO_
}

void GameNavAutoDownloaded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameNavAutoDownloaded)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameNavAutoDownloaded)
}

::google::protobuf::uint8* GameNavAutoDownloaded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameNavAutoDownloaded)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameNavAutoDownloaded)
  return target;
}

int GameNavAutoDownloaded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapName = 1;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNavAutoDownloaded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameNavAutoDownloaded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameNavAutoDownloaded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNavAutoDownloaded::MergeFrom(const GameNavAutoDownloaded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameNavAutoDownloaded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNavAutoDownloaded::CopyFrom(const GameNavAutoDownloaded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNavAutoDownloaded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameNavAutoDownloaded::Swap(GameNavAutoDownloaded* other) {
  if (other != this) {
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameNavAutoDownloaded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNavAutoDownloaded_descriptor_;
  metadata.reflection = GameNavAutoDownloaded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameAssert::kConditionFieldNumber;
const int GameAssert::kFileFieldNumber;
const int GameAssert::kLineFieldNumber;
#endif  // !_MSC_VER

GameAssert::GameAssert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameAssert)
}

void GameAssert::InitAsDefaultInstance() {
}

GameAssert::GameAssert(const GameAssert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameAssert)
}

void GameAssert::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameAssert::~GameAssert() {
  // @@protoc_insertion_point(destructor:Analytics.GameAssert)
  SharedDtor();
}

void GameAssert::SharedDtor() {
  if (condition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete condition_;
  }
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void GameAssert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameAssert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameAssert_descriptor_;
}

const GameAssert& GameAssert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameAssert* GameAssert::default_instance_ = NULL;

GameAssert* GameAssert::New() const {
  return new GameAssert;
}

void GameAssert::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        condition_->clear();
      }
    }
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    line_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameAssert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameAssert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string condition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "condition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // optional string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line;
        break;
      }

      // optional int32 line = 3;
      case 3: {
        if (tag == 24) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameAssert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameAssert)
  return false;
#undef DO_
}

void GameAssert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameAssert)
  // required string condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->condition(), output);
  }

  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // optional int32 line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameAssert)
}

::google::protobuf::uint8* GameAssert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameAssert)
  // required string condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->condition(), target);
  }

  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // optional int32 line = 3;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameAssert)
  return target;
}

int GameAssert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string condition = 1;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional int32 line = 3;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameAssert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameAssert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameAssert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameAssert::MergeFrom(const GameAssert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameAssert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameAssert::CopyFrom(const GameAssert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameAssert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameAssert::Swap(GameAssert* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(file_, other->file_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameAssert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameAssert_descriptor_;
  metadata.reflection = GameAssert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameCrash::kInfoFieldNumber;
#endif  // !_MSC_VER

GameCrash::GameCrash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameCrash)
}

void GameCrash::InitAsDefaultInstance() {
}

GameCrash::GameCrash(const GameCrash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameCrash)
}

void GameCrash::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameCrash::~GameCrash() {
  // @@protoc_insertion_point(destructor:Analytics.GameCrash)
  SharedDtor();
}

void GameCrash::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void GameCrash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCrash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameCrash_descriptor_;
}

const GameCrash& GameCrash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameCrash* GameCrash::default_instance_ = NULL;

GameCrash* GameCrash::New() const {
  return new GameCrash;
}

void GameCrash::Clear() {
  if (has_info()) {
    if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      info_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameCrash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameCrash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameCrash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameCrash)
  return false;
#undef DO_
}

void GameCrash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameCrash)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameCrash)
}

::google::protobuf::uint8* GameCrash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameCrash)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameCrash)
  return target;
}

int GameCrash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCrash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameCrash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameCrash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameCrash::MergeFrom(const GameCrash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameCrash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCrash::CopyFrom(const GameCrash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCrash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameCrash::Swap(GameCrash* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameCrash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameCrash_descriptor_;
  metadata.reflection = GameCrash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameModelData::kCompressionTypeFieldNumber;
const int GameModelData::kModelNameFieldNumber;
const int GameModelData::kModelBytesFieldNumber;
const int GameModelData::kModelBytesUncompressedFieldNumber;
#endif  // !_MSC_VER

GameModelData::GameModelData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameModelData)
}

void GameModelData::InitAsDefaultInstance() {
}

GameModelData::GameModelData(const GameModelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameModelData)
}

void GameModelData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  compressiontype_ = 0;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelbytesuncompressed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameModelData::~GameModelData() {
  // @@protoc_insertion_point(destructor:Analytics.GameModelData)
  SharedDtor();
}

void GameModelData::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelname_;
  }
  if (modelbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelbytes_;
  }
  if (this != default_instance_) {
  }
}

void GameModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameModelData_descriptor_;
}

const GameModelData& GameModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameModelData* GameModelData::default_instance_ = NULL;

GameModelData* GameModelData::New() const {
  return new GameModelData;
}

void GameModelData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameModelData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(compressiontype_, modelbytesuncompressed_);
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelname_->clear();
      }
    }
    if (has_modelbytes()) {
      if (modelbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelbytes_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameModelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Analytics::Compression_IsValid(value)) {
            set_compressiontype(static_cast< ::Analytics::Compression >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modelName;
        break;
      }

      // required string modelName = 2;
      case 2: {
        if (tag == 18) {
         parse_modelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modelBytes;
        break;
      }

      // required bytes modelBytes = 3;
      case 3: {
        if (tag == 26) {
         parse_modelBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modelbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_modelBytesUncompressed;
        break;
      }

      // optional uint32 modelBytesUncompressed = 4;
      case 4: {
        if (tag == 32) {
         parse_modelBytesUncompressed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modelbytesuncompressed_)));
          set_has_modelbytesuncompressed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameModelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameModelData)
  return false;
#undef DO_
}

void GameModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameModelData)
  // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
  if (has_compressiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->compressiontype(), output);
  }

  // required string modelName = 2;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modelname(), output);
  }

  // required bytes modelBytes = 3;
  if (has_modelbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->modelbytes(), output);
  }

  // optional uint32 modelBytesUncompressed = 4;
  if (has_modelbytesuncompressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->modelbytesuncompressed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameModelData)
}

::google::protobuf::uint8* GameModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameModelData)
  // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
  if (has_compressiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->compressiontype(), target);
  }

  // required string modelName = 2;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modelname(), target);
  }

  // required bytes modelBytes = 3;
  if (has_modelbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modelbytes(), target);
  }

  // optional uint32 modelBytesUncompressed = 4;
  if (has_modelbytesuncompressed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->modelbytesuncompressed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameModelData)
  return target;
}

int GameModelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
    if (has_compressiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compressiontype());
    }

    // required string modelName = 2;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

    // required bytes modelBytes = 3;
    if (has_modelbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->modelbytes());
    }

    // optional uint32 modelBytesUncompressed = 4;
    if (has_modelbytesuncompressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modelbytesuncompressed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameModelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameModelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameModelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameModelData::MergeFrom(const GameModelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compressiontype()) {
      set_compressiontype(from.compressiontype());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_modelbytes()) {
      set_modelbytes(from.modelbytes());
    }
    if (from.has_modelbytesuncompressed()) {
      set_modelbytesuncompressed(from.modelbytesuncompressed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameModelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameModelData::CopyFrom(const GameModelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameModelData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void GameModelData::Swap(GameModelData* other) {
  if (other != this) {
    std::swap(compressiontype_, other->compressiontype_);
    std::swap(modelname_, other->modelname_);
    std::swap(modelbytes_, other->modelbytes_);
    std::swap(modelbytesuncompressed_, other->modelbytesuncompressed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameModelData_descriptor_;
  metadata.reflection = GameModelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEntityInfo_Ammo::kAmmoTypeFieldNumber;
const int GameEntityInfo_Ammo::kAmmoCountFieldNumber;
#endif  // !_MSC_VER

GameEntityInfo_Ammo::GameEntityInfo_Ammo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameEntityInfo.Ammo)
}

void GameEntityInfo_Ammo::InitAsDefaultInstance() {
}

GameEntityInfo_Ammo::GameEntityInfo_Ammo(const GameEntityInfo_Ammo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameEntityInfo.Ammo)
}

void GameEntityInfo_Ammo::SharedCtor() {
  _cached_size_ = 0;
  ammotype_ = 0u;
  ammocount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEntityInfo_Ammo::~GameEntityInfo_Ammo() {
  // @@protoc_insertion_point(destructor:Analytics.GameEntityInfo.Ammo)
  SharedDtor();
}

void GameEntityInfo_Ammo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEntityInfo_Ammo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEntityInfo_Ammo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEntityInfo_Ammo_descriptor_;
}

const GameEntityInfo_Ammo& GameEntityInfo_Ammo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameEntityInfo_Ammo* GameEntityInfo_Ammo::default_instance_ = NULL;

GameEntityInfo_Ammo* GameEntityInfo_Ammo::New() const {
  return new GameEntityInfo_Ammo;
}

void GameEntityInfo_Ammo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameEntityInfo_Ammo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ammotype_, ammocount_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEntityInfo_Ammo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameEntityInfo.Ammo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ammoType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammotype_)));
          set_has_ammotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ammoCount;
        break;
      }

      // optional uint32 ammoCount = 2;
      case 2: {
        if (tag == 16) {
         parse_ammoCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammocount_)));
          set_has_ammocount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameEntityInfo.Ammo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameEntityInfo.Ammo)
  return false;
#undef DO_
}

void GameEntityInfo_Ammo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameEntityInfo.Ammo)
  // required uint32 ammoType = 1;
  if (has_ammotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ammotype(), output);
  }

  // optional uint32 ammoCount = 2;
  if (has_ammocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ammocount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameEntityInfo.Ammo)
}

::google::protobuf::uint8* GameEntityInfo_Ammo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameEntityInfo.Ammo)
  // required uint32 ammoType = 1;
  if (has_ammotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ammotype(), target);
  }

  // optional uint32 ammoCount = 2;
  if (has_ammocount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ammocount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameEntityInfo.Ammo)
  return target;
}

int GameEntityInfo_Ammo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ammoType = 1;
    if (has_ammotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammotype());
    }

    // optional uint32 ammoCount = 2;
    if (has_ammocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammocount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEntityInfo_Ammo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEntityInfo_Ammo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEntityInfo_Ammo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEntityInfo_Ammo::MergeFrom(const GameEntityInfo_Ammo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ammotype()) {
      set_ammotype(from.ammotype());
    }
    if (from.has_ammocount()) {
      set_ammocount(from.ammocount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEntityInfo_Ammo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEntityInfo_Ammo::CopyFrom(const GameEntityInfo_Ammo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEntityInfo_Ammo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameEntityInfo_Ammo::Swap(GameEntityInfo_Ammo* other) {
  if (other != this) {
    std::swap(ammotype_, other->ammotype_);
    std::swap(ammocount_, other->ammocount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEntityInfo_Ammo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEntityInfo_Ammo_descriptor_;
  metadata.reflection = GameEntityInfo_Ammo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GameEntityInfo::kNameFieldNumber;
const int GameEntityInfo::kEntityIdFieldNumber;
const int GameEntityInfo::kGroupIdFieldNumber;
const int GameEntityInfo::kClassIdFieldNumber;
const int GameEntityInfo::kPositionXFieldNumber;
const int GameEntityInfo::kPositionYFieldNumber;
const int GameEntityInfo::kPositionZFieldNumber;
const int GameEntityInfo::kHeadingFieldNumber;
const int GameEntityInfo::kPitchFieldNumber;
const int GameEntityInfo::kRollFieldNumber;
const int GameEntityInfo::kHealthFieldNumber;
const int GameEntityInfo::kHealthMaxFieldNumber;
const int GameEntityInfo::kArmorFieldNumber;
const int GameEntityInfo::kArmorMaxFieldNumber;
const int GameEntityInfo::kTeamFieldNumber;
const int GameEntityInfo::kAmmoFieldNumber;
#endif  // !_MSC_VER

GameEntityInfo::GameEntityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameEntityInfo)
}

void GameEntityInfo::InitAsDefaultInstance() {
}

GameEntityInfo::GameEntityInfo(const GameEntityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameEntityInfo)
}

void GameEntityInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entityid_ = 0;
  groupid_ = 0;
  classid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  heading_ = 0;
  pitch_ = 0;
  roll_ = 0;
  health_ = 0u;
  healthmax_ = 0u;
  armor_ = 0u;
  armormax_ = 0u;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEntityInfo::~GameEntityInfo() {
  // @@protoc_insertion_point(destructor:Analytics.GameEntityInfo)
  SharedDtor();
}

void GameEntityInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GameEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEntityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEntityInfo_descriptor_;
}

const GameEntityInfo& GameEntityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameEntityInfo* GameEntityInfo::default_instance_ = NULL;

GameEntityInfo* GameEntityInfo::New() const {
  return new GameEntityInfo;
}

void GameEntityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameEntityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(entityid_, heading_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(pitch_, team_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ammo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_entityId;
        break;
      }

      // required int32 entityId = 2;
      case 2: {
        if (tag == 16) {
         parse_entityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_groupId;
        break;
      }

      // optional int32 groupId = 3;
      case 3: {
        if (tag == 24) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_classId;
        break;
      }

      // optional int32 classId = 4;
      case 4: {
        if (tag == 32) {
         parse_classId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_positionX;
        break;
      }

      // optional float positionX = 5;
      case 5: {
        if (tag == 45) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_positionY;
        break;
      }

      // optional float positionY = 6;
      case 6: {
        if (tag == 53) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_positionZ;
        break;
      }

      // optional float positionZ = 7;
      case 7: {
        if (tag == 61) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_heading;
        break;
      }

      // optional float heading = 8;
      case 8: {
        if (tag == 69) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_pitch;
        break;
      }

      // optional float pitch = 9;
      case 9: {
        if (tag == 77) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_roll;
        break;
      }

      // optional float roll = 10;
      case 10: {
        if (tag == 85) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_health;
        break;
      }

      // optional uint32 health = 12;
      case 12: {
        if (tag == 96) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_healthMax;
        break;
      }

      // optional uint32 healthMax = 13;
      case 13: {
        if (tag == 104) {
         parse_healthMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healthmax_)));
          set_has_healthmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_armor;
        break;
      }

      // optional uint32 armor = 14;
      case 14: {
        if (tag == 112) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_armorMax;
        break;
      }

      // optional uint32 armorMax = 15;
      case 15: {
        if (tag == 120) {
         parse_armorMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armormax_)));
          set_has_armormax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_team;
        break;
      }

      // optional uint32 team = 16;
      case 16: {
        if (tag == 128) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ammo;
        break;
      }

      // repeated .Analytics.GameEntityInfo.Ammo ammo = 20;
      case 20: {
        if (tag == 162) {
         parse_ammo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ammo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_ammo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameEntityInfo)
  return false;
#undef DO_
}

void GameEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameEntityInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 entityId = 2;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entityid(), output);
  }

  // optional int32 groupId = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }

  // optional int32 classId = 4;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->classid(), output);
  }

  // optional float positionX = 5;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->positionx(), output);
  }

  // optional float positionY = 6;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->positiony(), output);
  }

  // optional float positionZ = 7;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->positionz(), output);
  }

  // optional float heading = 8;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->heading(), output);
  }

  // optional float pitch = 9;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pitch(), output);
  }

  // optional float roll = 10;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->roll(), output);
  }

  // optional uint32 health = 12;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->health(), output);
  }

  // optional uint32 healthMax = 13;
  if (has_healthmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->healthmax(), output);
  }

  // optional uint32 armor = 14;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->armor(), output);
  }

  // optional uint32 armorMax = 15;
  if (has_armormax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->armormax(), output);
  }

  // optional uint32 team = 16;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->team(), output);
  }

  // repeated .Analytics.GameEntityInfo.Ammo ammo = 20;
  for (int i = 0; i < this->ammo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->ammo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameEntityInfo)
}

::google::protobuf::uint8* GameEntityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameEntityInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 entityId = 2;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entityid(), target);
  }

  // optional int32 groupId = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }

  // optional int32 classId = 4;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->classid(), target);
  }

  // optional float positionX = 5;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->positionx(), target);
  }

  // optional float positionY = 6;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->positiony(), target);
  }

  // optional float positionZ = 7;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->positionz(), target);
  }

  // optional float heading = 8;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->heading(), target);
  }

  // optional float pitch = 9;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pitch(), target);
  }

  // optional float roll = 10;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->roll(), target);
  }

  // optional uint32 health = 12;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->health(), target);
  }

  // optional uint32 healthMax = 13;
  if (has_healthmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->healthmax(), target);
  }

  // optional uint32 armor = 14;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->armor(), target);
  }

  // optional uint32 armorMax = 15;
  if (has_armormax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->armormax(), target);
  }

  // optional uint32 team = 16;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->team(), target);
  }

  // repeated .Analytics.GameEntityInfo.Ammo ammo = 20;
  for (int i = 0; i < this->ammo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->ammo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameEntityInfo)
  return target;
}

int GameEntityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 entityId = 2;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

    // optional int32 groupId = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // optional int32 classId = 4;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }

    // optional float positionX = 5;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // optional float positionY = 6;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // optional float positionZ = 7;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

    // optional float heading = 8;
    if (has_heading()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pitch = 9;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float roll = 10;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional uint32 health = 12;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional uint32 healthMax = 13;
    if (has_healthmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healthmax());
    }

    // optional uint32 armor = 14;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor());
    }

    // optional uint32 armorMax = 15;
    if (has_armormax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armormax());
    }

    // optional uint32 team = 16;
    if (has_team()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  // repeated .Analytics.GameEntityInfo.Ammo ammo = 20;
  total_size += 2 * this->ammo_size();
  for (int i = 0; i < this->ammo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ammo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEntityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEntityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEntityInfo::MergeFrom(const GameEntityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ammo_.MergeFrom(from.ammo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_healthmax()) {
      set_healthmax(from.healthmax());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_armormax()) {
      set_armormax(from.armormax());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEntityInfo::CopyFrom(const GameEntityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEntityInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ammo())) return false;
  return true;
}

void GameEntityInfo::Swap(GameEntityInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(entityid_, other->entityid_);
    std::swap(groupid_, other->groupid_);
    std::swap(classid_, other->classid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(heading_, other->heading_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(health_, other->health_);
    std::swap(healthmax_, other->healthmax_);
    std::swap(armor_, other->armor_);
    std::swap(armormax_, other->armormax_);
    std::swap(team_, other->team_);
    ammo_.Swap(&other->ammo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEntityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEntityInfo_descriptor_;
  metadata.reflection = GameEntityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEntityList::kEntitiesFieldNumber;
#endif  // !_MSC_VER

GameEntityList::GameEntityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameEntityList)
}

void GameEntityList::InitAsDefaultInstance() {
}

GameEntityList::GameEntityList(const GameEntityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameEntityList)
}

void GameEntityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEntityList::~GameEntityList() {
  // @@protoc_insertion_point(destructor:Analytics.GameEntityList)
  SharedDtor();
}

void GameEntityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEntityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEntityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEntityList_descriptor_;
}

const GameEntityList& GameEntityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameEntityList* GameEntityList::default_instance_ = NULL;

GameEntityList* GameEntityList::New() const {
  return new GameEntityList;
}

void GameEntityList::Clear() {
  entities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEntityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameEntityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Analytics.GameEntityInfo entities = 1;
      case 1: {
        if (tag == 10) {
         parse_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameEntityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameEntityList)
  return false;
#undef DO_
}

void GameEntityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameEntityList)
  // repeated .Analytics.GameEntityInfo entities = 1;
  for (int i = 0; i < this->entities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameEntityList)
}

::google::protobuf::uint8* GameEntityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameEntityList)
  // repeated .Analytics.GameEntityInfo entities = 1;
  for (int i = 0; i < this->entities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameEntityList)
  return target;
}

int GameEntityList::ByteSize() const {
  int total_size = 0;

  // repeated .Analytics.GameEntityInfo entities = 1;
  total_size += 1 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEntityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEntityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEntityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEntityList::MergeFrom(const GameEntityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  entities_.MergeFrom(from.entities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEntityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEntityList::CopyFrom(const GameEntityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEntityList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entities())) return false;
  return true;
}

void GameEntityList::Swap(GameEntityList* other) {
  if (other != this) {
    entities_.Swap(&other->entities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEntityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEntityList_descriptor_;
  metadata.reflection = GameEntityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameWeaponFired::kWeaponIdFieldNumber;
const int GameWeaponFired::kPositionXFieldNumber;
const int GameWeaponFired::kPositionYFieldNumber;
const int GameWeaponFired::kPositionZFieldNumber;
const int GameWeaponFired::kFireModeFieldNumber;
const int GameWeaponFired::kTeamFieldNumber;
#endif  // !_MSC_VER

GameWeaponFired::GameWeaponFired()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameWeaponFired)
}

void GameWeaponFired::InitAsDefaultInstance() {
}

GameWeaponFired::GameWeaponFired(const GameWeaponFired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameWeaponFired)
}

void GameWeaponFired::SharedCtor() {
  _cached_size_ = 0;
  weaponid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  firemode_ = 0u;
  team_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameWeaponFired::~GameWeaponFired() {
  // @@protoc_insertion_point(destructor:Analytics.GameWeaponFired)
  SharedDtor();
}

void GameWeaponFired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameWeaponFired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameWeaponFired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameWeaponFired_descriptor_;
}

const GameWeaponFired& GameWeaponFired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameWeaponFired* GameWeaponFired::default_instance_ = NULL;

GameWeaponFired* GameWeaponFired::New() const {
  return new GameWeaponFired;
}

void GameWeaponFired::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameWeaponFired*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(weaponid_, team_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameWeaponFired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameWeaponFired)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 weaponId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_positionX;
        break;
      }

      // optional float positionX = 2;
      case 2: {
        if (tag == 21) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positionY;
        break;
      }

      // optional float positionY = 3;
      case 3: {
        if (tag == 29) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionZ;
        break;
      }

      // optional float positionZ = 4;
      case 4: {
        if (tag == 37) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_fireMode;
        break;
      }

      // optional uint32 fireMode = 5;
      case 5: {
        if (tag == 40) {
         parse_fireMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firemode_)));
          set_has_firemode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_team;
        break;
      }

      // optional int32 team = 6;
      case 6: {
        if (tag == 48) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameWeaponFired)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameWeaponFired)
  return false;
#undef DO_
}

void GameWeaponFired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameWeaponFired)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weaponid(), output);
  }

  // optional float positionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->positionx(), output);
  }

  // optional float positionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positiony(), output);
  }

  // optional float positionZ = 4;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionz(), output);
  }

  // optional uint32 fireMode = 5;
  if (has_firemode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->firemode(), output);
  }

  // optional int32 team = 6;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameWeaponFired)
}

::google::protobuf::uint8* GameWeaponFired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameWeaponFired)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weaponid(), target);
  }

  // optional float positionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->positionx(), target);
  }

  // optional float positionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positiony(), target);
  }

  // optional float positionZ = 4;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionz(), target);
  }

  // optional uint32 fireMode = 5;
  if (has_firemode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->firemode(), target);
  }

  // optional int32 team = 6;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameWeaponFired)
  return target;
}

int GameWeaponFired::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 weaponId = 1;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // optional float positionX = 2;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // optional float positionY = 3;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // optional float positionZ = 4;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

    // optional uint32 fireMode = 5;
    if (has_firemode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firemode());
    }

    // optional int32 team = 6;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameWeaponFired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameWeaponFired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameWeaponFired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameWeaponFired::MergeFrom(const GameWeaponFired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
    if (from.has_firemode()) {
      set_firemode(from.firemode());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameWeaponFired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameWeaponFired::CopyFrom(const GameWeaponFired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWeaponFired::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GameWeaponFired::Swap(GameWeaponFired* other) {
  if (other != this) {
    std::swap(weaponid_, other->weaponid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(firemode_, other->firemode_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameWeaponFired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameWeaponFired_descriptor_;
  metadata.reflection = GameWeaponFired_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameDeath::kKilledByClassFieldNumber;
const int GameDeath::kKilledByWeaponFieldNumber;
const int GameDeath::kKilledByHealthFieldNumber;
const int GameDeath::kTeamFieldNumber;
#endif  // !_MSC_VER

GameDeath::GameDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameDeath)
}

void GameDeath::InitAsDefaultInstance() {
}

GameDeath::GameDeath(const GameDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameDeath)
}

void GameDeath::SharedCtor() {
  _cached_size_ = 0;
  killedbyclass_ = 0;
  killedbyweapon_ = 0;
  killedbyhealth_ = 0;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDeath::~GameDeath() {
  // @@protoc_insertion_point(destructor:Analytics.GameDeath)
  SharedDtor();
}

void GameDeath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDeath_descriptor_;
}

const GameDeath& GameDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameDeath* GameDeath::default_instance_ = NULL;

GameDeath* GameDeath::New() const {
  return new GameDeath;
}

void GameDeath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameDeath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(killedbyclass_, team_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 killedByClass = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedbyclass_)));
          set_has_killedbyclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killedByWeapon;
        break;
      }

      // required int32 killedByWeapon = 2;
      case 2: {
        if (tag == 16) {
         parse_killedByWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedbyweapon_)));
          set_has_killedbyweapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killedByHealth;
        break;
      }

      // required int32 killedByHealth = 3;
      case 3: {
        if (tag == 24) {
         parse_killedByHealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedbyhealth_)));
          set_has_killedbyhealth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_team;
        break;
      }

      // optional uint32 team = 4;
      case 4: {
        if (tag == 32) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameDeath)
  return false;
#undef DO_
}

void GameDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameDeath)
  // required int32 killedByClass = 1;
  if (has_killedbyclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->killedbyclass(), output);
  }

  // required int32 killedByWeapon = 2;
  if (has_killedbyweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killedbyweapon(), output);
  }

  // required int32 killedByHealth = 3;
  if (has_killedbyhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killedbyhealth(), output);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameDeath)
}

::google::protobuf::uint8* GameDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameDeath)
  // required int32 killedByClass = 1;
  if (has_killedbyclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->killedbyclass(), target);
  }

  // required int32 killedByWeapon = 2;
  if (has_killedbyweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killedbyweapon(), target);
  }

  // required int32 killedByHealth = 3;
  if (has_killedbyhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killedbyhealth(), target);
  }

  // optional uint32 team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameDeath)
  return target;
}

int GameDeath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 killedByClass = 1;
    if (has_killedbyclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedbyclass());
    }

    // required int32 killedByWeapon = 2;
    if (has_killedbyweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedbyweapon());
    }

    // required int32 killedByHealth = 3;
    if (has_killedbyhealth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedbyhealth());
    }

    // optional uint32 team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDeath::MergeFrom(const GameDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killedbyclass()) {
      set_killedbyclass(from.killedbyclass());
    }
    if (from.has_killedbyweapon()) {
      set_killedbyweapon(from.killedbyweapon());
    }
    if (from.has_killedbyhealth()) {
      set_killedbyhealth(from.killedbyhealth());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDeath::CopyFrom(const GameDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GameDeath::Swap(GameDeath* other) {
  if (other != this) {
    std::swap(killedbyclass_, other->killedbyclass_);
    std::swap(killedbyweapon_, other->killedbyweapon_);
    std::swap(killedbyhealth_, other->killedbyhealth_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDeath_descriptor_;
  metadata.reflection = GameDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTookDamage::kWeaponIdFieldNumber;
const int GameTookDamage::kPositionXFieldNumber;
const int GameTookDamage::kPositionYFieldNumber;
const int GameTookDamage::kPositionZFieldNumber;
const int GameTookDamage::kTeamFieldNumber;
#endif  // !_MSC_VER

GameTookDamage::GameTookDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameTookDamage)
}

void GameTookDamage::InitAsDefaultInstance() {
}

GameTookDamage::GameTookDamage(const GameTookDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameTookDamage)
}

void GameTookDamage::SharedCtor() {
  _cached_size_ = 0;
  weaponid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  team_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTookDamage::~GameTookDamage() {
  // @@protoc_insertion_point(destructor:Analytics.GameTookDamage)
  SharedDtor();
}

void GameTookDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTookDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTookDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTookDamage_descriptor_;
}

const GameTookDamage& GameTookDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameTookDamage* GameTookDamage::default_instance_ = NULL;

GameTookDamage* GameTookDamage::New() const {
  return new GameTookDamage;
}

void GameTookDamage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameTookDamage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(weaponid_, team_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTookDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameTookDamage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 weaponId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_positionX;
        break;
      }

      // required float positionX = 2;
      case 2: {
        if (tag == 21) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positionY;
        break;
      }

      // required float positionY = 3;
      case 3: {
        if (tag == 29) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionZ;
        break;
      }

      // required float positionZ = 4;
      case 4: {
        if (tag == 37) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_team;
        break;
      }

      // optional uint32 team = 5;
      case 5: {
        if (tag == 40) {
         parse_team:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_)));
          set_has_team();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameTookDamage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameTookDamage)
  return false;
#undef DO_
}

void GameTookDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameTookDamage)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weaponid(), output);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->positionx(), output);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positiony(), output);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionz(), output);
  }

  // optional uint32 team = 5;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameTookDamage)
}

::google::protobuf::uint8* GameTookDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameTookDamage)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weaponid(), target);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->positionx(), target);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positiony(), target);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionz(), target);
  }

  // optional uint32 team = 5;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameTookDamage)
  return target;
}

int GameTookDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 weaponId = 1;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // required float positionX = 2;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // required float positionY = 3;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // required float positionZ = 4;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

    // optional uint32 team = 5;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTookDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTookDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTookDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTookDamage::MergeFrom(const GameTookDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
    if (from.has_team()) {
      set_team(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTookDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTookDamage::CopyFrom(const GameTookDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTookDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameTookDamage::Swap(GameTookDamage* other) {
  if (other != this) {
    std::swap(weaponid_, other->weaponid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTookDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTookDamage_descriptor_;
  metadata.reflection = GameTookDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameNavigationStuck::kEntityIdFieldNumber;
const int GameNavigationStuck::kPositionXFieldNumber;
const int GameNavigationStuck::kPositionYFieldNumber;
const int GameNavigationStuck::kPositionZFieldNumber;
#endif  // !_MSC_VER

GameNavigationStuck::GameNavigationStuck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameNavigationStuck)
}

void GameNavigationStuck::InitAsDefaultInstance() {
}

GameNavigationStuck::GameNavigationStuck(const GameNavigationStuck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameNavigationStuck)
}

void GameNavigationStuck::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNavigationStuck::~GameNavigationStuck() {
  // @@protoc_insertion_point(destructor:Analytics.GameNavigationStuck)
  SharedDtor();
}

void GameNavigationStuck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameNavigationStuck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNavigationStuck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNavigationStuck_descriptor_;
}

const GameNavigationStuck& GameNavigationStuck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameNavigationStuck* GameNavigationStuck::default_instance_ = NULL;

GameNavigationStuck* GameNavigationStuck::New() const {
  return new GameNavigationStuck;
}

void GameNavigationStuck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameNavigationStuck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entityid_, positionz_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameNavigationStuck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameNavigationStuck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_positionX;
        break;
      }

      // required float positionX = 2;
      case 2: {
        if (tag == 21) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positionY;
        break;
      }

      // required float positionY = 3;
      case 3: {
        if (tag == 29) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionZ;
        break;
      }

      // required float positionZ = 4;
      case 4: {
        if (tag == 37) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameNavigationStuck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameNavigationStuck)
  return false;
#undef DO_
}

void GameNavigationStuck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameNavigationStuck)
  // required int32 entityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->positionx(), output);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positiony(), output);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameNavigationStuck)
}

::google::protobuf::uint8* GameNavigationStuck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameNavigationStuck)
  // required int32 entityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->positionx(), target);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positiony(), target);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameNavigationStuck)
  return target;
}

int GameNavigationStuck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

    // required float positionX = 2;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // required float positionY = 3;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // required float positionZ = 4;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNavigationStuck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameNavigationStuck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameNavigationStuck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNavigationStuck::MergeFrom(const GameNavigationStuck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameNavigationStuck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNavigationStuck::CopyFrom(const GameNavigationStuck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNavigationStuck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameNavigationStuck::Swap(GameNavigationStuck* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameNavigationStuck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNavigationStuck_descriptor_;
  metadata.reflection = GameNavigationStuck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageUnion::kTimestampFieldNumber;
const int MessageUnion::kGameInfoFieldNumber;
const int MessageUnion::kGameNavNotFoundFieldNumber;
const int MessageUnion::kSystemNavDownloadedFieldNumber;
const int MessageUnion::kGameAssertFieldNumber;
const int MessageUnion::kGameCrashFieldNumber;
const int MessageUnion::kGameModelDataFieldNumber;
const int MessageUnion::kGameEntityListFieldNumber;
const int MessageUnion::kGameWeaponFiredFieldNumber;
const int MessageUnion::kGameDeathFieldNumber;
const int MessageUnion::kGameTookDamageFieldNumber;
const int MessageUnion::kGameNavigationStuckFieldNumber;
const int MessageUnion::kTopicSubscribeFieldNumber;
const int MessageUnion::kTopicUnsubscribeFieldNumber;
#endif  // !_MSC_VER

MessageUnion::MessageUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.MessageUnion)
}

void MessageUnion::InitAsDefaultInstance() {
  MessageUnion_default_oneof_instance_->gameinfo_ = const_cast< ::Analytics::GameInfo*>(&::Analytics::GameInfo::default_instance());
  MessageUnion_default_oneof_instance_->gamenavnotfound_ = const_cast< ::Analytics::GameNavNotFound*>(&::Analytics::GameNavNotFound::default_instance());
  MessageUnion_default_oneof_instance_->systemnavdownloaded_ = const_cast< ::Analytics::GameNavAutoDownloaded*>(&::Analytics::GameNavAutoDownloaded::default_instance());
  MessageUnion_default_oneof_instance_->gameassert_ = const_cast< ::Analytics::GameAssert*>(&::Analytics::GameAssert::default_instance());
  MessageUnion_default_oneof_instance_->gamecrash_ = const_cast< ::Analytics::GameCrash*>(&::Analytics::GameCrash::default_instance());
  MessageUnion_default_oneof_instance_->gamemodeldata_ = const_cast< ::Analytics::GameModelData*>(&::Analytics::GameModelData::default_instance());
  MessageUnion_default_oneof_instance_->gameentitylist_ = const_cast< ::Analytics::GameEntityList*>(&::Analytics::GameEntityList::default_instance());
  MessageUnion_default_oneof_instance_->gameweaponfired_ = const_cast< ::Analytics::GameWeaponFired*>(&::Analytics::GameWeaponFired::default_instance());
  MessageUnion_default_oneof_instance_->gamedeath_ = const_cast< ::Analytics::GameDeath*>(&::Analytics::GameDeath::default_instance());
  MessageUnion_default_oneof_instance_->gametookdamage_ = const_cast< ::Analytics::GameTookDamage*>(&::Analytics::GameTookDamage::default_instance());
  MessageUnion_default_oneof_instance_->gamenavigationstuck_ = const_cast< ::Analytics::GameNavigationStuck*>(&::Analytics::GameNavigationStuck::default_instance());
  MessageUnion_default_oneof_instance_->topicsubscribe_ = const_cast< ::Analytics::TopicSubscribe*>(&::Analytics::TopicSubscribe::default_instance());
  MessageUnion_default_oneof_instance_->topicunsubscribe_ = const_cast< ::Analytics::TopicUnsubscribe*>(&::Analytics::TopicUnsubscribe::default_instance());
}

MessageUnion::MessageUnion(const MessageUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.MessageUnion)
}

void MessageUnion::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg();
}

MessageUnion::~MessageUnion() {
  // @@protoc_insertion_point(destructor:Analytics.MessageUnion)
  SharedDtor();
}

void MessageUnion::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void MessageUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageUnion_descriptor_;
}

const MessageUnion& MessageUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

MessageUnion* MessageUnion::default_instance_ = NULL;

MessageUnion* MessageUnion::New() const {
  return new MessageUnion;
}

void MessageUnion::clear_msg() {
  switch(msg_case()) {
    case kGameInfo: {
      delete msg_.gameinfo_;
      break;
    }
    case kGameNavNotFound: {
      delete msg_.gamenavnotfound_;
      break;
    }
    case kSystemNavDownloaded: {
      delete msg_.systemnavdownloaded_;
      break;
    }
    case kGameAssert: {
      delete msg_.gameassert_;
      break;
    }
    case kGameCrash: {
      delete msg_.gamecrash_;
      break;
    }
    case kGameModelData: {
      delete msg_.gamemodeldata_;
      break;
    }
    case kGameEntityList: {
      delete msg_.gameentitylist_;
      break;
    }
    case kGameWeaponFired: {
      delete msg_.gameweaponfired_;
      break;
    }
    case kGameDeath: {
      delete msg_.gamedeath_;
      break;
    }
    case kGameTookDamage: {
      delete msg_.gametookdamage_;
      break;
    }
    case kGameNavigationStuck: {
      delete msg_.gamenavigationstuck_;
      break;
    }
    case kTopicSubscribe: {
      delete msg_.topicsubscribe_;
      break;
    }
    case kTopicUnsubscribe: {
      delete msg_.topicunsubscribe_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void MessageUnion::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_msg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.MessageUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_gameInfo;
        break;
      }

      // optional .Analytics.GameInfo gameInfo = 9;
      case 9: {
        if (tag == 74) {
         parse_gameInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_gameNavNotFound;
        break;
      }

      // optional .Analytics.GameNavNotFound gameNavNotFound = 10;
      case 10: {
        if (tag == 82) {
         parse_gameNavNotFound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenavnotfound()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_systemNavDownloaded;
        break;
      }

      // optional .Analytics.GameNavAutoDownloaded systemNavDownloaded = 11;
      case 11: {
        if (tag == 90) {
         parse_systemNavDownloaded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemnavdownloaded()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_gameAssert;
        break;
      }

      // optional .Analytics.GameAssert gameAssert = 12;
      case 12: {
        if (tag == 98) {
         parse_gameAssert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameassert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_gameCrash;
        break;
      }

      // optional .Analytics.GameCrash gameCrash = 13;
      case 13: {
        if (tag == 106) {
         parse_gameCrash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamecrash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_gameModelData;
        break;
      }

      // optional .Analytics.GameModelData gameModelData = 14;
      case 14: {
        if (tag == 114) {
         parse_gameModelData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamemodeldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_gameEntityList;
        break;
      }

      // optional .Analytics.GameEntityList gameEntityList = 100;
      case 100: {
        if (tag == 802) {
         parse_gameEntityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameentitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_gameWeaponFired;
        break;
      }

      // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
      case 101: {
        if (tag == 810) {
         parse_gameWeaponFired:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameweaponfired()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_gameDeath;
        break;
      }

      // optional .Analytics.GameDeath gameDeath = 102;
      case 102: {
        if (tag == 818) {
         parse_gameDeath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamedeath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_gameTookDamage;
        break;
      }

      // optional .Analytics.GameTookDamage gameTookDamage = 103;
      case 103: {
        if (tag == 826) {
         parse_gameTookDamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gametookdamage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_gameNavigationStuck;
        break;
      }

      // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
      case 104: {
        if (tag == 834) {
         parse_gameNavigationStuck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenavigationstuck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_topicSubscribe;
        break;
      }

      // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_topicSubscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topicsubscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_topicUnsubscribe;
        break;
      }

      // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_topicUnsubscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topicunsubscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.MessageUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.MessageUnion)
  return false;
#undef DO_
}

void MessageUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.MessageUnion)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .Analytics.GameInfo gameInfo = 9;
  if (has_gameinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->gameinfo(), output);
  }

  // optional .Analytics.GameNavNotFound gameNavNotFound = 10;
  if (has_gamenavnotfound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->gamenavnotfound(), output);
  }

  // optional .Analytics.GameNavAutoDownloaded systemNavDownloaded = 11;
  if (has_systemnavdownloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->systemnavdownloaded(), output);
  }

  // optional .Analytics.GameAssert gameAssert = 12;
  if (has_gameassert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->gameassert(), output);
  }

  // optional .Analytics.GameCrash gameCrash = 13;
  if (has_gamecrash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->gamecrash(), output);
  }

  // optional .Analytics.GameModelData gameModelData = 14;
  if (has_gamemodeldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->gamemodeldata(), output);
  }

  // optional .Analytics.GameEntityList gameEntityList = 100;
  if (has_gameentitylist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->gameentitylist(), output);
  }

  // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
  if (has_gameweaponfired()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->gameweaponfired(), output);
  }

  // optional .Analytics.GameDeath gameDeath = 102;
  if (has_gamedeath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->gamedeath(), output);
  }

  // optional .Analytics.GameTookDamage gameTookDamage = 103;
  if (has_gametookdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->gametookdamage(), output);
  }

  // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
  if (has_gamenavigationstuck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->gamenavigationstuck(), output);
  }

  // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
  if (has_topicsubscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->topicsubscribe(), output);
  }

  // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
  if (has_topicunsubscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->topicunsubscribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.MessageUnion)
}

::google::protobuf::uint8* MessageUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.MessageUnion)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .Analytics.GameInfo gameInfo = 9;
  if (has_gameinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->gameinfo(), target);
  }

  // optional .Analytics.GameNavNotFound gameNavNotFound = 10;
  if (has_gamenavnotfound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->gamenavnotfound(), target);
  }

  // optional .Analytics.GameNavAutoDownloaded systemNavDownloaded = 11;
  if (has_systemnavdownloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->systemnavdownloaded(), target);
  }

  // optional .Analytics.GameAssert gameAssert = 12;
  if (has_gameassert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->gameassert(), target);
  }

  // optional .Analytics.GameCrash gameCrash = 13;
  if (has_gamecrash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->gamecrash(), target);
  }

  // optional .Analytics.GameModelData gameModelData = 14;
  if (has_gamemodeldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->gamemodeldata(), target);
  }

  // optional .Analytics.GameEntityList gameEntityList = 100;
  if (has_gameentitylist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->gameentitylist(), target);
  }

  // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
  if (has_gameweaponfired()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->gameweaponfired(), target);
  }

  // optional .Analytics.GameDeath gameDeath = 102;
  if (has_gamedeath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->gamedeath(), target);
  }

  // optional .Analytics.GameTookDamage gameTookDamage = 103;
  if (has_gametookdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->gametookdamage(), target);
  }

  // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
  if (has_gamenavigationstuck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->gamenavigationstuck(), target);
  }

  // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
  if (has_topicsubscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->topicsubscribe(), target);
  }

  // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
  if (has_topicunsubscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->topicunsubscribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.MessageUnion)
  return target;
}

int MessageUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  switch (msg_case()) {
    // optional .Analytics.GameInfo gameInfo = 9;
    case kGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameinfo());
      break;
    }
    // optional .Analytics.GameNavNotFound gameNavNotFound = 10;
    case kGameNavNotFound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenavnotfound());
      break;
    }
    // optional .Analytics.GameNavAutoDownloaded systemNavDownloaded = 11;
    case kSystemNavDownloaded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemnavdownloaded());
      break;
    }
    // optional .Analytics.GameAssert gameAssert = 12;
    case kGameAssert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameassert());
      break;
    }
    // optional .Analytics.GameCrash gameCrash = 13;
    case kGameCrash: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamecrash());
      break;
    }
    // optional .Analytics.GameModelData gameModelData = 14;
    case kGameModelData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamemodeldata());
      break;
    }
    // optional .Analytics.GameEntityList gameEntityList = 100;
    case kGameEntityList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameentitylist());
      break;
    }
    // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
    case kGameWeaponFired: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameweaponfired());
      break;
    }
    // optional .Analytics.GameDeath gameDeath = 102;
    case kGameDeath: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamedeath());
      break;
    }
    // optional .Analytics.GameTookDamage gameTookDamage = 103;
    case kGameTookDamage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gametookdamage());
      break;
    }
    // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
    case kGameNavigationStuck: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenavigationstuck());
      break;
    }
    // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
    case kTopicSubscribe: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topicsubscribe());
      break;
    }
    // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
    case kTopicUnsubscribe: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topicunsubscribe());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageUnion::MergeFrom(const MessageUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.msg_case()) {
    case kGameInfo: {
      mutable_gameinfo()->::Analytics::GameInfo::MergeFrom(from.gameinfo());
      break;
    }
    case kGameNavNotFound: {
      mutable_gamenavnotfound()->::Analytics::GameNavNotFound::MergeFrom(from.gamenavnotfound());
      break;
    }
    case kSystemNavDownloaded: {
      mutable_systemnavdownloaded()->::Analytics::GameNavAutoDownloaded::MergeFrom(from.systemnavdownloaded());
      break;
    }
    case kGameAssert: {
      mutable_gameassert()->::Analytics::GameAssert::MergeFrom(from.gameassert());
      break;
    }
    case kGameCrash: {
      mutable_gamecrash()->::Analytics::GameCrash::MergeFrom(from.gamecrash());
      break;
    }
    case kGameModelData: {
      mutable_gamemodeldata()->::Analytics::GameModelData::MergeFrom(from.gamemodeldata());
      break;
    }
    case kGameEntityList: {
      mutable_gameentitylist()->::Analytics::GameEntityList::MergeFrom(from.gameentitylist());
      break;
    }
    case kGameWeaponFired: {
      mutable_gameweaponfired()->::Analytics::GameWeaponFired::MergeFrom(from.gameweaponfired());
      break;
    }
    case kGameDeath: {
      mutable_gamedeath()->::Analytics::GameDeath::MergeFrom(from.gamedeath());
      break;
    }
    case kGameTookDamage: {
      mutable_gametookdamage()->::Analytics::GameTookDamage::MergeFrom(from.gametookdamage());
      break;
    }
    case kGameNavigationStuck: {
      mutable_gamenavigationstuck()->::Analytics::GameNavigationStuck::MergeFrom(from.gamenavigationstuck());
      break;
    }
    case kTopicSubscribe: {
      mutable_topicsubscribe()->::Analytics::TopicSubscribe::MergeFrom(from.topicsubscribe());
      break;
    }
    case kTopicUnsubscribe: {
      mutable_topicunsubscribe()->::Analytics::TopicUnsubscribe::MergeFrom(from.topicunsubscribe());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageUnion::CopyFrom(const MessageUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageUnion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gameinfo()) {
    if (!this->gameinfo().IsInitialized()) return false;
  }
  if (has_gamenavnotfound()) {
    if (!this->gamenavnotfound().IsInitialized()) return false;
  }
  if (has_systemnavdownloaded()) {
    if (!this->systemnavdownloaded().IsInitialized()) return false;
  }
  if (has_gameassert()) {
    if (!this->gameassert().IsInitialized()) return false;
  }
  if (has_gamecrash()) {
    if (!this->gamecrash().IsInitialized()) return false;
  }
  if (has_gamemodeldata()) {
    if (!this->gamemodeldata().IsInitialized()) return false;
  }
  if (has_gameentitylist()) {
    if (!this->gameentitylist().IsInitialized()) return false;
  }
  if (has_gameweaponfired()) {
    if (!this->gameweaponfired().IsInitialized()) return false;
  }
  if (has_gamedeath()) {
    if (!this->gamedeath().IsInitialized()) return false;
  }
  if (has_gametookdamage()) {
    if (!this->gametookdamage().IsInitialized()) return false;
  }
  if (has_gamenavigationstuck()) {
    if (!this->gamenavigationstuck().IsInitialized()) return false;
  }
  if (has_topicsubscribe()) {
    if (!this->topicsubscribe().IsInitialized()) return false;
  }
  if (has_topicunsubscribe()) {
    if (!this->topicunsubscribe().IsInitialized()) return false;
  }
  return true;
}

void MessageUnion::Swap(MessageUnion* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(msg_, other->msg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageUnion_descriptor_;
  metadata.reflection = MessageUnion_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  cachelastvalue(kCachelastvalueFieldNumber, false);
const ::std::string cachekeysuffix_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  cachekeysuffix(kCachekeysuffixFieldNumber, cachekeysuffix_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace Analytics

// @@protoc_insertion_point(global_scope)
