// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytics.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "analytics.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Analytics {

namespace {

const ::google::protobuf::Descriptor* TopicSubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicUnsubscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicUnsubscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemNavNotFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemNavNotFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemNavAutoDownloaded_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemNavAutoDownloaded_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemAssert_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemAssert_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemCrash_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemCrash_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemModelData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemModelData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEntityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEntityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameEntityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameEntityList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameWeaponFired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameWeaponFired_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTookDamage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTookDamage_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameNavigationStuck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameNavigationStuck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageUnion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageUnion_reflection_ = NULL;
struct MessageUnionOneofInstance {
  const ::Analytics::SystemNavNotFound* systemnavnotfound_;
  const ::Analytics::SystemNavAutoDownloaded* systemnavdownloaded_;
  const ::Analytics::SystemAssert* systemassert_;
  const ::Analytics::SystemCrash* systemcrash_;
  const ::Analytics::SystemModelData* systemmodeldata_;
  const ::Analytics::GameEntityList* gameentitylist_;
  const ::Analytics::GameWeaponFired* gameweaponfired_;
  const ::Analytics::GameDeath* gamedeath_;
  const ::Analytics::GameTookDamage* gametookdamage_;
  const ::Analytics::GameNavigationStuck* gamenavigationstuck_;
  const ::Analytics::TopicSubscribe* topicsubscribe_;
  const ::Analytics::TopicUnsubscribe* topicunsubscribe_;
}* MessageUnion_default_oneof_instance_ = NULL;
const ::google::protobuf::EnumDescriptor* Compression_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_analytics_2eproto() {
  protobuf_AddDesc_analytics_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "analytics.proto");
  GOOGLE_CHECK(file != NULL);
  TopicSubscribe_descriptor_ = file->message_type(0);
  static const int TopicSubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscribe, topic_),
  };
  TopicSubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicSubscribe_descriptor_,
      TopicSubscribe::default_instance_,
      TopicSubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicSubscribe));
  TopicUnsubscribe_descriptor_ = file->message_type(1);
  static const int TopicUnsubscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicUnsubscribe, topic_),
  };
  TopicUnsubscribe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicUnsubscribe_descriptor_,
      TopicUnsubscribe::default_instance_,
      TopicUnsubscribe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicUnsubscribe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicUnsubscribe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicUnsubscribe));
  SystemNavNotFound_descriptor_ = file->message_type(2);
  static const int SystemNavNotFound_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNavNotFound, mapname_),
  };
  SystemNavNotFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemNavNotFound_descriptor_,
      SystemNavNotFound::default_instance_,
      SystemNavNotFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNavNotFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNavNotFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemNavNotFound));
  SystemNavAutoDownloaded_descriptor_ = file->message_type(3);
  static const int SystemNavAutoDownloaded_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNavAutoDownloaded, mapname_),
  };
  SystemNavAutoDownloaded_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemNavAutoDownloaded_descriptor_,
      SystemNavAutoDownloaded::default_instance_,
      SystemNavAutoDownloaded_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNavAutoDownloaded, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemNavAutoDownloaded, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemNavAutoDownloaded));
  SystemAssert_descriptor_ = file->message_type(4);
  static const int SystemAssert_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAssert, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAssert, file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAssert, line_),
  };
  SystemAssert_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemAssert_descriptor_,
      SystemAssert::default_instance_,
      SystemAssert_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAssert, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemAssert, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemAssert));
  SystemCrash_descriptor_ = file->message_type(5);
  static const int SystemCrash_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCrash, info_),
  };
  SystemCrash_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemCrash_descriptor_,
      SystemCrash::default_instance_,
      SystemCrash_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCrash, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemCrash, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemCrash));
  SystemModelData_descriptor_ = file->message_type(6);
  static const int SystemModelData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemModelData, compressiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemModelData, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemModelData, modelbytes_),
  };
  SystemModelData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemModelData_descriptor_,
      SystemModelData::default_instance_,
      SystemModelData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemModelData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemModelData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemModelData));
  GameEntityInfo_descriptor_ = file->message_type(7);
  static const int GameEntityInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, classid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, positionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, quantitymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, healthmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, armormax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo1max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo2max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo3max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, ammo4max_),
  };
  GameEntityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEntityInfo_descriptor_,
      GameEntityInfo::default_instance_,
      GameEntityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEntityInfo));
  GameEntityList_descriptor_ = file->message_type(8);
  static const int GameEntityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityList, entities_),
  };
  GameEntityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameEntityList_descriptor_,
      GameEntityList::default_instance_,
      GameEntityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameEntityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameEntityList));
  GameWeaponFired_descriptor_ = file->message_type(9);
  static const int GameWeaponFired_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, positionz_),
  };
  GameWeaponFired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameWeaponFired_descriptor_,
      GameWeaponFired::default_instance_,
      GameWeaponFired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameWeaponFired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameWeaponFired));
  GameDeath_descriptor_ = file->message_type(10);
  static const int GameDeath_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, killedbyclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, killedbyweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, killedbyhealth_),
  };
  GameDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameDeath_descriptor_,
      GameDeath::default_instance_,
      GameDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameDeath));
  GameTookDamage_descriptor_ = file->message_type(11);
  static const int GameTookDamage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, positionz_),
  };
  GameTookDamage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTookDamage_descriptor_,
      GameTookDamage::default_instance_,
      GameTookDamage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTookDamage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTookDamage));
  GameNavigationStuck_descriptor_ = file->message_type(12);
  static const int GameNavigationStuck_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, entityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, positionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, positiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, positionz_),
  };
  GameNavigationStuck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameNavigationStuck_descriptor_,
      GameNavigationStuck::default_instance_,
      GameNavigationStuck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameNavigationStuck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameNavigationStuck));
  MessageUnion_descriptor_ = file->message_type(13);
  static const int MessageUnion_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, timestamp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, systemnavnotfound_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, systemnavdownloaded_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, systemassert_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, systemcrash_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, systemmodeldata_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gameentitylist_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gameweaponfired_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamedeath_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gametookdamage_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, gamenavigationstuck_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, topicsubscribe_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MessageUnion_default_oneof_instance_, topicunsubscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, msg_),
  };
  MessageUnion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageUnion_descriptor_,
      MessageUnion::default_instance_,
      MessageUnion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, _unknown_fields_),
      -1,
      MessageUnion_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUnion, _oneof_case_[0]),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageUnion));
  Compression_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_analytics_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicSubscribe_descriptor_, &TopicSubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicUnsubscribe_descriptor_, &TopicUnsubscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemNavNotFound_descriptor_, &SystemNavNotFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemNavAutoDownloaded_descriptor_, &SystemNavAutoDownloaded::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemAssert_descriptor_, &SystemAssert::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemCrash_descriptor_, &SystemCrash::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemModelData_descriptor_, &SystemModelData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEntityInfo_descriptor_, &GameEntityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameEntityList_descriptor_, &GameEntityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameWeaponFired_descriptor_, &GameWeaponFired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameDeath_descriptor_, &GameDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTookDamage_descriptor_, &GameTookDamage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameNavigationStuck_descriptor_, &GameNavigationStuck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageUnion_descriptor_, &MessageUnion::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_analytics_2eproto() {
  delete TopicSubscribe::default_instance_;
  delete TopicSubscribe_reflection_;
  delete TopicUnsubscribe::default_instance_;
  delete TopicUnsubscribe_reflection_;
  delete SystemNavNotFound::default_instance_;
  delete SystemNavNotFound_reflection_;
  delete SystemNavAutoDownloaded::default_instance_;
  delete SystemNavAutoDownloaded_reflection_;
  delete SystemAssert::default_instance_;
  delete SystemAssert_reflection_;
  delete SystemCrash::default_instance_;
  delete SystemCrash_reflection_;
  delete SystemModelData::default_instance_;
  delete SystemModelData_reflection_;
  delete GameEntityInfo::default_instance_;
  delete GameEntityInfo_reflection_;
  delete GameEntityList::default_instance_;
  delete GameEntityList_reflection_;
  delete GameWeaponFired::default_instance_;
  delete GameWeaponFired_reflection_;
  delete GameDeath::default_instance_;
  delete GameDeath_reflection_;
  delete GameTookDamage::default_instance_;
  delete GameTookDamage_reflection_;
  delete GameNavigationStuck::default_instance_;
  delete GameNavigationStuck_reflection_;
  delete MessageUnion::default_instance_;
  delete MessageUnion_default_oneof_instance_;
  delete MessageUnion_reflection_;
}

void protobuf_AddDesc_analytics_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017analytics.proto\022\tAnalytics\032 google/pro"
    "tobuf/descriptor.proto\"\037\n\016TopicSubscribe"
    "\022\r\n\005topic\030\001 \002(\t\"!\n\020TopicUnsubscribe\022\r\n\005t"
    "opic\030\001 \002(\t\"$\n\021SystemNavNotFound\022\017\n\007mapNa"
    "me\030\001 \002(\t\"*\n\027SystemNavAutoDownloaded\022\017\n\007m"
    "apName\030\001 \002(\t\"=\n\014SystemAssert\022\021\n\tconditio"
    "n\030\001 \002(\t\022\014\n\004file\030\002 \001(\t\022\014\n\004line\030\003 \001(\005\"\033\n\013S"
    "ystemCrash\022\014\n\004info\030\001 \002(\t\"\216\001\n\017SystemModel"
    "Data\022A\n\017compressionType\030\001 \001(\0162\026.Analytic"
    "s.Compression:\020Compression_None\022\021\n\tmodel"
    "Name\030\002 \002(\t\022\022\n\nmodelBytes\030\003 \002(\014:\021\300\270\002\001\312\270\002\t"
    "modelName\"\232\003\n\016GameEntityInfo\022\020\n\010entityId"
    "\030\001 \002(\005\022\017\n\007groupId\030\002 \002(\005\022\017\n\007classId\030\003 \002(\005"
    "\022\021\n\tpositionX\030\004 \002(\002\022\021\n\tpositionY\030\005 \002(\002\022\021"
    "\n\tpositionZ\030\006 \002(\002\022\017\n\007heading\030\007 \002(\002\022\r\n\005pi"
    "tch\030\010 \002(\002\022\014\n\004roll\030\t \002(\002\022\020\n\010quantity\030\n \001("
    "\r\022\023\n\013quantityMax\030\013 \001(\r\022\016\n\006health\030\014 \001(\r\022\021"
    "\n\thealthMax\030\r \001(\r\022\r\n\005armor\030\016 \001(\r\022\020\n\010armo"
    "rMax\030\017 \001(\r\022\r\n\005ammo1\030\020 \001(\r\022\020\n\010ammo1Max\030\021 "
    "\001(\r\022\r\n\005ammo2\030\022 \001(\r\022\020\n\010ammo2Max\030\023 \001(\r\022\r\n\005"
    "ammo3\030\024 \001(\r\022\020\n\010ammo3Max\030\025 \001(\r\022\r\n\005ammo4\030\026"
    " \001(\r\022\020\n\010ammo4Max\030\027 \001(\r\"C\n\016GameEntityList"
    "\022+\n\010entities\030\001 \003(\0132\031.Analytics.GameEntit"
    "yInfo:\004\300\270\002\001\"\\\n\017GameWeaponFired\022\020\n\010weapon"
    "Id\030\001 \002(\005\022\021\n\tpositionX\030\002 \002(\002\022\021\n\tpositionY"
    "\030\003 \002(\002\022\021\n\tpositionZ\030\004 \002(\002\"R\n\tGameDeath\022\025"
    "\n\rkilledByClass\030\001 \002(\005\022\026\n\016killedByWeapon\030"
    "\002 \002(\005\022\026\n\016killedByHealth\030\003 \002(\005\"[\n\016GameToo"
    "kDamage\022\020\n\010weaponId\030\001 \002(\005\022\021\n\tpositionX\030\002"
    " \002(\002\022\021\n\tpositionY\030\003 \002(\002\022\021\n\tpositionZ\030\004 \002"
    "(\002\"`\n\023GameNavigationStuck\022\020\n\010entityId\030\001 "
    "\002(\005\022\021\n\tpositionX\030\002 \002(\002\022\021\n\tpositionY\030\003 \002("
    "\002\022\021\n\tpositionZ\030\004 \002(\002\"\270\005\n\014MessageUnion\022\021\n"
    "\ttimestamp\030\001 \002(\003\0229\n\021systemNavNotFound\030\002 "
    "\001(\0132\034.Analytics.SystemNavNotFoundH\000\022A\n\023s"
    "ystemNavDownloaded\030\003 \001(\0132\".Analytics.Sys"
    "temNavAutoDownloadedH\000\022/\n\014systemAssert\030\004"
    " \001(\0132\027.Analytics.SystemAssertH\000\022-\n\013syste"
    "mCrash\030\005 \001(\0132\026.Analytics.SystemCrashH\000\0225"
    "\n\017systemModelData\030\006 \001(\0132\032.Analytics.Syst"
    "emModelDataH\000\0223\n\016gameEntityList\030d \001(\0132\031."
    "Analytics.GameEntityListH\000\0225\n\017gameWeapon"
    "Fired\030e \001(\0132\032.Analytics.GameWeaponFiredH"
    "\000\022)\n\tgameDeath\030f \001(\0132\024.Analytics.GameDea"
    "thH\000\0223\n\016gameTookDamage\030g \001(\0132\031.Analytics"
    ".GameTookDamageH\000\022=\n\023gameNavigationStuck"
    "\030h \001(\0132\036.Analytics.GameNavigationStuckH\000"
    "\0224\n\016topicSubscribe\030\350\007 \001(\0132\031.Analytics.To"
    "picSubscribeH\000\0228\n\020topicUnsubscribe\030\351\007 \001("
    "\0132\033.Analytics.TopicUnsubscribeH\000B\005\n\003msg*"
    ";\n\013Compression\022\024\n\020Compression_None\020\000\022\026\n\022"
    "Compression_FastLZ\020\001:8\n\016cachelastvalue\022\037"
    ".google.protobuf.MessageOptions\030\210\' \001(\010:8"
    "\n\016cachekeysuffix\022\037.google.protobuf.Messa"
    "geOptions\030\211\' \001(\t", 2176);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "analytics.proto", &protobuf_RegisterTypes);
  TopicSubscribe::default_instance_ = new TopicSubscribe();
  TopicUnsubscribe::default_instance_ = new TopicUnsubscribe();
  SystemNavNotFound::default_instance_ = new SystemNavNotFound();
  SystemNavAutoDownloaded::default_instance_ = new SystemNavAutoDownloaded();
  SystemAssert::default_instance_ = new SystemAssert();
  SystemCrash::default_instance_ = new SystemCrash();
  SystemModelData::default_instance_ = new SystemModelData();
  GameEntityInfo::default_instance_ = new GameEntityInfo();
  GameEntityList::default_instance_ = new GameEntityList();
  GameWeaponFired::default_instance_ = new GameWeaponFired();
  GameDeath::default_instance_ = new GameDeath();
  GameTookDamage::default_instance_ = new GameTookDamage();
  GameNavigationStuck::default_instance_ = new GameNavigationStuck();
  MessageUnion::default_instance_ = new MessageUnion();
  MessageUnion_default_oneof_instance_ = new MessageUnionOneofInstance;
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    5000, 8, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MessageOptions::default_instance(),
    5001, 9, false, false);
  TopicSubscribe::default_instance_->InitAsDefaultInstance();
  TopicUnsubscribe::default_instance_->InitAsDefaultInstance();
  SystemNavNotFound::default_instance_->InitAsDefaultInstance();
  SystemNavAutoDownloaded::default_instance_->InitAsDefaultInstance();
  SystemAssert::default_instance_->InitAsDefaultInstance();
  SystemCrash::default_instance_->InitAsDefaultInstance();
  SystemModelData::default_instance_->InitAsDefaultInstance();
  GameEntityInfo::default_instance_->InitAsDefaultInstance();
  GameEntityList::default_instance_->InitAsDefaultInstance();
  GameWeaponFired::default_instance_->InitAsDefaultInstance();
  GameDeath::default_instance_->InitAsDefaultInstance();
  GameTookDamage::default_instance_->InitAsDefaultInstance();
  GameNavigationStuck::default_instance_->InitAsDefaultInstance();
  MessageUnion::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_analytics_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_analytics_2eproto {
  StaticDescriptorInitializer_analytics_2eproto() {
    protobuf_AddDesc_analytics_2eproto();
  }
} static_descriptor_initializer_analytics_2eproto_;
const ::google::protobuf::EnumDescriptor* Compression_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Compression_descriptor_;
}
bool Compression_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TopicSubscribe::kTopicFieldNumber;
#endif  // !_MSC_VER

TopicSubscribe::TopicSubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.TopicSubscribe)
}

void TopicSubscribe::InitAsDefaultInstance() {
}

TopicSubscribe::TopicSubscribe(const TopicSubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.TopicSubscribe)
}

void TopicSubscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicSubscribe::~TopicSubscribe() {
  // @@protoc_insertion_point(destructor:Analytics.TopicSubscribe)
  SharedDtor();
}

void TopicSubscribe::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void TopicSubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSubscribe_descriptor_;
}

const TopicSubscribe& TopicSubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

TopicSubscribe* TopicSubscribe::default_instance_ = NULL;

TopicSubscribe* TopicSubscribe::New() const {
  return new TopicSubscribe;
}

void TopicSubscribe::Clear() {
  if (has_topic()) {
    if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      topic_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicSubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.TopicSubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.TopicSubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.TopicSubscribe)
  return false;
#undef DO_
}

void TopicSubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.TopicSubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.TopicSubscribe)
}

::google::protobuf::uint8* TopicSubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.TopicSubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.TopicSubscribe)
  return target;
}

int TopicSubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicSubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicSubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicSubscribe::MergeFrom(const TopicSubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicSubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSubscribe::CopyFrom(const TopicSubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TopicSubscribe::Swap(TopicSubscribe* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicSubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSubscribe_descriptor_;
  metadata.reflection = TopicSubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TopicUnsubscribe::kTopicFieldNumber;
#endif  // !_MSC_VER

TopicUnsubscribe::TopicUnsubscribe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.TopicUnsubscribe)
}

void TopicUnsubscribe::InitAsDefaultInstance() {
}

TopicUnsubscribe::TopicUnsubscribe(const TopicUnsubscribe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.TopicUnsubscribe)
}

void TopicUnsubscribe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicUnsubscribe::~TopicUnsubscribe() {
  // @@protoc_insertion_point(destructor:Analytics.TopicUnsubscribe)
  SharedDtor();
}

void TopicUnsubscribe::SharedDtor() {
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (this != default_instance_) {
  }
}

void TopicUnsubscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicUnsubscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicUnsubscribe_descriptor_;
}

const TopicUnsubscribe& TopicUnsubscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

TopicUnsubscribe* TopicUnsubscribe::default_instance_ = NULL;

TopicUnsubscribe* TopicUnsubscribe::New() const {
  return new TopicUnsubscribe;
}

void TopicUnsubscribe::Clear() {
  if (has_topic()) {
    if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      topic_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicUnsubscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.TopicUnsubscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.TopicUnsubscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.TopicUnsubscribe)
  return false;
#undef DO_
}

void TopicUnsubscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.TopicUnsubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.TopicUnsubscribe)
}

::google::protobuf::uint8* TopicUnsubscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.TopicUnsubscribe)
  // required string topic = 1;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.TopicUnsubscribe)
  return target;
}

int TopicUnsubscribe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string topic = 1;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicUnsubscribe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicUnsubscribe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicUnsubscribe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicUnsubscribe::MergeFrom(const TopicUnsubscribe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicUnsubscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicUnsubscribe::CopyFrom(const TopicUnsubscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicUnsubscribe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TopicUnsubscribe::Swap(TopicUnsubscribe* other) {
  if (other != this) {
    std::swap(topic_, other->topic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicUnsubscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicUnsubscribe_descriptor_;
  metadata.reflection = TopicUnsubscribe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemNavNotFound::kMapNameFieldNumber;
#endif  // !_MSC_VER

SystemNavNotFound::SystemNavNotFound()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.SystemNavNotFound)
}

void SystemNavNotFound::InitAsDefaultInstance() {
}

SystemNavNotFound::SystemNavNotFound(const SystemNavNotFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.SystemNavNotFound)
}

void SystemNavNotFound::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemNavNotFound::~SystemNavNotFound() {
  // @@protoc_insertion_point(destructor:Analytics.SystemNavNotFound)
  SharedDtor();
}

void SystemNavNotFound::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void SystemNavNotFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemNavNotFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemNavNotFound_descriptor_;
}

const SystemNavNotFound& SystemNavNotFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

SystemNavNotFound* SystemNavNotFound::default_instance_ = NULL;

SystemNavNotFound* SystemNavNotFound::New() const {
  return new SystemNavNotFound;
}

void SystemNavNotFound::Clear() {
  if (has_mapname()) {
    if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemNavNotFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.SystemNavNotFound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.SystemNavNotFound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.SystemNavNotFound)
  return false;
#undef DO_
}

void SystemNavNotFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.SystemNavNotFound)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.SystemNavNotFound)
}

::google::protobuf::uint8* SystemNavNotFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.SystemNavNotFound)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.SystemNavNotFound)
  return target;
}

int SystemNavNotFound::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapName = 1;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemNavNotFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemNavNotFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemNavNotFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemNavNotFound::MergeFrom(const SystemNavNotFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemNavNotFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemNavNotFound::CopyFrom(const SystemNavNotFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNavNotFound::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemNavNotFound::Swap(SystemNavNotFound* other) {
  if (other != this) {
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemNavNotFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemNavNotFound_descriptor_;
  metadata.reflection = SystemNavNotFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemNavAutoDownloaded::kMapNameFieldNumber;
#endif  // !_MSC_VER

SystemNavAutoDownloaded::SystemNavAutoDownloaded()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.SystemNavAutoDownloaded)
}

void SystemNavAutoDownloaded::InitAsDefaultInstance() {
}

SystemNavAutoDownloaded::SystemNavAutoDownloaded(const SystemNavAutoDownloaded& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.SystemNavAutoDownloaded)
}

void SystemNavAutoDownloaded::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemNavAutoDownloaded::~SystemNavAutoDownloaded() {
  // @@protoc_insertion_point(destructor:Analytics.SystemNavAutoDownloaded)
  SharedDtor();
}

void SystemNavAutoDownloaded::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void SystemNavAutoDownloaded::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemNavAutoDownloaded::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemNavAutoDownloaded_descriptor_;
}

const SystemNavAutoDownloaded& SystemNavAutoDownloaded::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

SystemNavAutoDownloaded* SystemNavAutoDownloaded::default_instance_ = NULL;

SystemNavAutoDownloaded* SystemNavAutoDownloaded::New() const {
  return new SystemNavAutoDownloaded;
}

void SystemNavAutoDownloaded::Clear() {
  if (has_mapname()) {
    if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      mapname_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemNavAutoDownloaded::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.SystemNavAutoDownloaded)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mapName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.SystemNavAutoDownloaded)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.SystemNavAutoDownloaded)
  return false;
#undef DO_
}

void SystemNavAutoDownloaded::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.SystemNavAutoDownloaded)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mapname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.SystemNavAutoDownloaded)
}

::google::protobuf::uint8* SystemNavAutoDownloaded::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.SystemNavAutoDownloaded)
  // required string mapName = 1;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mapname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.SystemNavAutoDownloaded)
  return target;
}

int SystemNavAutoDownloaded::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mapName = 1;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemNavAutoDownloaded::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemNavAutoDownloaded* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemNavAutoDownloaded*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemNavAutoDownloaded::MergeFrom(const SystemNavAutoDownloaded& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemNavAutoDownloaded::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemNavAutoDownloaded::CopyFrom(const SystemNavAutoDownloaded& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemNavAutoDownloaded::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemNavAutoDownloaded::Swap(SystemNavAutoDownloaded* other) {
  if (other != this) {
    std::swap(mapname_, other->mapname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemNavAutoDownloaded::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemNavAutoDownloaded_descriptor_;
  metadata.reflection = SystemNavAutoDownloaded_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemAssert::kConditionFieldNumber;
const int SystemAssert::kFileFieldNumber;
const int SystemAssert::kLineFieldNumber;
#endif  // !_MSC_VER

SystemAssert::SystemAssert()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.SystemAssert)
}

void SystemAssert::InitAsDefaultInstance() {
}

SystemAssert::SystemAssert(const SystemAssert& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.SystemAssert)
}

void SystemAssert::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemAssert::~SystemAssert() {
  // @@protoc_insertion_point(destructor:Analytics.SystemAssert)
  SharedDtor();
}

void SystemAssert::SharedDtor() {
  if (condition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete condition_;
  }
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (this != default_instance_) {
  }
}

void SystemAssert::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemAssert::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemAssert_descriptor_;
}

const SystemAssert& SystemAssert::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

SystemAssert* SystemAssert::default_instance_ = NULL;

SystemAssert* SystemAssert::New() const {
  return new SystemAssert;
}

void SystemAssert::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        condition_->clear();
      }
    }
    if (has_file()) {
      if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        file_->clear();
      }
    }
    line_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemAssert::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.SystemAssert)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string condition = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "condition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_file;
        break;
      }

      // optional string file = 2;
      case 2: {
        if (tag == 18) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), this->file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line;
        break;
      }

      // optional int32 line = 3;
      case 3: {
        if (tag == 24) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.SystemAssert)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.SystemAssert)
  return false;
#undef DO_
}

void SystemAssert::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.SystemAssert)
  // required string condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "condition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->condition(), output);
  }

  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  // optional int32 line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.SystemAssert)
}

::google::protobuf::uint8* SystemAssert::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.SystemAssert)
  // required string condition = 1;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "condition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->condition(), target);
  }

  // optional string file = 2;
  if (has_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), this->file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  // optional int32 line = 3;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.SystemAssert)
  return target;
}

int SystemAssert::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string condition = 1;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional string file = 2;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional int32 line = 3;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemAssert::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemAssert* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemAssert*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemAssert::MergeFrom(const SystemAssert& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_file()) {
      set_file(from.file());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemAssert::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemAssert::CopyFrom(const SystemAssert& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemAssert::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemAssert::Swap(SystemAssert* other) {
  if (other != this) {
    std::swap(condition_, other->condition_);
    std::swap(file_, other->file_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemAssert::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemAssert_descriptor_;
  metadata.reflection = SystemAssert_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemCrash::kInfoFieldNumber;
#endif  // !_MSC_VER

SystemCrash::SystemCrash()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.SystemCrash)
}

void SystemCrash::InitAsDefaultInstance() {
}

SystemCrash::SystemCrash(const SystemCrash& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.SystemCrash)
}

void SystemCrash::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemCrash::~SystemCrash() {
  // @@protoc_insertion_point(destructor:Analytics.SystemCrash)
  SharedDtor();
}

void SystemCrash::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void SystemCrash::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemCrash::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemCrash_descriptor_;
}

const SystemCrash& SystemCrash::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

SystemCrash* SystemCrash::default_instance_ = NULL;

SystemCrash* SystemCrash::New() const {
  return new SystemCrash;
}

void SystemCrash::Clear() {
  if (has_info()) {
    if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      info_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemCrash::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.SystemCrash)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.SystemCrash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.SystemCrash)
  return false;
#undef DO_
}

void SystemCrash::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.SystemCrash)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.SystemCrash)
}

::google::protobuf::uint8* SystemCrash::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.SystemCrash)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.SystemCrash)
  return target;
}

int SystemCrash::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemCrash::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemCrash* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemCrash*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemCrash::MergeFrom(const SystemCrash& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemCrash::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemCrash::CopyFrom(const SystemCrash& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemCrash::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SystemCrash::Swap(SystemCrash* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemCrash::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemCrash_descriptor_;
  metadata.reflection = SystemCrash_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemModelData::kCompressionTypeFieldNumber;
const int SystemModelData::kModelNameFieldNumber;
const int SystemModelData::kModelBytesFieldNumber;
#endif  // !_MSC_VER

SystemModelData::SystemModelData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.SystemModelData)
}

void SystemModelData::InitAsDefaultInstance() {
}

SystemModelData::SystemModelData(const SystemModelData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.SystemModelData)
}

void SystemModelData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  compressiontype_ = 0;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  modelbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemModelData::~SystemModelData() {
  // @@protoc_insertion_point(destructor:Analytics.SystemModelData)
  SharedDtor();
}

void SystemModelData::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelname_;
  }
  if (modelbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelbytes_;
  }
  if (this != default_instance_) {
  }
}

void SystemModelData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemModelData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemModelData_descriptor_;
}

const SystemModelData& SystemModelData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

SystemModelData* SystemModelData::default_instance_ = NULL;

SystemModelData* SystemModelData::New() const {
  return new SystemModelData;
}

void SystemModelData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    compressiontype_ = 0;
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelname_->clear();
      }
    }
    if (has_modelbytes()) {
      if (modelbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelbytes_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemModelData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.SystemModelData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Analytics::Compression_IsValid(value)) {
            set_compressiontype(static_cast< ::Analytics::Compression >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modelName;
        break;
      }

      // required string modelName = 2;
      case 2: {
        if (tag == 18) {
         parse_modelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_modelBytes;
        break;
      }

      // required bytes modelBytes = 3;
      case 3: {
        if (tag == 26) {
         parse_modelBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_modelbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.SystemModelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.SystemModelData)
  return false;
#undef DO_
}

void SystemModelData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.SystemModelData)
  // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
  if (has_compressiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->compressiontype(), output);
  }

  // required string modelName = 2;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modelname(), output);
  }

  // required bytes modelBytes = 3;
  if (has_modelbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->modelbytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.SystemModelData)
}

::google::protobuf::uint8* SystemModelData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.SystemModelData)
  // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
  if (has_compressiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->compressiontype(), target);
  }

  // required string modelName = 2;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modelname(), target);
  }

  // required bytes modelBytes = 3;
  if (has_modelbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->modelbytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.SystemModelData)
  return target;
}

int SystemModelData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Analytics.Compression compressionType = 1 [default = Compression_None];
    if (has_compressiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->compressiontype());
    }

    // required string modelName = 2;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

    // required bytes modelBytes = 3;
    if (has_modelbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->modelbytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemModelData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemModelData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemModelData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemModelData::MergeFrom(const SystemModelData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_compressiontype()) {
      set_compressiontype(from.compressiontype());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_modelbytes()) {
      set_modelbytes(from.modelbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemModelData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemModelData::CopyFrom(const SystemModelData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemModelData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  return true;
}

void SystemModelData::Swap(SystemModelData* other) {
  if (other != this) {
    std::swap(compressiontype_, other->compressiontype_);
    std::swap(modelname_, other->modelname_);
    std::swap(modelbytes_, other->modelbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemModelData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemModelData_descriptor_;
  metadata.reflection = SystemModelData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEntityInfo::kEntityIdFieldNumber;
const int GameEntityInfo::kGroupIdFieldNumber;
const int GameEntityInfo::kClassIdFieldNumber;
const int GameEntityInfo::kPositionXFieldNumber;
const int GameEntityInfo::kPositionYFieldNumber;
const int GameEntityInfo::kPositionZFieldNumber;
const int GameEntityInfo::kHeadingFieldNumber;
const int GameEntityInfo::kPitchFieldNumber;
const int GameEntityInfo::kRollFieldNumber;
const int GameEntityInfo::kQuantityFieldNumber;
const int GameEntityInfo::kQuantityMaxFieldNumber;
const int GameEntityInfo::kHealthFieldNumber;
const int GameEntityInfo::kHealthMaxFieldNumber;
const int GameEntityInfo::kArmorFieldNumber;
const int GameEntityInfo::kArmorMaxFieldNumber;
const int GameEntityInfo::kAmmo1FieldNumber;
const int GameEntityInfo::kAmmo1MaxFieldNumber;
const int GameEntityInfo::kAmmo2FieldNumber;
const int GameEntityInfo::kAmmo2MaxFieldNumber;
const int GameEntityInfo::kAmmo3FieldNumber;
const int GameEntityInfo::kAmmo3MaxFieldNumber;
const int GameEntityInfo::kAmmo4FieldNumber;
const int GameEntityInfo::kAmmo4MaxFieldNumber;
#endif  // !_MSC_VER

GameEntityInfo::GameEntityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameEntityInfo)
}

void GameEntityInfo::InitAsDefaultInstance() {
}

GameEntityInfo::GameEntityInfo(const GameEntityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameEntityInfo)
}

void GameEntityInfo::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0;
  groupid_ = 0;
  classid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  heading_ = 0;
  pitch_ = 0;
  roll_ = 0;
  quantity_ = 0u;
  quantitymax_ = 0u;
  health_ = 0u;
  healthmax_ = 0u;
  armor_ = 0u;
  armormax_ = 0u;
  ammo1_ = 0u;
  ammo1max_ = 0u;
  ammo2_ = 0u;
  ammo2max_ = 0u;
  ammo3_ = 0u;
  ammo3max_ = 0u;
  ammo4_ = 0u;
  ammo4max_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEntityInfo::~GameEntityInfo() {
  // @@protoc_insertion_point(destructor:Analytics.GameEntityInfo)
  SharedDtor();
}

void GameEntityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEntityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEntityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEntityInfo_descriptor_;
}

const GameEntityInfo& GameEntityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameEntityInfo* GameEntityInfo::default_instance_ = NULL;

GameEntityInfo* GameEntityInfo::New() const {
  return new GameEntityInfo;
}

void GameEntityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameEntityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(entityid_, pitch_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(roll_, ammo1_);
  }
  if (_has_bits_[16 / 32] & 8323072) {
    ZR_(ammo1max_, ammo4max_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEntityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameEntityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_groupId;
        break;
      }

      // required int32 groupId = 2;
      case 2: {
        if (tag == 16) {
         parse_groupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_classId;
        break;
      }

      // required int32 classId = 3;
      case 3: {
        if (tag == 24) {
         parse_classId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &classid_)));
          set_has_classid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionX;
        break;
      }

      // required float positionX = 4;
      case 4: {
        if (tag == 37) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_positionY;
        break;
      }

      // required float positionY = 5;
      case 5: {
        if (tag == 45) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_positionZ;
        break;
      }

      // required float positionZ = 6;
      case 6: {
        if (tag == 53) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_heading;
        break;
      }

      // required float heading = 7;
      case 7: {
        if (tag == 61) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_pitch;
        break;
      }

      // required float pitch = 8;
      case 8: {
        if (tag == 69) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_roll;
        break;
      }

      // required float roll = 9;
      case 9: {
        if (tag == 77) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 10;
      case 10: {
        if (tag == 80) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_quantityMax;
        break;
      }

      // optional uint32 quantityMax = 11;
      case 11: {
        if (tag == 88) {
         parse_quantityMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantitymax_)));
          set_has_quantitymax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_health;
        break;
      }

      // optional uint32 health = 12;
      case 12: {
        if (tag == 96) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_healthMax;
        break;
      }

      // optional uint32 healthMax = 13;
      case 13: {
        if (tag == 104) {
         parse_healthMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &healthmax_)));
          set_has_healthmax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_armor;
        break;
      }

      // optional uint32 armor = 14;
      case 14: {
        if (tag == 112) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_armorMax;
        break;
      }

      // optional uint32 armorMax = 15;
      case 15: {
        if (tag == 120) {
         parse_armorMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armormax_)));
          set_has_armormax();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_ammo1;
        break;
      }

      // optional uint32 ammo1 = 16;
      case 16: {
        if (tag == 128) {
         parse_ammo1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo1_)));
          set_has_ammo1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ammo1Max;
        break;
      }

      // optional uint32 ammo1Max = 17;
      case 17: {
        if (tag == 136) {
         parse_ammo1Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo1max_)));
          set_has_ammo1max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_ammo2;
        break;
      }

      // optional uint32 ammo2 = 18;
      case 18: {
        if (tag == 144) {
         parse_ammo2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo2_)));
          set_has_ammo2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_ammo2Max;
        break;
      }

      // optional uint32 ammo2Max = 19;
      case 19: {
        if (tag == 152) {
         parse_ammo2Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo2max_)));
          set_has_ammo2max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_ammo3;
        break;
      }

      // optional uint32 ammo3 = 20;
      case 20: {
        if (tag == 160) {
         parse_ammo3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo3_)));
          set_has_ammo3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_ammo3Max;
        break;
      }

      // optional uint32 ammo3Max = 21;
      case 21: {
        if (tag == 168) {
         parse_ammo3Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo3max_)));
          set_has_ammo3max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_ammo4;
        break;
      }

      // optional uint32 ammo4 = 22;
      case 22: {
        if (tag == 176) {
         parse_ammo4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo4_)));
          set_has_ammo4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_ammo4Max;
        break;
      }

      // optional uint32 ammo4Max = 23;
      case 23: {
        if (tag == 184) {
         parse_ammo4Max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo4max_)));
          set_has_ammo4max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameEntityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameEntityInfo)
  return false;
#undef DO_
}

void GameEntityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameEntityInfo)
  // required int32 entityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  // required int32 groupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }

  // required int32 classId = 3;
  if (has_classid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->classid(), output);
  }

  // required float positionX = 4;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionx(), output);
  }

  // required float positionY = 5;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->positiony(), output);
  }

  // required float positionZ = 6;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->positionz(), output);
  }

  // required float heading = 7;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->heading(), output);
  }

  // required float pitch = 8;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pitch(), output);
  }

  // required float roll = 9;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->roll(), output);
  }

  // optional uint32 quantity = 10;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->quantity(), output);
  }

  // optional uint32 quantityMax = 11;
  if (has_quantitymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->quantitymax(), output);
  }

  // optional uint32 health = 12;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->health(), output);
  }

  // optional uint32 healthMax = 13;
  if (has_healthmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->healthmax(), output);
  }

  // optional uint32 armor = 14;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->armor(), output);
  }

  // optional uint32 armorMax = 15;
  if (has_armormax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->armormax(), output);
  }

  // optional uint32 ammo1 = 16;
  if (has_ammo1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->ammo1(), output);
  }

  // optional uint32 ammo1Max = 17;
  if (has_ammo1max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->ammo1max(), output);
  }

  // optional uint32 ammo2 = 18;
  if (has_ammo2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->ammo2(), output);
  }

  // optional uint32 ammo2Max = 19;
  if (has_ammo2max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->ammo2max(), output);
  }

  // optional uint32 ammo3 = 20;
  if (has_ammo3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->ammo3(), output);
  }

  // optional uint32 ammo3Max = 21;
  if (has_ammo3max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->ammo3max(), output);
  }

  // optional uint32 ammo4 = 22;
  if (has_ammo4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->ammo4(), output);
  }

  // optional uint32 ammo4Max = 23;
  if (has_ammo4max()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->ammo4max(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameEntityInfo)
}

::google::protobuf::uint8* GameEntityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameEntityInfo)
  // required int32 entityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  // required int32 groupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }

  // required int32 classId = 3;
  if (has_classid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->classid(), target);
  }

  // required float positionX = 4;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionx(), target);
  }

  // required float positionY = 5;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->positiony(), target);
  }

  // required float positionZ = 6;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->positionz(), target);
  }

  // required float heading = 7;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->heading(), target);
  }

  // required float pitch = 8;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pitch(), target);
  }

  // required float roll = 9;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->roll(), target);
  }

  // optional uint32 quantity = 10;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->quantity(), target);
  }

  // optional uint32 quantityMax = 11;
  if (has_quantitymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->quantitymax(), target);
  }

  // optional uint32 health = 12;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->health(), target);
  }

  // optional uint32 healthMax = 13;
  if (has_healthmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->healthmax(), target);
  }

  // optional uint32 armor = 14;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->armor(), target);
  }

  // optional uint32 armorMax = 15;
  if (has_armormax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->armormax(), target);
  }

  // optional uint32 ammo1 = 16;
  if (has_ammo1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->ammo1(), target);
  }

  // optional uint32 ammo1Max = 17;
  if (has_ammo1max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->ammo1max(), target);
  }

  // optional uint32 ammo2 = 18;
  if (has_ammo2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->ammo2(), target);
  }

  // optional uint32 ammo2Max = 19;
  if (has_ammo2max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->ammo2max(), target);
  }

  // optional uint32 ammo3 = 20;
  if (has_ammo3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->ammo3(), target);
  }

  // optional uint32 ammo3Max = 21;
  if (has_ammo3max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->ammo3max(), target);
  }

  // optional uint32 ammo4 = 22;
  if (has_ammo4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->ammo4(), target);
  }

  // optional uint32 ammo4Max = 23;
  if (has_ammo4max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->ammo4max(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameEntityInfo)
  return target;
}

int GameEntityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

    // required int32 groupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

    // required int32 classId = 3;
    if (has_classid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->classid());
    }

    // required float positionX = 4;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // required float positionY = 5;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // required float positionZ = 6;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

    // required float heading = 7;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // required float pitch = 8;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float roll = 9;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional uint32 quantity = 10;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint32 quantityMax = 11;
    if (has_quantitymax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantitymax());
    }

    // optional uint32 health = 12;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->health());
    }

    // optional uint32 healthMax = 13;
    if (has_healthmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->healthmax());
    }

    // optional uint32 armor = 14;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armor());
    }

    // optional uint32 armorMax = 15;
    if (has_armormax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armormax());
    }

    // optional uint32 ammo1 = 16;
    if (has_ammo1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo1());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 ammo1Max = 17;
    if (has_ammo1max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo1max());
    }

    // optional uint32 ammo2 = 18;
    if (has_ammo2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo2());
    }

    // optional uint32 ammo2Max = 19;
    if (has_ammo2max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo2max());
    }

    // optional uint32 ammo3 = 20;
    if (has_ammo3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo3());
    }

    // optional uint32 ammo3Max = 21;
    if (has_ammo3max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo3max());
    }

    // optional uint32 ammo4 = 22;
    if (has_ammo4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo4());
    }

    // optional uint32 ammo4Max = 23;
    if (has_ammo4max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ammo4max());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEntityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEntityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEntityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEntityInfo::MergeFrom(const GameEntityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_classid()) {
      set_classid(from.classid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_quantitymax()) {
      set_quantitymax(from.quantitymax());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_healthmax()) {
      set_healthmax(from.healthmax());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_armormax()) {
      set_armormax(from.armormax());
    }
    if (from.has_ammo1()) {
      set_ammo1(from.ammo1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ammo1max()) {
      set_ammo1max(from.ammo1max());
    }
    if (from.has_ammo2()) {
      set_ammo2(from.ammo2());
    }
    if (from.has_ammo2max()) {
      set_ammo2max(from.ammo2max());
    }
    if (from.has_ammo3()) {
      set_ammo3(from.ammo3());
    }
    if (from.has_ammo3max()) {
      set_ammo3max(from.ammo3max());
    }
    if (from.has_ammo4()) {
      set_ammo4(from.ammo4());
    }
    if (from.has_ammo4max()) {
      set_ammo4max(from.ammo4max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEntityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEntityInfo::CopyFrom(const GameEntityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEntityInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void GameEntityInfo::Swap(GameEntityInfo* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(groupid_, other->groupid_);
    std::swap(classid_, other->classid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(heading_, other->heading_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(quantity_, other->quantity_);
    std::swap(quantitymax_, other->quantitymax_);
    std::swap(health_, other->health_);
    std::swap(healthmax_, other->healthmax_);
    std::swap(armor_, other->armor_);
    std::swap(armormax_, other->armormax_);
    std::swap(ammo1_, other->ammo1_);
    std::swap(ammo1max_, other->ammo1max_);
    std::swap(ammo2_, other->ammo2_);
    std::swap(ammo2max_, other->ammo2max_);
    std::swap(ammo3_, other->ammo3_);
    std::swap(ammo3max_, other->ammo3max_);
    std::swap(ammo4_, other->ammo4_);
    std::swap(ammo4max_, other->ammo4max_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEntityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEntityInfo_descriptor_;
  metadata.reflection = GameEntityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameEntityList::kEntitiesFieldNumber;
#endif  // !_MSC_VER

GameEntityList::GameEntityList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameEntityList)
}

void GameEntityList::InitAsDefaultInstance() {
}

GameEntityList::GameEntityList(const GameEntityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameEntityList)
}

void GameEntityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameEntityList::~GameEntityList() {
  // @@protoc_insertion_point(destructor:Analytics.GameEntityList)
  SharedDtor();
}

void GameEntityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameEntityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameEntityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameEntityList_descriptor_;
}

const GameEntityList& GameEntityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameEntityList* GameEntityList::default_instance_ = NULL;

GameEntityList* GameEntityList::New() const {
  return new GameEntityList;
}

void GameEntityList::Clear() {
  entities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameEntityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameEntityList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Analytics.GameEntityInfo entities = 1;
      case 1: {
        if (tag == 10) {
         parse_entities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_entities;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameEntityList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameEntityList)
  return false;
#undef DO_
}

void GameEntityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameEntityList)
  // repeated .Analytics.GameEntityInfo entities = 1;
  for (int i = 0; i < this->entities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameEntityList)
}

::google::protobuf::uint8* GameEntityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameEntityList)
  // repeated .Analytics.GameEntityInfo entities = 1;
  for (int i = 0; i < this->entities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameEntityList)
  return target;
}

int GameEntityList::ByteSize() const {
  int total_size = 0;

  // repeated .Analytics.GameEntityInfo entities = 1;
  total_size += 1 * this->entities_size();
  for (int i = 0; i < this->entities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameEntityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameEntityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameEntityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameEntityList::MergeFrom(const GameEntityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  entities_.MergeFrom(from.entities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameEntityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameEntityList::CopyFrom(const GameEntityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameEntityList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->entities())) return false;
  return true;
}

void GameEntityList::Swap(GameEntityList* other) {
  if (other != this) {
    entities_.Swap(&other->entities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameEntityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameEntityList_descriptor_;
  metadata.reflection = GameEntityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameWeaponFired::kWeaponIdFieldNumber;
const int GameWeaponFired::kPositionXFieldNumber;
const int GameWeaponFired::kPositionYFieldNumber;
const int GameWeaponFired::kPositionZFieldNumber;
#endif  // !_MSC_VER

GameWeaponFired::GameWeaponFired()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameWeaponFired)
}

void GameWeaponFired::InitAsDefaultInstance() {
}

GameWeaponFired::GameWeaponFired(const GameWeaponFired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameWeaponFired)
}

void GameWeaponFired::SharedCtor() {
  _cached_size_ = 0;
  weaponid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameWeaponFired::~GameWeaponFired() {
  // @@protoc_insertion_point(destructor:Analytics.GameWeaponFired)
  SharedDtor();
}

void GameWeaponFired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameWeaponFired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameWeaponFired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameWeaponFired_descriptor_;
}

const GameWeaponFired& GameWeaponFired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameWeaponFired* GameWeaponFired::default_instance_ = NULL;

GameWeaponFired* GameWeaponFired::New() const {
  return new GameWeaponFired;
}

void GameWeaponFired::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameWeaponFired*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(weaponid_, positionz_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameWeaponFired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameWeaponFired)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 weaponId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_positionX;
        break;
      }

      // required float positionX = 2;
      case 2: {
        if (tag == 21) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positionY;
        break;
      }

      // required float positionY = 3;
      case 3: {
        if (tag == 29) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionZ;
        break;
      }

      // required float positionZ = 4;
      case 4: {
        if (tag == 37) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameWeaponFired)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameWeaponFired)
  return false;
#undef DO_
}

void GameWeaponFired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameWeaponFired)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weaponid(), output);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->positionx(), output);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positiony(), output);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameWeaponFired)
}

::google::protobuf::uint8* GameWeaponFired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameWeaponFired)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weaponid(), target);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->positionx(), target);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positiony(), target);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameWeaponFired)
  return target;
}

int GameWeaponFired::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 weaponId = 1;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // required float positionX = 2;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // required float positionY = 3;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // required float positionZ = 4;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameWeaponFired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameWeaponFired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameWeaponFired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameWeaponFired::MergeFrom(const GameWeaponFired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameWeaponFired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameWeaponFired::CopyFrom(const GameWeaponFired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameWeaponFired::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameWeaponFired::Swap(GameWeaponFired* other) {
  if (other != this) {
    std::swap(weaponid_, other->weaponid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameWeaponFired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameWeaponFired_descriptor_;
  metadata.reflection = GameWeaponFired_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameDeath::kKilledByClassFieldNumber;
const int GameDeath::kKilledByWeaponFieldNumber;
const int GameDeath::kKilledByHealthFieldNumber;
#endif  // !_MSC_VER

GameDeath::GameDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameDeath)
}

void GameDeath::InitAsDefaultInstance() {
}

GameDeath::GameDeath(const GameDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameDeath)
}

void GameDeath::SharedCtor() {
  _cached_size_ = 0;
  killedbyclass_ = 0;
  killedbyweapon_ = 0;
  killedbyhealth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameDeath::~GameDeath() {
  // @@protoc_insertion_point(destructor:Analytics.GameDeath)
  SharedDtor();
}

void GameDeath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameDeath_descriptor_;
}

const GameDeath& GameDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameDeath* GameDeath::default_instance_ = NULL;

GameDeath* GameDeath::New() const {
  return new GameDeath;
}

void GameDeath::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameDeath*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(killedbyclass_, killedbyhealth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameDeath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 killedByClass = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedbyclass_)));
          set_has_killedbyclass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_killedByWeapon;
        break;
      }

      // required int32 killedByWeapon = 2;
      case 2: {
        if (tag == 16) {
         parse_killedByWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedbyweapon_)));
          set_has_killedbyweapon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_killedByHealth;
        break;
      }

      // required int32 killedByHealth = 3;
      case 3: {
        if (tag == 24) {
         parse_killedByHealth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killedbyhealth_)));
          set_has_killedbyhealth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameDeath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameDeath)
  return false;
#undef DO_
}

void GameDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameDeath)
  // required int32 killedByClass = 1;
  if (has_killedbyclass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->killedbyclass(), output);
  }

  // required int32 killedByWeapon = 2;
  if (has_killedbyweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killedbyweapon(), output);
  }

  // required int32 killedByHealth = 3;
  if (has_killedbyhealth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killedbyhealth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameDeath)
}

::google::protobuf::uint8* GameDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameDeath)
  // required int32 killedByClass = 1;
  if (has_killedbyclass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->killedbyclass(), target);
  }

  // required int32 killedByWeapon = 2;
  if (has_killedbyweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killedbyweapon(), target);
  }

  // required int32 killedByHealth = 3;
  if (has_killedbyhealth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killedbyhealth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameDeath)
  return target;
}

int GameDeath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 killedByClass = 1;
    if (has_killedbyclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedbyclass());
    }

    // required int32 killedByWeapon = 2;
    if (has_killedbyweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedbyweapon());
    }

    // required int32 killedByHealth = 3;
    if (has_killedbyhealth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killedbyhealth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameDeath::MergeFrom(const GameDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_killedbyclass()) {
      set_killedbyclass(from.killedbyclass());
    }
    if (from.has_killedbyweapon()) {
      set_killedbyweapon(from.killedbyweapon());
    }
    if (from.has_killedbyhealth()) {
      set_killedbyhealth(from.killedbyhealth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameDeath::CopyFrom(const GameDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameDeath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GameDeath::Swap(GameDeath* other) {
  if (other != this) {
    std::swap(killedbyclass_, other->killedbyclass_);
    std::swap(killedbyweapon_, other->killedbyweapon_);
    std::swap(killedbyhealth_, other->killedbyhealth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameDeath_descriptor_;
  metadata.reflection = GameDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTookDamage::kWeaponIdFieldNumber;
const int GameTookDamage::kPositionXFieldNumber;
const int GameTookDamage::kPositionYFieldNumber;
const int GameTookDamage::kPositionZFieldNumber;
#endif  // !_MSC_VER

GameTookDamage::GameTookDamage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameTookDamage)
}

void GameTookDamage::InitAsDefaultInstance() {
}

GameTookDamage::GameTookDamage(const GameTookDamage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameTookDamage)
}

void GameTookDamage::SharedCtor() {
  _cached_size_ = 0;
  weaponid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTookDamage::~GameTookDamage() {
  // @@protoc_insertion_point(destructor:Analytics.GameTookDamage)
  SharedDtor();
}

void GameTookDamage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTookDamage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTookDamage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTookDamage_descriptor_;
}

const GameTookDamage& GameTookDamage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameTookDamage* GameTookDamage::default_instance_ = NULL;

GameTookDamage* GameTookDamage::New() const {
  return new GameTookDamage;
}

void GameTookDamage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameTookDamage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(weaponid_, positionz_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTookDamage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameTookDamage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 weaponId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_positionX;
        break;
      }

      // required float positionX = 2;
      case 2: {
        if (tag == 21) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positionY;
        break;
      }

      // required float positionY = 3;
      case 3: {
        if (tag == 29) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionZ;
        break;
      }

      // required float positionZ = 4;
      case 4: {
        if (tag == 37) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameTookDamage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameTookDamage)
  return false;
#undef DO_
}

void GameTookDamage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameTookDamage)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weaponid(), output);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->positionx(), output);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positiony(), output);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameTookDamage)
}

::google::protobuf::uint8* GameTookDamage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameTookDamage)
  // required int32 weaponId = 1;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weaponid(), target);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->positionx(), target);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positiony(), target);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameTookDamage)
  return target;
}

int GameTookDamage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 weaponId = 1;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weaponid());
    }

    // required float positionX = 2;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // required float positionY = 3;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // required float positionZ = 4;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTookDamage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTookDamage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTookDamage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTookDamage::MergeFrom(const GameTookDamage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTookDamage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTookDamage::CopyFrom(const GameTookDamage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTookDamage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameTookDamage::Swap(GameTookDamage* other) {
  if (other != this) {
    std::swap(weaponid_, other->weaponid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTookDamage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTookDamage_descriptor_;
  metadata.reflection = GameTookDamage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameNavigationStuck::kEntityIdFieldNumber;
const int GameNavigationStuck::kPositionXFieldNumber;
const int GameNavigationStuck::kPositionYFieldNumber;
const int GameNavigationStuck::kPositionZFieldNumber;
#endif  // !_MSC_VER

GameNavigationStuck::GameNavigationStuck()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.GameNavigationStuck)
}

void GameNavigationStuck::InitAsDefaultInstance() {
}

GameNavigationStuck::GameNavigationStuck(const GameNavigationStuck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.GameNavigationStuck)
}

void GameNavigationStuck::SharedCtor() {
  _cached_size_ = 0;
  entityid_ = 0;
  positionx_ = 0;
  positiony_ = 0;
  positionz_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameNavigationStuck::~GameNavigationStuck() {
  // @@protoc_insertion_point(destructor:Analytics.GameNavigationStuck)
  SharedDtor();
}

void GameNavigationStuck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameNavigationStuck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameNavigationStuck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameNavigationStuck_descriptor_;
}

const GameNavigationStuck& GameNavigationStuck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

GameNavigationStuck* GameNavigationStuck::default_instance_ = NULL;

GameNavigationStuck* GameNavigationStuck::New() const {
  return new GameNavigationStuck;
}

void GameNavigationStuck::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameNavigationStuck*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(entityid_, positionz_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameNavigationStuck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.GameNavigationStuck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entityid_)));
          set_has_entityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_positionX;
        break;
      }

      // required float positionX = 2;
      case 2: {
        if (tag == 21) {
         parse_positionX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionx_)));
          set_has_positionx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_positionY;
        break;
      }

      // required float positionY = 3;
      case 3: {
        if (tag == 29) {
         parse_positionY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positiony_)));
          set_has_positiony();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_positionZ;
        break;
      }

      // required float positionZ = 4;
      case 4: {
        if (tag == 37) {
         parse_positionZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionz_)));
          set_has_positionz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.GameNavigationStuck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.GameNavigationStuck)
  return false;
#undef DO_
}

void GameNavigationStuck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.GameNavigationStuck)
  // required int32 entityId = 1;
  if (has_entityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entityid(), output);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->positionx(), output);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->positiony(), output);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->positionz(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.GameNavigationStuck)
}

::google::protobuf::uint8* GameNavigationStuck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.GameNavigationStuck)
  // required int32 entityId = 1;
  if (has_entityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entityid(), target);
  }

  // required float positionX = 2;
  if (has_positionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->positionx(), target);
  }

  // required float positionY = 3;
  if (has_positiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->positiony(), target);
  }

  // required float positionZ = 4;
  if (has_positionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->positionz(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.GameNavigationStuck)
  return target;
}

int GameNavigationStuck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entityId = 1;
    if (has_entityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entityid());
    }

    // required float positionX = 2;
    if (has_positionx()) {
      total_size += 1 + 4;
    }

    // required float positionY = 3;
    if (has_positiony()) {
      total_size += 1 + 4;
    }

    // required float positionZ = 4;
    if (has_positionz()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameNavigationStuck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameNavigationStuck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameNavigationStuck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameNavigationStuck::MergeFrom(const GameNavigationStuck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entityid()) {
      set_entityid(from.entityid());
    }
    if (from.has_positionx()) {
      set_positionx(from.positionx());
    }
    if (from.has_positiony()) {
      set_positiony(from.positiony());
    }
    if (from.has_positionz()) {
      set_positionz(from.positionz());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameNavigationStuck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameNavigationStuck::CopyFrom(const GameNavigationStuck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameNavigationStuck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GameNavigationStuck::Swap(GameNavigationStuck* other) {
  if (other != this) {
    std::swap(entityid_, other->entityid_);
    std::swap(positionx_, other->positionx_);
    std::swap(positiony_, other->positiony_);
    std::swap(positionz_, other->positionz_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameNavigationStuck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameNavigationStuck_descriptor_;
  metadata.reflection = GameNavigationStuck_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageUnion::kTimestampFieldNumber;
const int MessageUnion::kSystemNavNotFoundFieldNumber;
const int MessageUnion::kSystemNavDownloadedFieldNumber;
const int MessageUnion::kSystemAssertFieldNumber;
const int MessageUnion::kSystemCrashFieldNumber;
const int MessageUnion::kSystemModelDataFieldNumber;
const int MessageUnion::kGameEntityListFieldNumber;
const int MessageUnion::kGameWeaponFiredFieldNumber;
const int MessageUnion::kGameDeathFieldNumber;
const int MessageUnion::kGameTookDamageFieldNumber;
const int MessageUnion::kGameNavigationStuckFieldNumber;
const int MessageUnion::kTopicSubscribeFieldNumber;
const int MessageUnion::kTopicUnsubscribeFieldNumber;
#endif  // !_MSC_VER

MessageUnion::MessageUnion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Analytics.MessageUnion)
}

void MessageUnion::InitAsDefaultInstance() {
  MessageUnion_default_oneof_instance_->systemnavnotfound_ = const_cast< ::Analytics::SystemNavNotFound*>(&::Analytics::SystemNavNotFound::default_instance());
  MessageUnion_default_oneof_instance_->systemnavdownloaded_ = const_cast< ::Analytics::SystemNavAutoDownloaded*>(&::Analytics::SystemNavAutoDownloaded::default_instance());
  MessageUnion_default_oneof_instance_->systemassert_ = const_cast< ::Analytics::SystemAssert*>(&::Analytics::SystemAssert::default_instance());
  MessageUnion_default_oneof_instance_->systemcrash_ = const_cast< ::Analytics::SystemCrash*>(&::Analytics::SystemCrash::default_instance());
  MessageUnion_default_oneof_instance_->systemmodeldata_ = const_cast< ::Analytics::SystemModelData*>(&::Analytics::SystemModelData::default_instance());
  MessageUnion_default_oneof_instance_->gameentitylist_ = const_cast< ::Analytics::GameEntityList*>(&::Analytics::GameEntityList::default_instance());
  MessageUnion_default_oneof_instance_->gameweaponfired_ = const_cast< ::Analytics::GameWeaponFired*>(&::Analytics::GameWeaponFired::default_instance());
  MessageUnion_default_oneof_instance_->gamedeath_ = const_cast< ::Analytics::GameDeath*>(&::Analytics::GameDeath::default_instance());
  MessageUnion_default_oneof_instance_->gametookdamage_ = const_cast< ::Analytics::GameTookDamage*>(&::Analytics::GameTookDamage::default_instance());
  MessageUnion_default_oneof_instance_->gamenavigationstuck_ = const_cast< ::Analytics::GameNavigationStuck*>(&::Analytics::GameNavigationStuck::default_instance());
  MessageUnion_default_oneof_instance_->topicsubscribe_ = const_cast< ::Analytics::TopicSubscribe*>(&::Analytics::TopicSubscribe::default_instance());
  MessageUnion_default_oneof_instance_->topicunsubscribe_ = const_cast< ::Analytics::TopicUnsubscribe*>(&::Analytics::TopicUnsubscribe::default_instance());
}

MessageUnion::MessageUnion(const MessageUnion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Analytics.MessageUnion)
}

void MessageUnion::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_msg();
}

MessageUnion::~MessageUnion() {
  // @@protoc_insertion_point(destructor:Analytics.MessageUnion)
  SharedDtor();
}

void MessageUnion::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
  if (this != default_instance_) {
  }
}

void MessageUnion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageUnion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageUnion_descriptor_;
}

const MessageUnion& MessageUnion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_analytics_2eproto();
  return *default_instance_;
}

MessageUnion* MessageUnion::default_instance_ = NULL;

MessageUnion* MessageUnion::New() const {
  return new MessageUnion;
}

void MessageUnion::clear_msg() {
  switch(msg_case()) {
    case kSystemNavNotFound: {
      delete msg_.systemnavnotfound_;
      break;
    }
    case kSystemNavDownloaded: {
      delete msg_.systemnavdownloaded_;
      break;
    }
    case kSystemAssert: {
      delete msg_.systemassert_;
      break;
    }
    case kSystemCrash: {
      delete msg_.systemcrash_;
      break;
    }
    case kSystemModelData: {
      delete msg_.systemmodeldata_;
      break;
    }
    case kGameEntityList: {
      delete msg_.gameentitylist_;
      break;
    }
    case kGameWeaponFired: {
      delete msg_.gameweaponfired_;
      break;
    }
    case kGameDeath: {
      delete msg_.gamedeath_;
      break;
    }
    case kGameTookDamage: {
      delete msg_.gametookdamage_;
      break;
    }
    case kGameNavigationStuck: {
      delete msg_.gamenavigationstuck_;
      break;
    }
    case kTopicSubscribe: {
      delete msg_.topicsubscribe_;
      break;
    }
    case kTopicUnsubscribe: {
      delete msg_.topicunsubscribe_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void MessageUnion::Clear() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_msg();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageUnion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Analytics.MessageUnion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_systemNavNotFound;
        break;
      }

      // optional .Analytics.SystemNavNotFound systemNavNotFound = 2;
      case 2: {
        if (tag == 18) {
         parse_systemNavNotFound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemnavnotfound()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_systemNavDownloaded;
        break;
      }

      // optional .Analytics.SystemNavAutoDownloaded systemNavDownloaded = 3;
      case 3: {
        if (tag == 26) {
         parse_systemNavDownloaded:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemnavdownloaded()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_systemAssert;
        break;
      }

      // optional .Analytics.SystemAssert systemAssert = 4;
      case 4: {
        if (tag == 34) {
         parse_systemAssert:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemassert()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_systemCrash;
        break;
      }

      // optional .Analytics.SystemCrash systemCrash = 5;
      case 5: {
        if (tag == 42) {
         parse_systemCrash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemcrash()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_systemModelData;
        break;
      }

      // optional .Analytics.SystemModelData systemModelData = 6;
      case 6: {
        if (tag == 50) {
         parse_systemModelData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_systemmodeldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_gameEntityList;
        break;
      }

      // optional .Analytics.GameEntityList gameEntityList = 100;
      case 100: {
        if (tag == 802) {
         parse_gameEntityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameentitylist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(810)) goto parse_gameWeaponFired;
        break;
      }

      // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
      case 101: {
        if (tag == 810) {
         parse_gameWeaponFired:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameweaponfired()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(818)) goto parse_gameDeath;
        break;
      }

      // optional .Analytics.GameDeath gameDeath = 102;
      case 102: {
        if (tag == 818) {
         parse_gameDeath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamedeath()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_gameTookDamage;
        break;
      }

      // optional .Analytics.GameTookDamage gameTookDamage = 103;
      case 103: {
        if (tag == 826) {
         parse_gameTookDamage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gametookdamage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_gameNavigationStuck;
        break;
      }

      // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
      case 104: {
        if (tag == 834) {
         parse_gameNavigationStuck:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gamenavigationstuck()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8002)) goto parse_topicSubscribe;
        break;
      }

      // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
      case 1000: {
        if (tag == 8002) {
         parse_topicSubscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topicsubscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8010)) goto parse_topicUnsubscribe;
        break;
      }

      // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
      case 1001: {
        if (tag == 8010) {
         parse_topicUnsubscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topicunsubscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Analytics.MessageUnion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Analytics.MessageUnion)
  return false;
#undef DO_
}

void MessageUnion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Analytics.MessageUnion)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // optional .Analytics.SystemNavNotFound systemNavNotFound = 2;
  if (has_systemnavnotfound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->systemnavnotfound(), output);
  }

  // optional .Analytics.SystemNavAutoDownloaded systemNavDownloaded = 3;
  if (has_systemnavdownloaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->systemnavdownloaded(), output);
  }

  // optional .Analytics.SystemAssert systemAssert = 4;
  if (has_systemassert()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->systemassert(), output);
  }

  // optional .Analytics.SystemCrash systemCrash = 5;
  if (has_systemcrash()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->systemcrash(), output);
  }

  // optional .Analytics.SystemModelData systemModelData = 6;
  if (has_systemmodeldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->systemmodeldata(), output);
  }

  // optional .Analytics.GameEntityList gameEntityList = 100;
  if (has_gameentitylist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->gameentitylist(), output);
  }

  // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
  if (has_gameweaponfired()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, this->gameweaponfired(), output);
  }

  // optional .Analytics.GameDeath gameDeath = 102;
  if (has_gamedeath()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, this->gamedeath(), output);
  }

  // optional .Analytics.GameTookDamage gameTookDamage = 103;
  if (has_gametookdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->gametookdamage(), output);
  }

  // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
  if (has_gamenavigationstuck()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->gamenavigationstuck(), output);
  }

  // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
  if (has_topicsubscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, this->topicsubscribe(), output);
  }

  // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
  if (has_topicunsubscribe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->topicunsubscribe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Analytics.MessageUnion)
}

::google::protobuf::uint8* MessageUnion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Analytics.MessageUnion)
  // required int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // optional .Analytics.SystemNavNotFound systemNavNotFound = 2;
  if (has_systemnavnotfound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->systemnavnotfound(), target);
  }

  // optional .Analytics.SystemNavAutoDownloaded systemNavDownloaded = 3;
  if (has_systemnavdownloaded()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->systemnavdownloaded(), target);
  }

  // optional .Analytics.SystemAssert systemAssert = 4;
  if (has_systemassert()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->systemassert(), target);
  }

  // optional .Analytics.SystemCrash systemCrash = 5;
  if (has_systemcrash()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->systemcrash(), target);
  }

  // optional .Analytics.SystemModelData systemModelData = 6;
  if (has_systemmodeldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->systemmodeldata(), target);
  }

  // optional .Analytics.GameEntityList gameEntityList = 100;
  if (has_gameentitylist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->gameentitylist(), target);
  }

  // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
  if (has_gameweaponfired()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        101, this->gameweaponfired(), target);
  }

  // optional .Analytics.GameDeath gameDeath = 102;
  if (has_gamedeath()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        102, this->gamedeath(), target);
  }

  // optional .Analytics.GameTookDamage gameTookDamage = 103;
  if (has_gametookdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->gametookdamage(), target);
  }

  // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
  if (has_gamenavigationstuck()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->gamenavigationstuck(), target);
  }

  // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
  if (has_topicsubscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1000, this->topicsubscribe(), target);
  }

  // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
  if (has_topicunsubscribe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->topicunsubscribe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Analytics.MessageUnion)
  return target;
}

int MessageUnion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

  }
  switch (msg_case()) {
    // optional .Analytics.SystemNavNotFound systemNavNotFound = 2;
    case kSystemNavNotFound: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemnavnotfound());
      break;
    }
    // optional .Analytics.SystemNavAutoDownloaded systemNavDownloaded = 3;
    case kSystemNavDownloaded: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemnavdownloaded());
      break;
    }
    // optional .Analytics.SystemAssert systemAssert = 4;
    case kSystemAssert: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemassert());
      break;
    }
    // optional .Analytics.SystemCrash systemCrash = 5;
    case kSystemCrash: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemcrash());
      break;
    }
    // optional .Analytics.SystemModelData systemModelData = 6;
    case kSystemModelData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->systemmodeldata());
      break;
    }
    // optional .Analytics.GameEntityList gameEntityList = 100;
    case kGameEntityList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameentitylist());
      break;
    }
    // optional .Analytics.GameWeaponFired gameWeaponFired = 101;
    case kGameWeaponFired: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameweaponfired());
      break;
    }
    // optional .Analytics.GameDeath gameDeath = 102;
    case kGameDeath: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamedeath());
      break;
    }
    // optional .Analytics.GameTookDamage gameTookDamage = 103;
    case kGameTookDamage: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gametookdamage());
      break;
    }
    // optional .Analytics.GameNavigationStuck gameNavigationStuck = 104;
    case kGameNavigationStuck: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gamenavigationstuck());
      break;
    }
    // optional .Analytics.TopicSubscribe topicSubscribe = 1000;
    case kTopicSubscribe: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topicsubscribe());
      break;
    }
    // optional .Analytics.TopicUnsubscribe topicUnsubscribe = 1001;
    case kTopicUnsubscribe: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topicunsubscribe());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageUnion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageUnion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageUnion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageUnion::MergeFrom(const MessageUnion& from) {
  GOOGLE_CHECK_NE(&from, this);
  switch (from.msg_case()) {
    case kSystemNavNotFound: {
      mutable_systemnavnotfound()->::Analytics::SystemNavNotFound::MergeFrom(from.systemnavnotfound());
      break;
    }
    case kSystemNavDownloaded: {
      mutable_systemnavdownloaded()->::Analytics::SystemNavAutoDownloaded::MergeFrom(from.systemnavdownloaded());
      break;
    }
    case kSystemAssert: {
      mutable_systemassert()->::Analytics::SystemAssert::MergeFrom(from.systemassert());
      break;
    }
    case kSystemCrash: {
      mutable_systemcrash()->::Analytics::SystemCrash::MergeFrom(from.systemcrash());
      break;
    }
    case kSystemModelData: {
      mutable_systemmodeldata()->::Analytics::SystemModelData::MergeFrom(from.systemmodeldata());
      break;
    }
    case kGameEntityList: {
      mutable_gameentitylist()->::Analytics::GameEntityList::MergeFrom(from.gameentitylist());
      break;
    }
    case kGameWeaponFired: {
      mutable_gameweaponfired()->::Analytics::GameWeaponFired::MergeFrom(from.gameweaponfired());
      break;
    }
    case kGameDeath: {
      mutable_gamedeath()->::Analytics::GameDeath::MergeFrom(from.gamedeath());
      break;
    }
    case kGameTookDamage: {
      mutable_gametookdamage()->::Analytics::GameTookDamage::MergeFrom(from.gametookdamage());
      break;
    }
    case kGameNavigationStuck: {
      mutable_gamenavigationstuck()->::Analytics::GameNavigationStuck::MergeFrom(from.gamenavigationstuck());
      break;
    }
    case kTopicSubscribe: {
      mutable_topicsubscribe()->::Analytics::TopicSubscribe::MergeFrom(from.topicsubscribe());
      break;
    }
    case kTopicUnsubscribe: {
      mutable_topicunsubscribe()->::Analytics::TopicUnsubscribe::MergeFrom(from.topicunsubscribe());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageUnion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageUnion::CopyFrom(const MessageUnion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageUnion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_systemnavnotfound()) {
    if (!this->systemnavnotfound().IsInitialized()) return false;
  }
  if (has_systemnavdownloaded()) {
    if (!this->systemnavdownloaded().IsInitialized()) return false;
  }
  if (has_systemassert()) {
    if (!this->systemassert().IsInitialized()) return false;
  }
  if (has_systemcrash()) {
    if (!this->systemcrash().IsInitialized()) return false;
  }
  if (has_systemmodeldata()) {
    if (!this->systemmodeldata().IsInitialized()) return false;
  }
  if (has_gameentitylist()) {
    if (!this->gameentitylist().IsInitialized()) return false;
  }
  if (has_gameweaponfired()) {
    if (!this->gameweaponfired().IsInitialized()) return false;
  }
  if (has_gamedeath()) {
    if (!this->gamedeath().IsInitialized()) return false;
  }
  if (has_gametookdamage()) {
    if (!this->gametookdamage().IsInitialized()) return false;
  }
  if (has_gamenavigationstuck()) {
    if (!this->gamenavigationstuck().IsInitialized()) return false;
  }
  if (has_topicsubscribe()) {
    if (!this->topicsubscribe().IsInitialized()) return false;
  }
  if (has_topicunsubscribe()) {
    if (!this->topicunsubscribe().IsInitialized()) return false;
  }
  return true;
}

void MessageUnion::Swap(MessageUnion* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(msg_, other->msg_);
    std::swap(_oneof_case_[0], other->_oneof_case_[0]);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageUnion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageUnion_descriptor_;
  metadata.reflection = MessageUnion_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  cachelastvalue(kCachelastvalueFieldNumber, false);
const ::std::string cachekeysuffix_default("");
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MessageOptions,
    ::google::protobuf::internal::StringTypeTraits, 9, false >
  cachekeysuffix(kCachekeysuffixFieldNumber, cachekeysuffix_default);

// @@protoc_insertion_point(namespace_scope)

}  // namespace Analytics

// @@protoc_insertion_point(global_scope)
