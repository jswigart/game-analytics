{"name":"Game-analytics","tagline":"Remote visualizer for games or simulations","body":"![Work in Progress Visualization Application](https://github.com/jswigart/game-analytics/blob/master/analytics_preview.png?raw=true)\r\n\r\n### What is Game Analytics.\r\nGame Analytics is a library and visualization tool tool for remote real time visualization and manipulation of 3d environments, entities, and 'events' within the environment. It is meant to receive data from a host application, such as a game or simulation to visualize things like world geometry, navigation geometry, player/entity movement, and events such as kills, deaths, suicides, heatmaps for various player activity, etc. The application is still in its early stages of development, having spent a good amount of time experimenting with different visualization engines and messaging technologies.\r\n\r\n### Key Features\r\n* Events are defined via protocol buffer message schemas to provide maximal flexibility for users to track whatever information they want to maintain and ultimately to drive visualizations with that information. \r\n* The 'host' application utilizes zeromq pub/sub model to publish to the visualizer application\r\n* The 'host' application links to the game-analytics library to publish events and 3d model information to the application in real time\r\n* The 'host' application write all events out to a sqlite database that can later be used by the visualizer for playback within the viewer app offline from the host application\r\n* The data stream will provide(to be determined) manipulation of objects within the visualization back to the host application. This may take the form of reflecting properties back to the host application, or perhaps a protobuf based service to easily configure data driven functions that may be used to enact certain changes on the host side from the visualizer.\r\n\r\n### Technologies Used\r\nThe Game Analytics library communicates to the visualization application via a zeromq messaging layer. This libraries was chosen to simplify the communication between the application and hide from the user and the library itself any implementation details of handling packet size limits of disassembling and reassembling large messages.\r\n\r\n### Authors and Contributors\r\nThis library is a hobby project developed by @jswigart along side the FPS bot project <https://github.com/jswigart/omni-bot> as the first major user.\r\n\r\n### Support or Contact\r\nThis library is a hobby project, but @jswigart is still open to feedback, suggestions, or contributions. Feel free to provide feedback.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}