// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modeldata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modeldata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace modeldata {

namespace {

const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec4_reflection_ = NULL;
const ::google::protobuf::Descriptor* Euler_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Euler_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix4_reflection_ = NULL;
const ::google::protobuf::Descriptor* Node_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Node_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mesh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mesh_reflection_ = NULL;
const ::google::protobuf::Descriptor* Material_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Material_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_modeldata_2eproto() {
  protobuf_AddDesc_modeldata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "modeldata.proto");
  GOOGLE_CHECK(file != NULL);
  Vec3_descriptor_ = file->message_type(0);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, z_),
  };
  Vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3));
  Vec4_descriptor_ = file->message_type(1);
  static const int Vec4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, w_),
  };
  Vec4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec4_descriptor_,
      Vec4::default_instance_,
      Vec4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec4));
  Euler_descriptor_ = file->message_type(2);
  static const int Euler_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Euler, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Euler, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Euler, roll_),
  };
  Euler_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Euler_descriptor_,
      Euler::default_instance_,
      Euler_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Euler, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Euler, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Euler));
  Matrix4_descriptor_ = file->message_type(3);
  static const int Matrix4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix4, row0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix4, row1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix4, row2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix4, row3_),
  };
  Matrix4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Matrix4_descriptor_,
      Matrix4::default_instance_,
      Matrix4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Matrix4));
  Node_descriptor_ = file->message_type(4);
  static const int Node_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, transformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, submodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, meshindex_),
  };
  Node_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Node_descriptor_,
      Node::default_instance_,
      Node_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Node, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Node));
  Mesh_descriptor_ = file->message_type(5);
  static const int Mesh_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, materialindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, vertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, faces_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, externalref_),
  };
  Mesh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Mesh_descriptor_,
      Mesh::default_instance_,
      Mesh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mesh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Mesh));
  Material_descriptor_ = file->message_type(6);
  static const int Material_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, surfaceflags_),
  };
  Material_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Material_descriptor_,
      Material::default_instance_,
      Material_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Material, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Material));
  Scene_descriptor_ = file->message_type(7);
  static const int Scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, rootnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, meshes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, materials_),
  };
  Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scene));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_modeldata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec4_descriptor_, &Vec4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Euler_descriptor_, &Euler::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Matrix4_descriptor_, &Matrix4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Node_descriptor_, &Node::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Mesh_descriptor_, &Mesh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Material_descriptor_, &Material::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scene_descriptor_, &Scene::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_modeldata_2eproto() {
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete Vec4::default_instance_;
  delete Vec4_reflection_;
  delete Euler::default_instance_;
  delete Euler_reflection_;
  delete Matrix4::default_instance_;
  delete Matrix4_reflection_;
  delete Node::default_instance_;
  delete Node_reflection_;
  delete Mesh::default_instance_;
  delete Mesh_reflection_;
  delete Material::default_instance_;
  delete Material_reflection_;
  delete Scene::default_instance_;
  delete Scene_reflection_;
}

void protobuf_AddDesc_modeldata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017modeldata.proto\022\tmodeldata\"0\n\004Vec3\022\014\n\001"
    "x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030\003 \001(\002:\0010\">"
    "\n\004Vec4\022\014\n\001x\030\001 \001(\002:\0010\022\014\n\001y\030\002 \001(\002:\0010\022\014\n\001z\030"
    "\003 \001(\002:\0010\022\014\n\001w\030\004 \001(\002:\0010\">\n\005Euler\022\022\n\007headi"
    "ng\030\001 \001(\002:\0010\022\020\n\005pitch\030\002 \001(\002:\0010\022\017\n\004roll\030\003 "
    "\001(\002:\0010\"\205\001\n\007Matrix4\022\035\n\004row0\030\001 \002(\0132\017.model"
    "data.Vec4\022\035\n\004row1\030\002 \002(\0132\017.modeldata.Vec4"
    "\022\035\n\004row2\030\003 \002(\0132\017.modeldata.Vec4\022\035\n\004row3\030"
    "\004 \002(\0132\017.modeldata.Vec4\"\210\001\n\004Node\022\014\n\004name\030"
    "\001 \001(\t\022*\n\016transformation\030\002 \001(\0132\022.modeldat"
    "a.Matrix4\022\020\n\010subModel\030\003 \001(\r\022!\n\010children\030"
    "\004 \003(\0132\017.modeldata.Node\022\021\n\tmeshIndex\030\005 \003("
    "\r\"a\n\004Mesh\022\014\n\004name\030\001 \001(\t\022\025\n\rmaterialIndex"
    "\030\002 \002(\r\022\020\n\010vertices\030\003 \001(\014\022\r\n\005faces\030\004 \001(\014\022"
    "\023\n\013externalRef\030\005 \001(\010\"@\n\010Material\022\014\n\004name"
    "\030\001 \002(\t\022\020\n\010contents\030\002 \001(\r\022\024\n\014surfaceFlags"
    "\030\003 \001(\r\"s\n\005Scene\022!\n\010rootNode\030\001 \002(\0132\017.mode"
    "ldata.Node\022\037\n\006meshes\030\002 \003(\0132\017.modeldata.M"
    "esh\022&\n\tmaterials\030\003 \003(\0132\023.modeldata.Mater"
    "ial", 763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modeldata.proto", &protobuf_RegisterTypes);
  Vec3::default_instance_ = new Vec3();
  Vec4::default_instance_ = new Vec4();
  Euler::default_instance_ = new Euler();
  Matrix4::default_instance_ = new Matrix4();
  Node::default_instance_ = new Node();
  Mesh::default_instance_ = new Mesh();
  Material::default_instance_ = new Material();
  Scene::default_instance_ = new Scene();
  Vec3::default_instance_->InitAsDefaultInstance();
  Vec4::default_instance_->InitAsDefaultInstance();
  Euler::default_instance_->InitAsDefaultInstance();
  Matrix4::default_instance_->InitAsDefaultInstance();
  Node::default_instance_->InitAsDefaultInstance();
  Mesh::default_instance_->InitAsDefaultInstance();
  Material::default_instance_->InitAsDefaultInstance();
  Scene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_modeldata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_modeldata_2eproto {
  StaticDescriptorInitializer_modeldata_2eproto() {
    protobuf_AddDesc_modeldata_2eproto();
  }
} static_descriptor_initializer_modeldata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Vec3::kXFieldNumber;
const int Vec3::kYFieldNumber;
const int Vec3::kZFieldNumber;
#endif  // !_MSC_VER

Vec3::Vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Vec3)
}

void Vec3::InitAsDefaultInstance() {
}

Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Vec3)
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:modeldata.Vec3)
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New() const {
  return new Vec3;
}

void Vec3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vec3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Vec3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Vec3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Vec3)
  return false;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Vec3)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Vec3)
}

::google::protobuf::uint8* Vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Vec3)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Vec3)
  return target;
}

int Vec3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {

  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec4::kXFieldNumber;
const int Vec4::kYFieldNumber;
const int Vec4::kZFieldNumber;
const int Vec4::kWFieldNumber;
#endif  // !_MSC_VER

Vec4::Vec4()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Vec4)
}

void Vec4::InitAsDefaultInstance() {
}

Vec4::Vec4(const Vec4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Vec4)
}

void Vec4::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:modeldata.Vec4)
  SharedDtor();
}

void Vec4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec4_descriptor_;
}

const Vec4& Vec4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Vec4* Vec4::default_instance_ = NULL;

Vec4* Vec4::New() const {
  return new Vec4;
}

void Vec4::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vec4*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, w_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Vec4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_w;
        break;
      }

      // optional float w = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Vec4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Vec4)
  return false;
#undef DO_
}

void Vec4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Vec4)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float w = 4 [default = 0];
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Vec4)
}

::google::protobuf::uint8* Vec4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Vec4)
  // optional float x = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float w = 4 [default = 0];
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Vec4)
  return target;
}

int Vec4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float w = 4 [default = 0];
    if (has_w()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {

  return true;
}

void Vec4::Swap(Vec4* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec4_descriptor_;
  metadata.reflection = Vec4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Euler::kHeadingFieldNumber;
const int Euler::kPitchFieldNumber;
const int Euler::kRollFieldNumber;
#endif  // !_MSC_VER

Euler::Euler()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Euler)
}

void Euler::InitAsDefaultInstance() {
}

Euler::Euler(const Euler& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Euler)
}

void Euler::SharedCtor() {
  _cached_size_ = 0;
  heading_ = 0;
  pitch_ = 0;
  roll_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Euler::~Euler() {
  // @@protoc_insertion_point(destructor:modeldata.Euler)
  SharedDtor();
}

void Euler::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Euler::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Euler::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Euler_descriptor_;
}

const Euler& Euler::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Euler* Euler::default_instance_ = NULL;

Euler* Euler::New() const {
  return new Euler;
}

void Euler::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Euler*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(heading_, roll_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Euler::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Euler)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float heading = 1 [default = 0];
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_pitch;
        break;
      }

      // optional float pitch = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_roll;
        break;
      }

      // optional float roll = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Euler)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Euler)
  return false;
#undef DO_
}

void Euler::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Euler)
  // optional float heading = 1 [default = 0];
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->heading(), output);
  }

  // optional float pitch = 2 [default = 0];
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->pitch(), output);
  }

  // optional float roll = 3 [default = 0];
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roll(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Euler)
}

::google::protobuf::uint8* Euler::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Euler)
  // optional float heading = 1 [default = 0];
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->heading(), target);
  }

  // optional float pitch = 2 [default = 0];
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->pitch(), target);
  }

  // optional float roll = 3 [default = 0];
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roll(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Euler)
  return target;
}

int Euler::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float heading = 1 [default = 0];
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 2 [default = 0];
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float roll = 3 [default = 0];
    if (has_roll()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Euler::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Euler* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Euler*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Euler::MergeFrom(const Euler& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Euler::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Euler::CopyFrom(const Euler& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Euler::IsInitialized() const {

  return true;
}

void Euler::Swap(Euler* other) {
  if (other != this) {
    std::swap(heading_, other->heading_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Euler::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Euler_descriptor_;
  metadata.reflection = Euler_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Matrix4::kRow0FieldNumber;
const int Matrix4::kRow1FieldNumber;
const int Matrix4::kRow2FieldNumber;
const int Matrix4::kRow3FieldNumber;
#endif  // !_MSC_VER

Matrix4::Matrix4()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Matrix4)
}

void Matrix4::InitAsDefaultInstance() {
  row0_ = const_cast< ::modeldata::Vec4*>(&::modeldata::Vec4::default_instance());
  row1_ = const_cast< ::modeldata::Vec4*>(&::modeldata::Vec4::default_instance());
  row2_ = const_cast< ::modeldata::Vec4*>(&::modeldata::Vec4::default_instance());
  row3_ = const_cast< ::modeldata::Vec4*>(&::modeldata::Vec4::default_instance());
}

Matrix4::Matrix4(const Matrix4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Matrix4)
}

void Matrix4::SharedCtor() {
  _cached_size_ = 0;
  row0_ = NULL;
  row1_ = NULL;
  row2_ = NULL;
  row3_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matrix4::~Matrix4() {
  // @@protoc_insertion_point(destructor:modeldata.Matrix4)
  SharedDtor();
}

void Matrix4::SharedDtor() {
  if (this != default_instance_) {
    delete row0_;
    delete row1_;
    delete row2_;
    delete row3_;
  }
}

void Matrix4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix4_descriptor_;
}

const Matrix4& Matrix4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Matrix4* Matrix4::default_instance_ = NULL;

Matrix4* Matrix4::New() const {
  return new Matrix4;
}

void Matrix4::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_row0()) {
      if (row0_ != NULL) row0_->::modeldata::Vec4::Clear();
    }
    if (has_row1()) {
      if (row1_ != NULL) row1_->::modeldata::Vec4::Clear();
    }
    if (has_row2()) {
      if (row2_ != NULL) row2_->::modeldata::Vec4::Clear();
    }
    if (has_row3()) {
      if (row3_ != NULL) row3_->::modeldata::Vec4::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Matrix4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Matrix4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .modeldata.Vec4 row0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_row1;
        break;
      }

      // required .modeldata.Vec4 row1 = 2;
      case 2: {
        if (tag == 18) {
         parse_row1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_row2;
        break;
      }

      // required .modeldata.Vec4 row2 = 3;
      case 3: {
        if (tag == 26) {
         parse_row2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_row3;
        break;
      }

      // required .modeldata.Vec4 row3 = 4;
      case 4: {
        if (tag == 34) {
         parse_row3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_row3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Matrix4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Matrix4)
  return false;
#undef DO_
}

void Matrix4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Matrix4)
  // required .modeldata.Vec4 row0 = 1;
  if (has_row0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->row0(), output);
  }

  // required .modeldata.Vec4 row1 = 2;
  if (has_row1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->row1(), output);
  }

  // required .modeldata.Vec4 row2 = 3;
  if (has_row2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->row2(), output);
  }

  // required .modeldata.Vec4 row3 = 4;
  if (has_row3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->row3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Matrix4)
}

::google::protobuf::uint8* Matrix4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Matrix4)
  // required .modeldata.Vec4 row0 = 1;
  if (has_row0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->row0(), target);
  }

  // required .modeldata.Vec4 row1 = 2;
  if (has_row1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->row1(), target);
  }

  // required .modeldata.Vec4 row2 = 3;
  if (has_row2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->row2(), target);
  }

  // required .modeldata.Vec4 row3 = 4;
  if (has_row3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->row3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Matrix4)
  return target;
}

int Matrix4::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .modeldata.Vec4 row0 = 1;
    if (has_row0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row0());
    }

    // required .modeldata.Vec4 row1 = 2;
    if (has_row1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row1());
    }

    // required .modeldata.Vec4 row2 = 3;
    if (has_row2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row2());
    }

    // required .modeldata.Vec4 row3 = 4;
    if (has_row3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->row3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Matrix4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Matrix4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matrix4::MergeFrom(const Matrix4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row0()) {
      mutable_row0()->::modeldata::Vec4::MergeFrom(from.row0());
    }
    if (from.has_row1()) {
      mutable_row1()->::modeldata::Vec4::MergeFrom(from.row1());
    }
    if (from.has_row2()) {
      mutable_row2()->::modeldata::Vec4::MergeFrom(from.row2());
    }
    if (from.has_row3()) {
      mutable_row3()->::modeldata::Vec4::MergeFrom(from.row3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Matrix4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix4::CopyFrom(const Matrix4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Matrix4::Swap(Matrix4* other) {
  if (other != this) {
    std::swap(row0_, other->row0_);
    std::swap(row1_, other->row1_);
    std::swap(row2_, other->row2_);
    std::swap(row3_, other->row3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Matrix4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix4_descriptor_;
  metadata.reflection = Matrix4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Node::kNameFieldNumber;
const int Node::kTransformationFieldNumber;
const int Node::kSubModelFieldNumber;
const int Node::kChildrenFieldNumber;
const int Node::kMeshIndexFieldNumber;
#endif  // !_MSC_VER

Node::Node()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Node)
}

void Node::InitAsDefaultInstance() {
  transformation_ = const_cast< ::modeldata::Matrix4*>(&::modeldata::Matrix4::default_instance());
}

Node::Node(const Node& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Node)
}

void Node::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transformation_ = NULL;
  submodel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:modeldata.Node)
  SharedDtor();
}

void Node::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete transformation_;
  }
}

void Node::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Node::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Node_descriptor_;
}

const Node& Node::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Node* Node::default_instance_ = NULL;

Node* Node::New() const {
  return new Node;
}

void Node::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_transformation()) {
      if (transformation_ != NULL) transformation_->::modeldata::Matrix4::Clear();
    }
    submodel_ = 0u;
  }
  children_.Clear();
  meshindex_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Node)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_transformation;
        break;
      }

      // optional .modeldata.Matrix4 transformation = 2;
      case 2: {
        if (tag == 18) {
         parse_transformation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_subModel;
        break;
      }

      // optional uint32 subModel = 3;
      case 3: {
        if (tag == 24) {
         parse_subModel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submodel_)));
          set_has_submodel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_children;
        break;
      }

      // repeated .modeldata.Node children = 4;
      case 4: {
        if (tag == 34) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_children;
        if (input->ExpectTag(40)) goto parse_meshIndex;
        break;
      }

      // repeated uint32 meshIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_meshIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_meshindex())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_meshindex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_meshIndex;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Node)
  return false;
#undef DO_
}

void Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Node)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .modeldata.Matrix4 transformation = 2;
  if (has_transformation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->transformation(), output);
  }

  // optional uint32 subModel = 3;
  if (has_submodel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->submodel(), output);
  }

  // repeated .modeldata.Node children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->children(i), output);
  }

  // repeated uint32 meshIndex = 5;
  for (int i = 0; i < this->meshindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->meshindex(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Node)
}

::google::protobuf::uint8* Node::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Node)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .modeldata.Matrix4 transformation = 2;
  if (has_transformation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->transformation(), target);
  }

  // optional uint32 subModel = 3;
  if (has_submodel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->submodel(), target);
  }

  // repeated .modeldata.Node children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->children(i), target);
  }

  // repeated uint32 meshIndex = 5;
  for (int i = 0; i < this->meshindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->meshindex(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Node)
  return target;
}

int Node::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .modeldata.Matrix4 transformation = 2;
    if (has_transformation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transformation());
    }

    // optional uint32 subModel = 3;
    if (has_submodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submodel());
    }

  }
  // repeated .modeldata.Node children = 4;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  // repeated uint32 meshIndex = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->meshindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->meshindex(i));
    }
    total_size += 1 * this->meshindex_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Node::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Node* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Node*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Node::MergeFrom(const Node& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  meshindex_.MergeFrom(from.meshindex_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_transformation()) {
      mutable_transformation()->::modeldata::Matrix4::MergeFrom(from.transformation());
    }
    if (from.has_submodel()) {
      set_submodel(from.submodel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Node::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Node::CopyFrom(const Node& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {

  if (has_transformation()) {
    if (!this->transformation().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->children())) return false;
  return true;
}

void Node::Swap(Node* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(transformation_, other->transformation_);
    std::swap(submodel_, other->submodel_);
    children_.Swap(&other->children_);
    meshindex_.Swap(&other->meshindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Node::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Node_descriptor_;
  metadata.reflection = Node_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Mesh::kNameFieldNumber;
const int Mesh::kMaterialIndexFieldNumber;
const int Mesh::kVerticesFieldNumber;
const int Mesh::kFacesFieldNumber;
const int Mesh::kExternalRefFieldNumber;
#endif  // !_MSC_VER

Mesh::Mesh()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Mesh)
}

void Mesh::InitAsDefaultInstance() {
}

Mesh::Mesh(const Mesh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Mesh)
}

void Mesh::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  materialindex_ = 0u;
  vertices_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  faces_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  externalref_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Mesh::~Mesh() {
  // @@protoc_insertion_point(destructor:modeldata.Mesh)
  SharedDtor();
}

void Mesh::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (vertices_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vertices_;
  }
  if (faces_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete faces_;
  }
  if (this != default_instance_) {
  }
}

void Mesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mesh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mesh_descriptor_;
}

const Mesh& Mesh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Mesh* Mesh::default_instance_ = NULL;

Mesh* Mesh::New() const {
  return new Mesh;
}

void Mesh::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Mesh*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(materialindex_, externalref_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_vertices()) {
      if (vertices_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vertices_->clear();
      }
    }
    if (has_faces()) {
      if (faces_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        faces_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Mesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Mesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_materialIndex;
        break;
      }

      // required uint32 materialIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_materialIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &materialindex_)));
          set_has_materialindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vertices;
        break;
      }

      // optional bytes vertices = 3;
      case 3: {
        if (tag == 26) {
         parse_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_faces;
        break;
      }

      // optional bytes faces = 4;
      case 4: {
        if (tag == 34) {
         parse_faces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faces()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_externalRef;
        break;
      }

      // optional bool externalRef = 5;
      case 5: {
        if (tag == 40) {
         parse_externalRef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &externalref_)));
          set_has_externalref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Mesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Mesh)
  return false;
#undef DO_
}

void Mesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Mesh)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 materialIndex = 2;
  if (has_materialindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->materialindex(), output);
  }

  // optional bytes vertices = 3;
  if (has_vertices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->vertices(), output);
  }

  // optional bytes faces = 4;
  if (has_faces()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->faces(), output);
  }

  // optional bool externalRef = 5;
  if (has_externalref()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->externalref(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Mesh)
}

::google::protobuf::uint8* Mesh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Mesh)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 materialIndex = 2;
  if (has_materialindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->materialindex(), target);
  }

  // optional bytes vertices = 3;
  if (has_vertices()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vertices(), target);
  }

  // optional bytes faces = 4;
  if (has_faces()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->faces(), target);
  }

  // optional bool externalRef = 5;
  if (has_externalref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->externalref(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Mesh)
  return target;
}

int Mesh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 materialIndex = 2;
    if (has_materialindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->materialindex());
    }

    // optional bytes vertices = 3;
    if (has_vertices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vertices());
    }

    // optional bytes faces = 4;
    if (has_faces()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faces());
    }

    // optional bool externalRef = 5;
    if (has_externalref()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mesh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Mesh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Mesh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Mesh::MergeFrom(const Mesh& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_materialindex()) {
      set_materialindex(from.materialindex());
    }
    if (from.has_vertices()) {
      set_vertices(from.vertices());
    }
    if (from.has_faces()) {
      set_faces(from.faces());
    }
    if (from.has_externalref()) {
      set_externalref(from.externalref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Mesh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh::CopyFrom(const Mesh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void Mesh::Swap(Mesh* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(materialindex_, other->materialindex_);
    std::swap(vertices_, other->vertices_);
    std::swap(faces_, other->faces_);
    std::swap(externalref_, other->externalref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Mesh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mesh_descriptor_;
  metadata.reflection = Mesh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Material::kNameFieldNumber;
const int Material::kContentsFieldNumber;
const int Material::kSurfaceFlagsFieldNumber;
#endif  // !_MSC_VER

Material::Material()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Material)
}

void Material::InitAsDefaultInstance() {
}

Material::Material(const Material& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Material)
}

void Material::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  contents_ = 0u;
  surfaceflags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Material::~Material() {
  // @@protoc_insertion_point(destructor:modeldata.Material)
  SharedDtor();
}

void Material::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Material::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Material::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Material_descriptor_;
}

const Material& Material::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Material* Material::default_instance_ = NULL;

Material* Material::New() const {
  return new Material;
}

void Material::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Material*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(contents_, surfaceflags_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Material::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Material)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contents;
        break;
      }

      // optional uint32 contents = 2;
      case 2: {
        if (tag == 16) {
         parse_contents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contents_)));
          set_has_contents();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_surfaceFlags;
        break;
      }

      // optional uint32 surfaceFlags = 3;
      case 3: {
        if (tag == 24) {
         parse_surfaceFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surfaceflags_)));
          set_has_surfaceflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Material)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Material)
  return false;
#undef DO_
}

void Material::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Material)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 contents = 2;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contents(), output);
  }

  // optional uint32 surfaceFlags = 3;
  if (has_surfaceflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->surfaceflags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Material)
}

::google::protobuf::uint8* Material::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Material)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 contents = 2;
  if (has_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contents(), target);
  }

  // optional uint32 surfaceFlags = 3;
  if (has_surfaceflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->surfaceflags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Material)
  return target;
}

int Material::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 contents = 2;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contents());
    }

    // optional uint32 surfaceFlags = 3;
    if (has_surfaceflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surfaceflags());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Material::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Material* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Material*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Material::MergeFrom(const Material& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
    if (from.has_surfaceflags()) {
      set_surfaceflags(from.surfaceflags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Material::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Material::CopyFrom(const Material& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Material::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Material::Swap(Material* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(contents_, other->contents_);
    std::swap(surfaceflags_, other->surfaceflags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Material::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Material_descriptor_;
  metadata.reflection = Material_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scene::kRootNodeFieldNumber;
const int Scene::kMeshesFieldNumber;
const int Scene::kMaterialsFieldNumber;
#endif  // !_MSC_VER

Scene::Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:modeldata.Scene)
}

void Scene::InitAsDefaultInstance() {
  rootnode_ = const_cast< ::modeldata::Node*>(&::modeldata::Node::default_instance());
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:modeldata.Scene)
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  rootnode_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:modeldata.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != default_instance_) {
    delete rootnode_;
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_modeldata_2eproto();
  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New() const {
  return new Scene;
}

void Scene::Clear() {
  if (has_rootnode()) {
    if (rootnode_ != NULL) rootnode_->::modeldata::Node::Clear();
  }
  meshes_.Clear();
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:modeldata.Scene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .modeldata.Node rootNode = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rootnode()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_meshes;
        break;
      }

      // repeated .modeldata.Mesh meshes = 2;
      case 2: {
        if (tag == 18) {
         parse_meshes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meshes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_meshes;
        if (input->ExpectTag(26)) goto parse_materials;
        break;
      }

      // repeated .modeldata.Material materials = 3;
      case 3: {
        if (tag == 26) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_materials;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:modeldata.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:modeldata.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:modeldata.Scene)
  // required .modeldata.Node rootNode = 1;
  if (has_rootnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rootnode(), output);
  }

  // repeated .modeldata.Mesh meshes = 2;
  for (int i = 0; i < this->meshes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->meshes(i), output);
  }

  // repeated .modeldata.Material materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:modeldata.Scene)
}

::google::protobuf::uint8* Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:modeldata.Scene)
  // required .modeldata.Node rootNode = 1;
  if (has_rootnode()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rootnode(), target);
  }

  // repeated .modeldata.Mesh meshes = 2;
  for (int i = 0; i < this->meshes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->meshes(i), target);
  }

  // repeated .modeldata.Material materials = 3;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:modeldata.Scene)
  return target;
}

int Scene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .modeldata.Node rootNode = 1;
    if (has_rootnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rootnode());
    }

  }
  // repeated .modeldata.Mesh meshes = 2;
  total_size += 1 * this->meshes_size();
  for (int i = 0; i < this->meshes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meshes(i));
  }

  // repeated .modeldata.Material materials = 3;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  meshes_.MergeFrom(from.meshes_);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rootnode()) {
      mutable_rootnode()->::modeldata::Node::MergeFrom(from.rootnode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_rootnode()) {
    if (!this->rootnode().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->meshes())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->materials())) return false;
  return true;
}

void Scene::Swap(Scene* other) {
  if (other != this) {
    std::swap(rootnode_, other->rootnode_);
    meshes_.Swap(&other->meshes_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace modeldata

// @@protoc_insertion_point(global_scope)
