// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: analytics.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Analytics {

  public static class Extensions {
    public const int RediskeytypeFieldNumber = 5000;
    public const int RedishmsetkeyFieldNumber = 5001;
    public const int RediskeysuffixFieldNumber = 5002;
    public const int UseJsonEncodingFieldNumber = 5003;
    public const int ObjectnameFieldNumber = 5005;
    public const int EnumkeyFieldNumber = 4001;
    public const int EditableFieldNumber = 4002;
    public const int ExpiresFieldNumber = 4003;
    public const int EnumflagsFieldNumber = 4004;
    public const int TooltipFieldNumber = 4005;
    public const int HiddenFieldNumber = 4006;
    public const int EnumflagsindexedFieldNumber = 4007;
    public const int EditableKeyFieldNumber = 4008;
    public const int TrackEventFieldNumber = 4009;
    public const int PointEventFieldNumber = 4012;
    public const int LineEventFieldNumber = 4013;
  }
  /// <summary>Holder for reflection information generated from analytics.proto</summary>
  public static partial class AnalyticsReflection {

    #region Descriptor
    /// <summary>File descriptor for analytics.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnalyticsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hbmFseXRpY3MucHJvdG8SCUFuYWx5dGljcxogZ29vZ2xlL3Byb3RvYnVm",
            "L2Rlc2NyaXB0b3IucHJvdG8iLAoKUG9pbnRFdmVudBIOCgZyYWRpdXMYASAB",
            "KAkSDgoGd2VpZ2h0GAIgASgJIisKCUxpbmVFdmVudBIOCgZyYWRpdXMYASAB",
            "KAkSDgoGd2VpZ2h0GAIgASgJIkwKEUVkaXRvckNoYW5nZVZhbHVlEhMKC21l",
            "c3NhZ2VUeXBlGAEgASgJEhEKCWZpZWxkTmFtZRgCIAEoCRIPCgdwYXlsb2Fk",
            "GAMgASgJIj4KDUVkaXRvckNoYW5nZXMSLQoHY2hhbmdlcxgBIAMoCzIcLkFu",
            "YWx5dGljcy5FZGl0b3JDaGFuZ2VWYWx1ZSIiCgZSYW5nZUYSCwoDbWluGAEg",
            "ASgCEgsKA21heBgCIAEoAiIiCgZSYW5nZUkSCwoDbWluGAEgASgFEgsKA21h",
            "eBgCIAEoBSInCgRWZWMzEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMg",
            "ASgCIjsKCVZlYzNDb2xvchIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgD",
            "IAEoAhINCgVjb2xvchgEIAEoDSIyCgRWZWM0EgkKAXgYASABKAISCQoBeRgC",
            "IAEoAhIJCgF6GAMgASgCEgkKAXcYBCABKAIiQAoETGluZRIbCgJwMBgBIAEo",
            "CzIPLkFuYWx5dGljcy5WZWMzEhsKAnAxGAIgASgLMg8uQW5hbHl0aWNzLlZl",
            "YzMiNQoFRXVsZXISDwoHaGVhZGluZxgBIAEoAhINCgVwaXRjaBgCIAEoAhIM",
            "CgRyb2xsGAMgASgCIoQBCghNYXRlcmlhbBIMCgRuYW1lGAEgASgJEicKCGNv",
            "bnRlbnRzGAIgASgNQhWK+gENQ09OVEVOVF9GTEFHU6D6AQESKwoMc3VyZmFj",
            "ZUZsYWdzGAMgASgNQhWK+gENU1VSRkFDRV9GTEFHU6D6AQESFAoMcmVuZGVy",
            "RXZlbnRzGAQgASgIImQKEFByaW1pdGl2ZU9wdGlvbnMSFwoJcGFydEluZGV4",
            "GAEgASgNQgTA+gEBEjcKFG92ZXJyaWRlU3VyZmFjZUZsYWdzGAIgASgNQhmQ",
            "+gEBivoBDVNVUkZBQ0VfRkxBR1Og+gEBIq4BCglQcmltaXRpdmUSJgoEdHlw",
            "ZRgBIAEoDjIYLkFuYWx5dGljcy5QcmltaXRpdmVUeXBlEhUKDW1hdGVyaWFs",
            "SW5kZXgYAiABKA0SLAoHb3B0aW9ucxgDIAEoCzIbLkFuYWx5dGljcy5Qcmlt",
            "aXRpdmVPcHRpb25zEgwKBHNpemUYBCABKAISJgoIdmVydGljZXMYBSADKAsy",
            "FC5BbmFseXRpY3MuVmVjM0NvbG9yImYKBE1lc2gSKAoKcHJpbWl0aXZlcxgB",
            "IAMoCzIULkFuYWx5dGljcy5QcmltaXRpdmUSJgoJbWF0ZXJpYWxzGAIgAygL",
            "MhMuQW5hbHl0aWNzLk1hdGVyaWFsEgwKBG5hbWUYAyABKAkiYQoHVVRDVGlt",
            "ZRIMCgRob3VyGAEgASgFEg4KBm1pbnV0ZRgCIAEoBRIOCgZzZWNvbmQYAyAB",
            "KAUSCwoDZGF5GAQgASgFEg0KBW1vbnRoGAUgASgFEgwKBHllYXIYBiABKAUi",
            "cwoIR2FtZUluZm8SJQoJdGltZVN0YW1wGAEgASgLMhIuQW5hbHl0aWNzLlVU",
            "Q1RpbWUSDwoHbWFwTmFtZRgCIAEoCRIQCghnYW1lTmFtZRgDIAEoCRITCgtn",
            "YW1lVmVyc2lvbhgEIAEoCToIwLgCAdi4AgEimQEKCEdhbWVFbnVtEiwKBnZh",
            "bHVlcxgBIAMoCzIcLkFuYWx5dGljcy5HYW1lRW51bS5FbnVtUGFpchIQCghl",
            "bnVtbmFtZRgCIAEoCRISCgppc2JpdGZpZWxkGAMgASgIGicKCEVudW1QYWly",
            "EgwKBG5hbWUYASABKAkSDQoFdmFsdWUYAiABKAM6EMC4AgPKuAIIZW51bW5h",
            "bWUiKAoPR2FtZU5hdk5vdEZvdW5kEg8KB21hcE5hbWUYASABKAk6BMC4AgIi",
            "LgoVR2FtZU5hdkF1dG9Eb3dubG9hZGVkEg8KB21hcE5hbWUYASABKAk6BMC4",
            "AgIiQQoKR2FtZUFzc2VydBIRCgljb25kaXRpb24YASABKAkSDAoEZmlsZRgC",
            "IAEoCRIMCgRsaW5lGAMgASgFOgTAuAICIh8KCUdhbWVDcmFzaBIMCgRpbmZv",
            "GAEgASgJOgTAuAICIpkBCgxHYW1lTWVzaERhdGESLwoPY29tcHJlc3Npb25U",
            "eXBlGAEgASgOMhYuQW5hbHl0aWNzLkNvbXByZXNzaW9uEhEKCW1vZGVsTmFt",
            "ZRgCIAEoCRISCgptb2RlbEJ5dGVzGAMgASgMEh4KFm1vZGVsQnl0ZXNVbmNv",
            "bXByZXNzZWQYBCABKA06EcC4AgPKuAIJbW9kZWxOYW1lIrUGCg5HYW1lRW50",
            "aXR5SW5mbxISCgplbnRpdHlOYW1lGAEgASgJEhMKC2VudGl0eUluZGV4GAIg",
            "ASgFEhQKDGVudGl0eVNlcmlhbBgDIAEoBRIdCgdncm91cElkGAQgASgFQgyK",
            "+gEIR1JPVVBfSUQSHQoHY2xhc3NJZBgFIAEoBUIMivoBCENMQVNTX0lEEhkK",
            "BHRlYW0YBiABKAVCC4r6AQdURUFNX0lEEikKC2VudGl0eUZsYWdzGAcgASgD",
            "QhSK+gEMRU5USVRZX0ZMQUdTuPoBARIlCghjYXRlZ29yeRgIIAEoBUITivoB",
            "C0NBVEVHT1JZX0lEuPoBARIkCghwb3dlclVwcxgJIAEoBUISivoBClBPV0VS",
            "VVBfSUS4+gEBEh8KCG5hdkZsYWdzGAogASgDQg2K+gEJTkFWX0ZMQUdTEiwK",
            "DWV1bGVyUm90YXRpb24YCyABKAsyDy5BbmFseXRpY3MuVmVjM0IEsPoBARIn",
            "Cghwb3NpdGlvbhgMIAEoCzIPLkFuYWx5dGljcy5WZWMzQgSw+gEBEigKCWV5",
            "ZU9mZnNldBgNIAEoCzIPLkFuYWx5dGljcy5WZWMzQgSw+gEBEiUKBmV5ZURp",
            "chgOIAEoCzIPLkFuYWx5dGljcy5WZWMzQgSw+gEBEiEKBmhlYWx0aBgPIAEo",
            "CzIRLkFuYWx5dGljcy5SYW5nZUkSIAoFYXJtb3IYECABKAsyES5BbmFseXRp",
            "Y3MuUmFuZ2VJEiIKCWJvdW5kc01pbhgRIAEoCzIPLkFuYWx5dGljcy5WZWMz",
            "EiIKCWJvdW5kc01heBgSIAEoCzIPLkFuYWx5dGljcy5WZWMzEiwKBGFtbW8Y",
            "EyADKAsyHi5BbmFseXRpY3MuR2FtZUVudGl0eUluZm8uQW1tbxIWCgdkZWxl",
            "dGVkGOgHIAEoCEIEsPoBARo6CgRBbW1vEh8KCGFtbW9UeXBlGAEgASgNQg2K",
            "+gEJQU1NT19UWVBFEhEKCWFtbW9Db3VudBgCIAEoDTo7wLgCA8q4AgtlbnRp",
            "dHlJbmRleOq4AiRFbnRpdHkoJWVudGl0eUluZGV4JSAtICVlbnRpdHlOYW1l",
            "JSkibQoSR2FtZUVudGl0eVBvc2l0aW9uEjIKCHBvc2l0aW9uGAEgASgLMg8u",
            "QW5hbHl0aWNzLlZlYzNCD+L6AQQKAjMy4voBAxIBMRIdCgR0ZWFtGAIgASgF",
            "Qg+K+gEHVEVBTV9JRMj6AQE6BMC4AgIi2gIKCEdhbWVOb2RlEhYKCG5vZGVQ",
            "YXRoGAEgASgJQgTA+gEBEiYKDWV1bGVyUm90YXRpb24YAiABKAsyDy5BbmFs",
            "eXRpY3MuVmVjMxIkCgt0cmFuc2xhdGlvbhgDIAEoCzIPLkFuYWx5dGljcy5W",
            "ZWMzEhAKCG1lc2hOYW1lGAQgASgJEhAKCGVudGl0eUlkGAogASgFEhIKCmVu",
            "dGl0eU5hbWUYCyABKAkSJAoLYWN0aXZlU3RhdGUYDCABKAVCD4r6AQtNT0RF",
            "TF9TVEFURRIlCg5uYXZGbGFnc0FjdGl2ZRgNIAEoA0INivoBCU5BVl9GTEFH",
            "UxIrChBuYXZGbGFnc092ZXJyaWRlGA4gASgDQhGK+gEJTkFWX0ZMQUdTkPoB",
            "ARIkCglzaGFwZU1vZGUYDyABKAVCEYr6AQlTSEFQRU1PREWQ+gEBOhDAuAID",
            "yrgCCG5vZGVQYXRoIsEBCg9HYW1lV2VhcG9uRmlyZWQSMgoIcG9zaXRpb24Y",
            "ASABKAsyDy5BbmFseXRpY3MuVmVjM0IP4voBBAoCNjTi+gEDEgExEiMKCmF0",
            "dGFja1RlYW0YAiABKAVCD4r6AQdURUFNX0lEyPoBARIjCgh3ZWFwb25JZBgD",
            "IAEoBUIRivoBCVdFQVBPTl9JRMj6AQESJgoMZmlyZWRCeUNsYXNzGAQgASgF",
            "QhCK+gEIQ0xBU1NfSUTI+gEBOgjAuAIC2LgCASKrAQoJR2FtZURlYXRoEjIK",
            "CHBvc2l0aW9uGAEgASgLMg8uQW5hbHl0aWNzLlZlYzNCD+L6AQQKAjMy4voB",
            "AxIBMRIjCgp2aWN0aW1UZWFtGAIgASgFQg+K+gEHVEVBTV9JRMj6AQESIwoK",
            "YXR0YWNrVGVhbRgDIAEoBUIPivoBB1RFQU1fSUTI+gEBEhoKDG1lYW5zT2ZE",
            "ZWF0aBgEIAEoCUIEyPoBAToEwLgCAiKzAQoRR2FtZUtpbGxlZFNvbWVvbmUS",
            "MgoIcG9zaXRpb24YASABKAsyDy5BbmFseXRpY3MuVmVjM0IP4voBBAoCMzLi",
            "+gEDEgExEiMKCnZpY3RpbVRlYW0YAiABKAVCD4r6AQdURUFNX0lEyPoBARIj",
            "CgphdHRhY2tUZWFtGAMgASgFQg+K+gEHVEVBTV9JRMj6AQESGgoMbWVhbnNP",
            "ZkRlYXRoGAQgASgJQgTI+gEBOgTAuAICIvcBChFHYW1lUmVjaWV2ZURhbWFn",
            "ZRI9Cghwb3NpdGlvbhgBIAEoCzIPLkFuYWx5dGljcy5WZWMzQhri+gEECgIz",
            "MuL6AQ4SDGRhbWFnZUFtb3VudBIjCgp2aWN0aW1UZWFtGAIgASgFQg+K+gEH",
            "VEVBTV9JRMj6AQESIwoKYXR0YWNrVGVhbRgDIAEoBUIPivoBB1RFQU1fSUTI",
            "+gEBEiMKCHdlYXBvbklkGAQgASgFQhGK+gEJV0VBUE9OX0lEyPoBARIYCgpk",
            "YW1hZ2VUeXBlGAUgASgJQgTI+gEBEhQKDGRhbWFnZUFtb3VudBgGIAEoAjoE",
            "wLgCAiL3AQoRR2FtZUluZmxpY3REYW1hZ2USPQoIcG9zaXRpb24YASABKAsy",
            "Dy5BbmFseXRpY3MuVmVjM0Ia4voBBAoCMzLi+gEOEgxkYW1hZ2VBbW91bnQS",
            "IwoKdmljdGltVGVhbRgCIAEoBUIPivoBB1RFQU1fSUTI+gEBEiMKCmF0dGFj",
            "a1RlYW0YAyABKAVCD4r6AQdURUFNX0lEyPoBARIjCgh3ZWFwb25JZBgEIAEo",
            "BUIRivoBCVdFQVBPTl9JRMj6AQESGAoKZGFtYWdlVHlwZRgFIAEoCUIEyPoB",
            "ARIUCgxkYW1hZ2VBbW91bnQYBiABKAI6BMC4AgIipQEKEEdhbWVSYWRpdXNE",
            "YW1hZ2USRwoIcG9zaXRpb24YASABKAsyDy5BbmFseXRpY3MuVmVjM0Ik4voB",
            "DgoMZGFtYWdlUmFkaXVz4voBDhIMZGFtYWdlQW1vdW50EhIKCmRhbWFnZVR5",
            "cGUYAiABKAkSFAoMZGFtYWdlQW1vdW50GAMgASgCEhQKDGRhbWFnZVJhZGl1",
            "cxgEIAEoAjoIwLgCAti4AgEiYQoTR2FtZU5hdmlnYXRpb25TdHVjaxIQCghl",
            "bnRpdHlJZBgBIAEoBRIyCghwb3NpdGlvbhgCIAEoCzIPLkFuYWx5dGljcy5W",
            "ZWMzQg/i+gEECgIzMuL6AQMSATE6BMC4AgIihQEKDkdhbWVWb2ljZU1hY3Jv",
            "EhAKCGVudGl0eUlkGAEgASgFEicKCnZvaWNlTWFjcm8YAiABKAVCE4r6AQtW",
            "T0lDRV9NQUNST8j6AQESMgoIcG9zaXRpb24YAyABKAsyDy5BbmFseXRpY3Mu",
            "VmVjM0IP4voBBAoCMzLi+gEDEgExOgTAuAICImUKDkdhbWVMb2dNZXNzYWdl",
            "EiMKB2xvZ1R5cGUYASABKA4yEi5BbmFseXRpY3MuTG9nVHlwZRISCgpsb2dN",
            "ZXNzYWdlGAIgASgJEhQKDGxvZ0V4dHJhSW5mbxgDIAEoCToEwLgCAio6CgxS",
            "ZWRpc0tleVR5cGUSCwoHVU5LTk9XThAAEgcKA1NFVBABEgkKBVJQVVNIEAIS",
            "CQoFSE1TRVQQAyo/Cg1QcmltaXRpdmVUeXBlEg0KCVRyaWFuZ2xlcxAAEgkK",
            "BUxpbmVzEAESCgoGUG9pbnRzEAISCAoEUXVhZBADKjsKC0NvbXByZXNzaW9u",
            "EhQKEENvbXByZXNzaW9uX05vbmUQABIWChJDb21wcmVzc2lvbl9GYXN0TFoQ",
            "ASoqCgdMb2dUeXBlEgcKA0xvZxAAEgsKB1dhcm5pbmcQARIJCgVFcnJvchAD",
            "Ok8KDHJlZGlza2V5dHlwZRIfLmdvb2dsZS5wcm90b2J1Zi5NZXNzYWdlT3B0",
            "aW9ucxiIJyABKA4yFy5BbmFseXRpY3MuUmVkaXNLZXlUeXBlOjcKDXJlZGlz",
            "aG1zZXRrZXkSHy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYiScg",
            "ASgJOjgKDnJlZGlza2V5c3VmZml4Eh8uZ29vZ2xlLnByb3RvYnVmLk1lc3Nh",
            "Z2VPcHRpb25zGIonIAEoCTo5Cg91c2VKc29uRW5jb2RpbmcSHy5nb29nbGUu",
            "cHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYiycgASgIOjQKCm9iamVjdG5hbWUS",
            "Hy5nb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnMYjScgASgJOi8KB2Vu",
            "dW1rZXkSHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGKEfIAEoCTow",
            "CghlZGl0YWJsZRIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMYoh8g",
            "ASgIOi8KB2V4cGlyZXMSHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25z",
            "GKMfIAEoBToxCgllbnVtZmxhZ3MSHS5nb29nbGUucHJvdG9idWYuRmllbGRP",
            "cHRpb25zGKQfIAEoCDovCgd0b29sdGlwEh0uZ29vZ2xlLnByb3RvYnVmLkZp",
            "ZWxkT3B0aW9ucxilHyABKAg6LgoGaGlkZGVuEh0uZ29vZ2xlLnByb3RvYnVm",
            "LkZpZWxkT3B0aW9ucximHyABKAg6OAoQZW51bWZsYWdzaW5kZXhlZBIdLmdv",
            "b2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMYpx8gASgIOjQKDGVkaXRhYmxl",
            "X2tleRIdLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMYqB8gASgIOjMK",
            "C3RyYWNrX2V2ZW50Eh0uZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxip",
            "HyABKAg6SgoLcG9pbnRfZXZlbnQSHS5nb29nbGUucHJvdG9idWYuRmllbGRP",
            "cHRpb25zGKwfIAEoCzIVLkFuYWx5dGljcy5Qb2ludEV2ZW50OkgKCmxpbmVf",
            "ZXZlbnQSHS5nb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zGK0fIAEoCzIU",
            "LkFuYWx5dGljcy5MaW5lRXZlbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { pbr::FileDescriptor.DescriptorProtoFileDescriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Analytics.RedisKeyType), typeof(global::Analytics.PrimitiveType), typeof(global::Analytics.Compression), typeof(global::Analytics.LogType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.PointEvent), global::Analytics.PointEvent.Parser, new[]{ "Radius", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.LineEvent), global::Analytics.LineEvent.Parser, new[]{ "Radius", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.EditorChangeValue), global::Analytics.EditorChangeValue.Parser, new[]{ "MessageType", "FieldName", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.EditorChanges), global::Analytics.EditorChanges.Parser, new[]{ "Changes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.RangeF), global::Analytics.RangeF.Parser, new[]{ "Min", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.RangeI), global::Analytics.RangeI.Parser, new[]{ "Min", "Max" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Vec3), global::Analytics.Vec3.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Vec3Color), global::Analytics.Vec3Color.Parser, new[]{ "X", "Y", "Z", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Vec4), global::Analytics.Vec4.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Line), global::Analytics.Line.Parser, new[]{ "P0", "P1" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Euler), global::Analytics.Euler.Parser, new[]{ "Heading", "Pitch", "Roll" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Material), global::Analytics.Material.Parser, new[]{ "Name", "Contents", "SurfaceFlags", "RenderEvents" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.PrimitiveOptions), global::Analytics.PrimitiveOptions.Parser, new[]{ "PartIndex", "OverrideSurfaceFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Primitive), global::Analytics.Primitive.Parser, new[]{ "Type", "MaterialIndex", "Options", "Size", "Vertices" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.Mesh), global::Analytics.Mesh.Parser, new[]{ "Primitives", "Materials", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.UTCTime), global::Analytics.UTCTime.Parser, new[]{ "Hour", "Minute", "Second", "Day", "Month", "Year" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameInfo), global::Analytics.GameInfo.Parser, new[]{ "TimeStamp", "MapName", "GameName", "GameVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameEnum), global::Analytics.GameEnum.Parser, new[]{ "Values", "Enumname", "Isbitfield" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameEnum.Types.EnumPair), global::Analytics.GameEnum.Types.EnumPair.Parser, new[]{ "Name", "Value" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameNavNotFound), global::Analytics.GameNavNotFound.Parser, new[]{ "MapName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameNavAutoDownloaded), global::Analytics.GameNavAutoDownloaded.Parser, new[]{ "MapName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameAssert), global::Analytics.GameAssert.Parser, new[]{ "Condition", "File", "Line" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameCrash), global::Analytics.GameCrash.Parser, new[]{ "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameMeshData), global::Analytics.GameMeshData.Parser, new[]{ "CompressionType", "ModelName", "ModelBytes", "ModelBytesUncompressed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameEntityInfo), global::Analytics.GameEntityInfo.Parser, new[]{ "EntityName", "EntityIndex", "EntitySerial", "GroupId", "ClassId", "Team", "EntityFlags", "Category", "PowerUps", "NavFlags", "EulerRotation", "Position", "EyeOffset", "EyeDir", "Health", "Armor", "BoundsMin", "BoundsMax", "Ammo", "Deleted" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameEntityInfo.Types.Ammo), global::Analytics.GameEntityInfo.Types.Ammo.Parser, new[]{ "AmmoType", "AmmoCount" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameEntityPosition), global::Analytics.GameEntityPosition.Parser, new[]{ "Position", "Team" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameNode), global::Analytics.GameNode.Parser, new[]{ "NodePath", "EulerRotation", "Translation", "MeshName", "EntityId", "EntityName", "ActiveState", "NavFlagsActive", "NavFlagsOverride", "ShapeMode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameWeaponFired), global::Analytics.GameWeaponFired.Parser, new[]{ "Position", "AttackTeam", "WeaponId", "FiredByClass" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameDeath), global::Analytics.GameDeath.Parser, new[]{ "Position", "VictimTeam", "AttackTeam", "MeansOfDeath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameKilledSomeone), global::Analytics.GameKilledSomeone.Parser, new[]{ "Position", "VictimTeam", "AttackTeam", "MeansOfDeath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameRecieveDamage), global::Analytics.GameRecieveDamage.Parser, new[]{ "Position", "VictimTeam", "AttackTeam", "WeaponId", "DamageType", "DamageAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameInflictDamage), global::Analytics.GameInflictDamage.Parser, new[]{ "Position", "VictimTeam", "AttackTeam", "WeaponId", "DamageType", "DamageAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameRadiusDamage), global::Analytics.GameRadiusDamage.Parser, new[]{ "Position", "DamageType", "DamageAmount", "DamageRadius" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameNavigationStuck), global::Analytics.GameNavigationStuck.Parser, new[]{ "EntityId", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameVoiceMacro), global::Analytics.GameVoiceMacro.Parser, new[]{ "EntityId", "VoiceMacro", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analytics.GameLogMessage), global::Analytics.GameLogMessage.Parser, new[]{ "LogType", "LogMessage", "LogExtraInfo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RedisKeyType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("SET")] Set = 1,
    [pbr::OriginalName("RPUSH")] Rpush = 2,
    [pbr::OriginalName("HMSET")] Hmset = 3,
  }

  public enum PrimitiveType {
    [pbr::OriginalName("Triangles")] Triangles = 0,
    [pbr::OriginalName("Lines")] Lines = 1,
    [pbr::OriginalName("Points")] Points = 2,
    [pbr::OriginalName("Quad")] Quad = 3,
  }

  /// <summary>
  /// compression schemes may be utilized to reduce the size of certain message types
  /// </summary>
  public enum Compression {
    [pbr::OriginalName("Compression_None")] None = 0,
    [pbr::OriginalName("Compression_FastLZ")] FastLz = 1,
  }

  public enum LogType {
    [pbr::OriginalName("Log")] Log = 0,
    [pbr::OriginalName("Warning")] Warning = 1,
    [pbr::OriginalName("Error")] Error = 3,
  }

  #endregion

  #region Messages
  public sealed partial class PointEvent : pb::IMessage<PointEvent> {
    private static readonly pb::MessageParser<PointEvent> _parser = new pb::MessageParser<PointEvent>(() => new PointEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PointEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointEvent(PointEvent other) : this() {
      radius_ = other.radius_;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PointEvent Clone() {
      return new PointEvent(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private string radius_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Radius {
      get { return radius_; }
      set {
        radius_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private string weight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Weight {
      get { return weight_; }
      set {
        weight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PointEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PointEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius.Length != 0) hash ^= Radius.GetHashCode();
      if (Weight.Length != 0) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Radius);
      }
      if (Weight.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Radius);
      }
      if (Weight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PointEvent other) {
      if (other == null) {
        return;
      }
      if (other.Radius.Length != 0) {
        Radius = other.Radius;
      }
      if (other.Weight.Length != 0) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Radius = input.ReadString();
            break;
          }
          case 18: {
            Weight = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LineEvent : pb::IMessage<LineEvent> {
    private static readonly pb::MessageParser<LineEvent> _parser = new pb::MessageParser<LineEvent>(() => new LineEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LineEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineEvent(LineEvent other) : this() {
      radius_ = other.radius_;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LineEvent Clone() {
      return new LineEvent(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private string radius_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Radius {
      get { return radius_; }
      set {
        radius_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private string weight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Weight {
      get { return weight_; }
      set {
        weight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LineEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LineEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Radius != other.Radius) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius.Length != 0) hash ^= Radius.GetHashCode();
      if (Weight.Length != 0) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Radius);
      }
      if (Weight.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Radius);
      }
      if (Weight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LineEvent other) {
      if (other == null) {
        return;
      }
      if (other.Radius.Length != 0) {
        Radius = other.Radius;
      }
      if (other.Weight.Length != 0) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Radius = input.ReadString();
            break;
          }
          case 18: {
            Weight = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditorChangeValue : pb::IMessage<EditorChangeValue> {
    private static readonly pb::MessageParser<EditorChangeValue> _parser = new pb::MessageParser<EditorChangeValue>(() => new EditorChangeValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditorChangeValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorChangeValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorChangeValue(EditorChangeValue other) : this() {
      messageType_ = other.messageType_;
      fieldName_ = other.fieldName_;
      payload_ = other.payload_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorChangeValue Clone() {
      return new EditorChangeValue(this);
    }

    /// <summary>Field number for the "messageType" field.</summary>
    public const int MessageTypeFieldNumber = 1;
    private string messageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageType {
      get { return messageType_; }
      set {
        messageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fieldName" field.</summary>
    public const int FieldNameFieldNumber = 2;
    private string fieldName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FieldName {
      get { return fieldName_; }
      set {
        fieldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 3;
    private string payload_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Payload {
      get { return payload_; }
      set {
        payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditorChangeValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditorChangeValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageType != other.MessageType) return false;
      if (FieldName != other.FieldName) return false;
      if (Payload != other.Payload) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageType.Length != 0) hash ^= MessageType.GetHashCode();
      if (FieldName.Length != 0) hash ^= FieldName.GetHashCode();
      if (Payload.Length != 0) hash ^= Payload.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageType);
      }
      if (FieldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FieldName);
      }
      if (Payload.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Payload);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageType);
      }
      if (FieldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FieldName);
      }
      if (Payload.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Payload);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditorChangeValue other) {
      if (other == null) {
        return;
      }
      if (other.MessageType.Length != 0) {
        MessageType = other.MessageType;
      }
      if (other.FieldName.Length != 0) {
        FieldName = other.FieldName;
      }
      if (other.Payload.Length != 0) {
        Payload = other.Payload;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MessageType = input.ReadString();
            break;
          }
          case 18: {
            FieldName = input.ReadString();
            break;
          }
          case 26: {
            Payload = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditorChanges : pb::IMessage<EditorChanges> {
    private static readonly pb::MessageParser<EditorChanges> _parser = new pb::MessageParser<EditorChanges>(() => new EditorChanges());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditorChanges> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorChanges() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorChanges(EditorChanges other) : this() {
      changes_ = other.changes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditorChanges Clone() {
      return new EditorChanges(this);
    }

    /// <summary>Field number for the "changes" field.</summary>
    public const int ChangesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Analytics.EditorChangeValue> _repeated_changes_codec
        = pb::FieldCodec.ForMessage(10, global::Analytics.EditorChangeValue.Parser);
    private readonly pbc::RepeatedField<global::Analytics.EditorChangeValue> changes_ = new pbc::RepeatedField<global::Analytics.EditorChangeValue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Analytics.EditorChangeValue> Changes {
      get { return changes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditorChanges);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditorChanges other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!changes_.Equals(other.changes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= changes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      changes_.WriteTo(output, _repeated_changes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += changes_.CalculateSize(_repeated_changes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditorChanges other) {
      if (other == null) {
        return;
      }
      changes_.Add(other.changes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            changes_.AddEntriesFrom(input, _repeated_changes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RangeF : pb::IMessage<RangeF> {
    private static readonly pb::MessageParser<RangeF> _parser = new pb::MessageParser<RangeF>(() => new RangeF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeF(RangeF other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeF Clone() {
      return new RangeF(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private float min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private float max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Max, other.Max)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Min);
      if (Max != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Max);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeF other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Min = input.ReadFloat();
            break;
          }
          case 21: {
            Max = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RangeI : pb::IMessage<RangeI> {
    private static readonly pb::MessageParser<RangeI> _parser = new pb::MessageParser<RangeI>(() => new RangeI());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RangeI> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeI() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeI(RangeI other) : this() {
      min_ = other.min_;
      max_ = other.max_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RangeI Clone() {
      return new RangeI(this);
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 1;
    private int min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 2;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RangeI);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RangeI other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Min != other.Min) return false;
      if (Max != other.Max) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Min != 0) hash ^= Min.GetHashCode();
      if (Max != 0) hash ^= Max.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Min != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Min);
      }
      if (Max != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Max);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Min != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Min);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RangeI other) {
      if (other == null) {
        return;
      }
      if (other.Min != 0) {
        Min = other.Min;
      }
      if (other.Max != 0) {
        Max = other.Max;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Min = input.ReadInt32();
            break;
          }
          case 16: {
            Max = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3 : pb::IMessage<Vec3> {
    private static readonly pb::MessageParser<Vec3> _parser = new pb::MessageParser<Vec3>(() => new Vec3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3(Vec3 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3 Clone() {
      return new Vec3(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3Color : pb::IMessage<Vec3Color> {
    private static readonly pb::MessageParser<Vec3Color> _parser = new pb::MessageParser<Vec3Color>(() => new Vec3Color());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3Color> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Color() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Color(Vec3Color other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      color_ = other.color_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Color Clone() {
      return new Vec3Color(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 4;
    private uint color_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3Color);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3Color other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (Color != other.Color) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (Color != 0) hash ^= Color.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Color != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Color);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Color != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Color);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3Color other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Color != 0) {
        Color = other.Color;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 32: {
            Color = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec4 : pb::IMessage<Vec4> {
    private static readonly pb::MessageParser<Vec4> _parser = new pb::MessageParser<Vec4>(() => new Vec4());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec4> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4(Vec4 other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      w_ = other.w_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec4 Clone() {
      return new Vec4(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec4);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec4 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (W != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(W);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec4 other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            W = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Line : pb::IMessage<Line> {
    private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Line> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line(Line other) : this() {
      p0_ = other.p0_ != null ? other.p0_.Clone() : null;
      p1_ = other.p1_ != null ? other.p1_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Line Clone() {
      return new Line(this);
    }

    /// <summary>Field number for the "p0" field.</summary>
    public const int P0FieldNumber = 1;
    private global::Analytics.Vec3 p0_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 P0 {
      get { return p0_; }
      set {
        p0_ = value;
      }
    }

    /// <summary>Field number for the "p1" field.</summary>
    public const int P1FieldNumber = 2;
    private global::Analytics.Vec3 p1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 P1 {
      get { return p1_; }
      set {
        p1_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Line);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Line other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(P0, other.P0)) return false;
      if (!object.Equals(P1, other.P1)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (p0_ != null) hash ^= P0.GetHashCode();
      if (p1_ != null) hash ^= P1.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (p0_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(P0);
      }
      if (p1_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(P1);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (p0_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P0);
      }
      if (p1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(P1);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Line other) {
      if (other == null) {
        return;
      }
      if (other.p0_ != null) {
        if (p0_ == null) {
          P0 = new global::Analytics.Vec3();
        }
        P0.MergeFrom(other.P0);
      }
      if (other.p1_ != null) {
        if (p1_ == null) {
          P1 = new global::Analytics.Vec3();
        }
        P1.MergeFrom(other.P1);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (p0_ == null) {
              P0 = new global::Analytics.Vec3();
            }
            input.ReadMessage(P0);
            break;
          }
          case 18: {
            if (p1_ == null) {
              P1 = new global::Analytics.Vec3();
            }
            input.ReadMessage(P1);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Euler : pb::IMessage<Euler> {
    private static readonly pb::MessageParser<Euler> _parser = new pb::MessageParser<Euler>(() => new Euler());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Euler> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Euler() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Euler(Euler other) : this() {
      heading_ = other.heading_;
      pitch_ = other.pitch_;
      roll_ = other.roll_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Euler Clone() {
      return new Euler(this);
    }

    /// <summary>Field number for the "heading" field.</summary>
    public const int HeadingFieldNumber = 1;
    private float heading_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Heading {
      get { return heading_; }
      set {
        heading_ = value;
      }
    }

    /// <summary>Field number for the "pitch" field.</summary>
    public const int PitchFieldNumber = 2;
    private float pitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Pitch {
      get { return pitch_; }
      set {
        pitch_ = value;
      }
    }

    /// <summary>Field number for the "roll" field.</summary>
    public const int RollFieldNumber = 3;
    private float roll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Roll {
      get { return roll_; }
      set {
        roll_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Euler);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Euler other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Heading, other.Heading)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Pitch, other.Pitch)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Roll, other.Roll)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Heading != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Heading);
      if (Pitch != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Pitch);
      if (Roll != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Roll);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Heading != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Heading);
      }
      if (Pitch != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Pitch);
      }
      if (Roll != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Roll);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Heading != 0F) {
        size += 1 + 4;
      }
      if (Pitch != 0F) {
        size += 1 + 4;
      }
      if (Roll != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Euler other) {
      if (other == null) {
        return;
      }
      if (other.Heading != 0F) {
        Heading = other.Heading;
      }
      if (other.Pitch != 0F) {
        Pitch = other.Pitch;
      }
      if (other.Roll != 0F) {
        Roll = other.Roll;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Heading = input.ReadFloat();
            break;
          }
          case 21: {
            Pitch = input.ReadFloat();
            break;
          }
          case 29: {
            Roll = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Material : pb::IMessage<Material> {
    private static readonly pb::MessageParser<Material> _parser = new pb::MessageParser<Material>(() => new Material());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Material> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material(Material other) : this() {
      name_ = other.name_;
      contents_ = other.contents_;
      surfaceFlags_ = other.surfaceFlags_;
      renderEvents_ = other.renderEvents_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Material Clone() {
      return new Material(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contents" field.</summary>
    public const int ContentsFieldNumber = 2;
    private uint contents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Contents {
      get { return contents_; }
      set {
        contents_ = value;
      }
    }

    /// <summary>Field number for the "surfaceFlags" field.</summary>
    public const int SurfaceFlagsFieldNumber = 3;
    private uint surfaceFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SurfaceFlags {
      get { return surfaceFlags_; }
      set {
        surfaceFlags_ = value;
      }
    }

    /// <summary>Field number for the "renderEvents" field.</summary>
    public const int RenderEventsFieldNumber = 4;
    private bool renderEvents_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderEvents {
      get { return renderEvents_; }
      set {
        renderEvents_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Material);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Material other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Contents != other.Contents) return false;
      if (SurfaceFlags != other.SurfaceFlags) return false;
      if (RenderEvents != other.RenderEvents) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Contents != 0) hash ^= Contents.GetHashCode();
      if (SurfaceFlags != 0) hash ^= SurfaceFlags.GetHashCode();
      if (RenderEvents != false) hash ^= RenderEvents.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Contents != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Contents);
      }
      if (SurfaceFlags != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SurfaceFlags);
      }
      if (RenderEvents != false) {
        output.WriteRawTag(32);
        output.WriteBool(RenderEvents);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Contents != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Contents);
      }
      if (SurfaceFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SurfaceFlags);
      }
      if (RenderEvents != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Material other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Contents != 0) {
        Contents = other.Contents;
      }
      if (other.SurfaceFlags != 0) {
        SurfaceFlags = other.SurfaceFlags;
      }
      if (other.RenderEvents != false) {
        RenderEvents = other.RenderEvents;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Contents = input.ReadUInt32();
            break;
          }
          case 24: {
            SurfaceFlags = input.ReadUInt32();
            break;
          }
          case 32: {
            RenderEvents = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PrimitiveOptions : pb::IMessage<PrimitiveOptions> {
    private static readonly pb::MessageParser<PrimitiveOptions> _parser = new pb::MessageParser<PrimitiveOptions>(() => new PrimitiveOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PrimitiveOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveOptions(PrimitiveOptions other) : this() {
      partIndex_ = other.partIndex_;
      overrideSurfaceFlags_ = other.overrideSurfaceFlags_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PrimitiveOptions Clone() {
      return new PrimitiveOptions(this);
    }

    /// <summary>Field number for the "partIndex" field.</summary>
    public const int PartIndexFieldNumber = 1;
    private uint partIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartIndex {
      get { return partIndex_; }
      set {
        partIndex_ = value;
      }
    }

    /// <summary>Field number for the "overrideSurfaceFlags" field.</summary>
    public const int OverrideSurfaceFlagsFieldNumber = 2;
    private uint overrideSurfaceFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OverrideSurfaceFlags {
      get { return overrideSurfaceFlags_; }
      set {
        overrideSurfaceFlags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PrimitiveOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PrimitiveOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PartIndex != other.PartIndex) return false;
      if (OverrideSurfaceFlags != other.OverrideSurfaceFlags) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PartIndex != 0) hash ^= PartIndex.GetHashCode();
      if (OverrideSurfaceFlags != 0) hash ^= OverrideSurfaceFlags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PartIndex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PartIndex);
      }
      if (OverrideSurfaceFlags != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OverrideSurfaceFlags);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PartIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartIndex);
      }
      if (OverrideSurfaceFlags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OverrideSurfaceFlags);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PrimitiveOptions other) {
      if (other == null) {
        return;
      }
      if (other.PartIndex != 0) {
        PartIndex = other.PartIndex;
      }
      if (other.OverrideSurfaceFlags != 0) {
        OverrideSurfaceFlags = other.OverrideSurfaceFlags;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PartIndex = input.ReadUInt32();
            break;
          }
          case 16: {
            OverrideSurfaceFlags = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Primitive : pb::IMessage<Primitive> {
    private static readonly pb::MessageParser<Primitive> _parser = new pb::MessageParser<Primitive>(() => new Primitive());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Primitive> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Primitive() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Primitive(Primitive other) : this() {
      type_ = other.type_;
      materialIndex_ = other.materialIndex_;
      options_ = other.options_ != null ? other.options_.Clone() : null;
      size_ = other.size_;
      vertices_ = other.vertices_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Primitive Clone() {
      return new Primitive(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Analytics.PrimitiveType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.PrimitiveType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "materialIndex" field.</summary>
    public const int MaterialIndexFieldNumber = 2;
    private uint materialIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaterialIndex {
      get { return materialIndex_; }
      set {
        materialIndex_ = value;
      }
    }

    /// <summary>Field number for the "options" field.</summary>
    public const int OptionsFieldNumber = 3;
    private global::Analytics.PrimitiveOptions options_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.PrimitiveOptions Options {
      get { return options_; }
      set {
        options_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 4;
    private float size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "vertices" field.</summary>
    public const int VerticesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Analytics.Vec3Color> _repeated_vertices_codec
        = pb::FieldCodec.ForMessage(42, global::Analytics.Vec3Color.Parser);
    private readonly pbc::RepeatedField<global::Analytics.Vec3Color> vertices_ = new pbc::RepeatedField<global::Analytics.Vec3Color>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Analytics.Vec3Color> Vertices {
      get { return vertices_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Primitive);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Primitive other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (MaterialIndex != other.MaterialIndex) return false;
      if (!object.Equals(Options, other.Options)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Size, other.Size)) return false;
      if(!vertices_.Equals(other.vertices_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (MaterialIndex != 0) hash ^= MaterialIndex.GetHashCode();
      if (options_ != null) hash ^= Options.GetHashCode();
      if (Size != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Size);
      hash ^= vertices_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (MaterialIndex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(MaterialIndex);
      }
      if (options_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Options);
      }
      if (Size != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Size);
      }
      vertices_.WriteTo(output, _repeated_vertices_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (MaterialIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaterialIndex);
      }
      if (options_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Options);
      }
      if (Size != 0F) {
        size += 1 + 4;
      }
      size += vertices_.CalculateSize(_repeated_vertices_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Primitive other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.MaterialIndex != 0) {
        MaterialIndex = other.MaterialIndex;
      }
      if (other.options_ != null) {
        if (options_ == null) {
          Options = new global::Analytics.PrimitiveOptions();
        }
        Options.MergeFrom(other.Options);
      }
      if (other.Size != 0F) {
        Size = other.Size;
      }
      vertices_.Add(other.vertices_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Analytics.PrimitiveType) input.ReadEnum();
            break;
          }
          case 16: {
            MaterialIndex = input.ReadUInt32();
            break;
          }
          case 26: {
            if (options_ == null) {
              Options = new global::Analytics.PrimitiveOptions();
            }
            input.ReadMessage(Options);
            break;
          }
          case 37: {
            Size = input.ReadFloat();
            break;
          }
          case 42: {
            vertices_.AddEntriesFrom(input, _repeated_vertices_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mesh : pb::IMessage<Mesh> {
    private static readonly pb::MessageParser<Mesh> _parser = new pb::MessageParser<Mesh>(() => new Mesh());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mesh> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh(Mesh other) : this() {
      primitives_ = other.primitives_.Clone();
      materials_ = other.materials_.Clone();
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mesh Clone() {
      return new Mesh(this);
    }

    /// <summary>Field number for the "primitives" field.</summary>
    public const int PrimitivesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Analytics.Primitive> _repeated_primitives_codec
        = pb::FieldCodec.ForMessage(10, global::Analytics.Primitive.Parser);
    private readonly pbc::RepeatedField<global::Analytics.Primitive> primitives_ = new pbc::RepeatedField<global::Analytics.Primitive>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Analytics.Primitive> Primitives {
      get { return primitives_; }
    }

    /// <summary>Field number for the "materials" field.</summary>
    public const int MaterialsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Analytics.Material> _repeated_materials_codec
        = pb::FieldCodec.ForMessage(18, global::Analytics.Material.Parser);
    private readonly pbc::RepeatedField<global::Analytics.Material> materials_ = new pbc::RepeatedField<global::Analytics.Material>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Analytics.Material> Materials {
      get { return materials_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mesh);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mesh other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!primitives_.Equals(other.primitives_)) return false;
      if(!materials_.Equals(other.materials_)) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= primitives_.GetHashCode();
      hash ^= materials_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      primitives_.WriteTo(output, _repeated_primitives_codec);
      materials_.WriteTo(output, _repeated_materials_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += primitives_.CalculateSize(_repeated_primitives_codec);
      size += materials_.CalculateSize(_repeated_materials_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mesh other) {
      if (other == null) {
        return;
      }
      primitives_.Add(other.primitives_);
      materials_.Add(other.materials_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            primitives_.AddEntriesFrom(input, _repeated_primitives_codec);
            break;
          }
          case 18: {
            materials_.AddEntriesFrom(input, _repeated_materials_codec);
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UTCTime : pb::IMessage<UTCTime> {
    private static readonly pb::MessageParser<UTCTime> _parser = new pb::MessageParser<UTCTime>(() => new UTCTime());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UTCTime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UTCTime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UTCTime(UTCTime other) : this() {
      hour_ = other.hour_;
      minute_ = other.minute_;
      second_ = other.second_;
      day_ = other.day_;
      month_ = other.month_;
      year_ = other.year_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UTCTime Clone() {
      return new UTCTime(this);
    }

    /// <summary>Field number for the "hour" field.</summary>
    public const int HourFieldNumber = 1;
    private int hour_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hour {
      get { return hour_; }
      set {
        hour_ = value;
      }
    }

    /// <summary>Field number for the "minute" field.</summary>
    public const int MinuteFieldNumber = 2;
    private int minute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Minute {
      get { return minute_; }
      set {
        minute_ = value;
      }
    }

    /// <summary>Field number for the "second" field.</summary>
    public const int SecondFieldNumber = 3;
    private int second_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Second {
      get { return second_; }
      set {
        second_ = value;
      }
    }

    /// <summary>Field number for the "day" field.</summary>
    public const int DayFieldNumber = 4;
    private int day_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Day {
      get { return day_; }
      set {
        day_ = value;
      }
    }

    /// <summary>Field number for the "month" field.</summary>
    public const int MonthFieldNumber = 5;
    private int month_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Month {
      get { return month_; }
      set {
        month_ = value;
      }
    }

    /// <summary>Field number for the "year" field.</summary>
    public const int YearFieldNumber = 6;
    private int year_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Year {
      get { return year_; }
      set {
        year_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UTCTime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UTCTime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hour != other.Hour) return false;
      if (Minute != other.Minute) return false;
      if (Second != other.Second) return false;
      if (Day != other.Day) return false;
      if (Month != other.Month) return false;
      if (Year != other.Year) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hour != 0) hash ^= Hour.GetHashCode();
      if (Minute != 0) hash ^= Minute.GetHashCode();
      if (Second != 0) hash ^= Second.GetHashCode();
      if (Day != 0) hash ^= Day.GetHashCode();
      if (Month != 0) hash ^= Month.GetHashCode();
      if (Year != 0) hash ^= Year.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hour != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Hour);
      }
      if (Minute != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Minute);
      }
      if (Second != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Second);
      }
      if (Day != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Day);
      }
      if (Month != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Month);
      }
      if (Year != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Year);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hour);
      }
      if (Minute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minute);
      }
      if (Second != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Second);
      }
      if (Day != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
      }
      if (Month != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Month);
      }
      if (Year != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Year);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UTCTime other) {
      if (other == null) {
        return;
      }
      if (other.Hour != 0) {
        Hour = other.Hour;
      }
      if (other.Minute != 0) {
        Minute = other.Minute;
      }
      if (other.Second != 0) {
        Second = other.Second;
      }
      if (other.Day != 0) {
        Day = other.Day;
      }
      if (other.Month != 0) {
        Month = other.Month;
      }
      if (other.Year != 0) {
        Year = other.Year;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Hour = input.ReadInt32();
            break;
          }
          case 16: {
            Minute = input.ReadInt32();
            break;
          }
          case 24: {
            Second = input.ReadInt32();
            break;
          }
          case 32: {
            Day = input.ReadInt32();
            break;
          }
          case 40: {
            Month = input.ReadInt32();
            break;
          }
          case 48: {
            Year = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameInfo : pb::IMessage<GameInfo> {
    private static readonly pb::MessageParser<GameInfo> _parser = new pb::MessageParser<GameInfo>(() => new GameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo(GameInfo other) : this() {
      timeStamp_ = other.timeStamp_ != null ? other.timeStamp_.Clone() : null;
      mapName_ = other.mapName_;
      gameName_ = other.gameName_;
      gameVersion_ = other.gameVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInfo Clone() {
      return new GameInfo(this);
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 1;
    private global::Analytics.UTCTime timeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.UTCTime TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = value;
      }
    }

    /// <summary>Field number for the "mapName" field.</summary>
    public const int MapNameFieldNumber = 2;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameName" field.</summary>
    public const int GameNameFieldNumber = 3;
    private string gameName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameName {
      get { return gameName_; }
      set {
        gameName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gameVersion" field.</summary>
    public const int GameVersionFieldNumber = 4;
    private string gameVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GameVersion {
      get { return gameVersion_; }
      set {
        gameVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimeStamp, other.TimeStamp)) return false;
      if (MapName != other.MapName) return false;
      if (GameName != other.GameName) return false;
      if (GameVersion != other.GameVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timeStamp_ != null) hash ^= TimeStamp.GetHashCode();
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (GameName.Length != 0) hash ^= GameName.GetHashCode();
      if (GameVersion.Length != 0) hash ^= GameVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timeStamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeStamp);
      }
      if (MapName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(MapName);
      }
      if (GameName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GameName);
      }
      if (GameVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(GameVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timeStamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeStamp);
      }
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (GameName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameName);
      }
      if (GameVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GameVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInfo other) {
      if (other == null) {
        return;
      }
      if (other.timeStamp_ != null) {
        if (timeStamp_ == null) {
          TimeStamp = new global::Analytics.UTCTime();
        }
        TimeStamp.MergeFrom(other.TimeStamp);
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      if (other.GameName.Length != 0) {
        GameName = other.GameName;
      }
      if (other.GameVersion.Length != 0) {
        GameVersion = other.GameVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeStamp_ == null) {
              TimeStamp = new global::Analytics.UTCTime();
            }
            input.ReadMessage(TimeStamp);
            break;
          }
          case 18: {
            MapName = input.ReadString();
            break;
          }
          case 26: {
            GameName = input.ReadString();
            break;
          }
          case 34: {
            GameVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEnum : pb::IMessage<GameEnum> {
    private static readonly pb::MessageParser<GameEnum> _parser = new pb::MessageParser<GameEnum>(() => new GameEnum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEnum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnum(GameEnum other) : this() {
      values_ = other.values_.Clone();
      enumname_ = other.enumname_;
      isbitfield_ = other.isbitfield_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEnum Clone() {
      return new GameEnum(this);
    }

    /// <summary>Field number for the "values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Analytics.GameEnum.Types.EnumPair> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::Analytics.GameEnum.Types.EnumPair.Parser);
    private readonly pbc::RepeatedField<global::Analytics.GameEnum.Types.EnumPair> values_ = new pbc::RepeatedField<global::Analytics.GameEnum.Types.EnumPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Analytics.GameEnum.Types.EnumPair> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "enumname" field.</summary>
    public const int EnumnameFieldNumber = 2;
    private string enumname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Enumname {
      get { return enumname_; }
      set {
        enumname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isbitfield" field.</summary>
    public const int IsbitfieldFieldNumber = 3;
    private bool isbitfield_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Isbitfield {
      get { return isbitfield_; }
      set {
        isbitfield_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEnum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEnum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (Enumname != other.Enumname) return false;
      if (Isbitfield != other.Isbitfield) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (Enumname.Length != 0) hash ^= Enumname.GetHashCode();
      if (Isbitfield != false) hash ^= Isbitfield.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (Enumname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Enumname);
      }
      if (Isbitfield != false) {
        output.WriteRawTag(24);
        output.WriteBool(Isbitfield);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (Enumname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Enumname);
      }
      if (Isbitfield != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEnum other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.Enumname.Length != 0) {
        Enumname = other.Enumname;
      }
      if (other.Isbitfield != false) {
        Isbitfield = other.Isbitfield;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 18: {
            Enumname = input.ReadString();
            break;
          }
          case 24: {
            Isbitfield = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameEnum message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EnumPair : pb::IMessage<EnumPair> {
        private static readonly pb::MessageParser<EnumPair> _parser = new pb::MessageParser<EnumPair>(() => new EnumPair());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EnumPair> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Analytics.GameEnum.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumPair() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumPair(EnumPair other) : this() {
          name_ = other.name_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EnumPair Clone() {
          return new EnumPair(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 2;
        private long value_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long Value {
          get { return value_; }
          set {
            value_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EnumPair);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EnumPair other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Value != 0L) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Value != 0L) {
            output.WriteRawTag(16);
            output.WriteInt64(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Value != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EnumPair other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Value != 0L) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Value = input.ReadInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GameNavNotFound : pb::IMessage<GameNavNotFound> {
    private static readonly pb::MessageParser<GameNavNotFound> _parser = new pb::MessageParser<GameNavNotFound>(() => new GameNavNotFound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNavNotFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavNotFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavNotFound(GameNavNotFound other) : this() {
      mapName_ = other.mapName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavNotFound Clone() {
      return new GameNavNotFound(this);
    }

    /// <summary>Field number for the "mapName" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNavNotFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNavNotFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNavNotFound other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameNavAutoDownloaded : pb::IMessage<GameNavAutoDownloaded> {
    private static readonly pb::MessageParser<GameNavAutoDownloaded> _parser = new pb::MessageParser<GameNavAutoDownloaded>(() => new GameNavAutoDownloaded());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNavAutoDownloaded> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavAutoDownloaded() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavAutoDownloaded(GameNavAutoDownloaded other) : this() {
      mapName_ = other.mapName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavAutoDownloaded Clone() {
      return new GameNavAutoDownloaded(this);
    }

    /// <summary>Field number for the "mapName" field.</summary>
    public const int MapNameFieldNumber = 1;
    private string mapName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MapName {
      get { return mapName_; }
      set {
        mapName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNavAutoDownloaded);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNavAutoDownloaded other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MapName != other.MapName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MapName.Length != 0) hash ^= MapName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MapName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MapName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MapName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MapName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNavAutoDownloaded other) {
      if (other == null) {
        return;
      }
      if (other.MapName.Length != 0) {
        MapName = other.MapName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            MapName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameAssert : pb::IMessage<GameAssert> {
    private static readonly pb::MessageParser<GameAssert> _parser = new pb::MessageParser<GameAssert>(() => new GameAssert());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameAssert> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAssert() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAssert(GameAssert other) : this() {
      condition_ = other.condition_;
      file_ = other.file_;
      line_ = other.line_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameAssert Clone() {
      return new GameAssert(this);
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 1;
    private string condition_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Condition {
      get { return condition_; }
      set {
        condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "file" field.</summary>
    public const int FileFieldNumber = 2;
    private string file_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string File {
      get { return file_; }
      set {
        file_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 3;
    private int line_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameAssert);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameAssert other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Condition != other.Condition) return false;
      if (File != other.File) return false;
      if (Line != other.Line) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Condition.Length != 0) hash ^= Condition.GetHashCode();
      if (File.Length != 0) hash ^= File.GetHashCode();
      if (Line != 0) hash ^= Line.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Condition.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Condition);
      }
      if (File.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(File);
      }
      if (Line != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Line);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Condition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
      }
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameAssert other) {
      if (other == null) {
        return;
      }
      if (other.Condition.Length != 0) {
        Condition = other.Condition;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Condition = input.ReadString();
            break;
          }
          case 18: {
            File = input.ReadString();
            break;
          }
          case 24: {
            Line = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameCrash : pb::IMessage<GameCrash> {
    private static readonly pb::MessageParser<GameCrash> _parser = new pb::MessageParser<GameCrash>(() => new GameCrash());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameCrash> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCrash() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCrash(GameCrash other) : this() {
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameCrash Clone() {
      return new GameCrash(this);
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 1;
    private string info_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameCrash);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameCrash other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameCrash other) {
      if (other == null) {
        return;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameMeshData : pb::IMessage<GameMeshData> {
    private static readonly pb::MessageParser<GameMeshData> _parser = new pb::MessageParser<GameMeshData>(() => new GameMeshData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameMeshData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMeshData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMeshData(GameMeshData other) : this() {
      compressionType_ = other.compressionType_;
      modelName_ = other.modelName_;
      modelBytes_ = other.modelBytes_;
      modelBytesUncompressed_ = other.modelBytesUncompressed_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameMeshData Clone() {
      return new GameMeshData(this);
    }

    /// <summary>Field number for the "compressionType" field.</summary>
    public const int CompressionTypeFieldNumber = 1;
    private global::Analytics.Compression compressionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Compression CompressionType {
      get { return compressionType_; }
      set {
        compressionType_ = value;
      }
    }

    /// <summary>Field number for the "modelName" field.</summary>
    public const int ModelNameFieldNumber = 2;
    private string modelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ModelName {
      get { return modelName_; }
      set {
        modelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modelBytes" field.</summary>
    public const int ModelBytesFieldNumber = 3;
    private pb::ByteString modelBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ModelBytes {
      get { return modelBytes_; }
      set {
        modelBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "modelBytesUncompressed" field.</summary>
    public const int ModelBytesUncompressedFieldNumber = 4;
    private uint modelBytesUncompressed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ModelBytesUncompressed {
      get { return modelBytesUncompressed_; }
      set {
        modelBytesUncompressed_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameMeshData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameMeshData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CompressionType != other.CompressionType) return false;
      if (ModelName != other.ModelName) return false;
      if (ModelBytes != other.ModelBytes) return false;
      if (ModelBytesUncompressed != other.ModelBytesUncompressed) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CompressionType != 0) hash ^= CompressionType.GetHashCode();
      if (ModelName.Length != 0) hash ^= ModelName.GetHashCode();
      if (ModelBytes.Length != 0) hash ^= ModelBytes.GetHashCode();
      if (ModelBytesUncompressed != 0) hash ^= ModelBytesUncompressed.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CompressionType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) CompressionType);
      }
      if (ModelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ModelName);
      }
      if (ModelBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ModelBytes);
      }
      if (ModelBytesUncompressed != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(ModelBytesUncompressed);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CompressionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CompressionType);
      }
      if (ModelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelName);
      }
      if (ModelBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ModelBytes);
      }
      if (ModelBytesUncompressed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ModelBytesUncompressed);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameMeshData other) {
      if (other == null) {
        return;
      }
      if (other.CompressionType != 0) {
        CompressionType = other.CompressionType;
      }
      if (other.ModelName.Length != 0) {
        ModelName = other.ModelName;
      }
      if (other.ModelBytes.Length != 0) {
        ModelBytes = other.ModelBytes;
      }
      if (other.ModelBytesUncompressed != 0) {
        ModelBytesUncompressed = other.ModelBytesUncompressed;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CompressionType = (global::Analytics.Compression) input.ReadEnum();
            break;
          }
          case 18: {
            ModelName = input.ReadString();
            break;
          }
          case 26: {
            ModelBytes = input.ReadBytes();
            break;
          }
          case 32: {
            ModelBytesUncompressed = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameEntityInfo : pb::IMessage<GameEntityInfo> {
    private static readonly pb::MessageParser<GameEntityInfo> _parser = new pb::MessageParser<GameEntityInfo>(() => new GameEntityInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEntityInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEntityInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEntityInfo(GameEntityInfo other) : this() {
      entityName_ = other.entityName_;
      entityIndex_ = other.entityIndex_;
      entitySerial_ = other.entitySerial_;
      groupId_ = other.groupId_;
      classId_ = other.classId_;
      team_ = other.team_;
      entityFlags_ = other.entityFlags_;
      category_ = other.category_;
      powerUps_ = other.powerUps_;
      navFlags_ = other.navFlags_;
      eulerRotation_ = other.eulerRotation_ != null ? other.eulerRotation_.Clone() : null;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      eyeOffset_ = other.eyeOffset_ != null ? other.eyeOffset_.Clone() : null;
      eyeDir_ = other.eyeDir_ != null ? other.eyeDir_.Clone() : null;
      health_ = other.health_ != null ? other.health_.Clone() : null;
      armor_ = other.armor_ != null ? other.armor_.Clone() : null;
      boundsMin_ = other.boundsMin_ != null ? other.boundsMin_.Clone() : null;
      boundsMax_ = other.boundsMax_ != null ? other.boundsMax_.Clone() : null;
      ammo_ = other.ammo_.Clone();
      deleted_ = other.deleted_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEntityInfo Clone() {
      return new GameEntityInfo(this);
    }

    /// <summary>Field number for the "entityName" field.</summary>
    public const int EntityNameFieldNumber = 1;
    private string entityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityName {
      get { return entityName_; }
      set {
        entityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entityIndex" field.</summary>
    public const int EntityIndexFieldNumber = 2;
    private int entityIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityIndex {
      get { return entityIndex_; }
      set {
        entityIndex_ = value;
      }
    }

    /// <summary>Field number for the "entitySerial" field.</summary>
    public const int EntitySerialFieldNumber = 3;
    private int entitySerial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntitySerial {
      get { return entitySerial_; }
      set {
        entitySerial_ = value;
      }
    }

    /// <summary>Field number for the "groupId" field.</summary>
    public const int GroupIdFieldNumber = 4;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "classId" field.</summary>
    public const int ClassIdFieldNumber = 5;
    private int classId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ClassId {
      get { return classId_; }
      set {
        classId_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 6;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "entityFlags" field.</summary>
    public const int EntityFlagsFieldNumber = 7;
    private long entityFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EntityFlags {
      get { return entityFlags_; }
      set {
        entityFlags_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 8;
    private int category_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "powerUps" field.</summary>
    public const int PowerUpsFieldNumber = 9;
    private int powerUps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PowerUps {
      get { return powerUps_; }
      set {
        powerUps_ = value;
      }
    }

    /// <summary>Field number for the "navFlags" field.</summary>
    public const int NavFlagsFieldNumber = 10;
    private long navFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NavFlags {
      get { return navFlags_; }
      set {
        navFlags_ = value;
      }
    }

    /// <summary>Field number for the "eulerRotation" field.</summary>
    public const int EulerRotationFieldNumber = 11;
    private global::Analytics.Vec3 eulerRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 EulerRotation {
      get { return eulerRotation_; }
      set {
        eulerRotation_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 12;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "eyeOffset" field.</summary>
    public const int EyeOffsetFieldNumber = 13;
    private global::Analytics.Vec3 eyeOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 EyeOffset {
      get { return eyeOffset_; }
      set {
        eyeOffset_ = value;
      }
    }

    /// <summary>Field number for the "eyeDir" field.</summary>
    public const int EyeDirFieldNumber = 14;
    private global::Analytics.Vec3 eyeDir_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 EyeDir {
      get { return eyeDir_; }
      set {
        eyeDir_ = value;
      }
    }

    /// <summary>Field number for the "health" field.</summary>
    public const int HealthFieldNumber = 15;
    private global::Analytics.RangeI health_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.RangeI Health {
      get { return health_; }
      set {
        health_ = value;
      }
    }

    /// <summary>Field number for the "armor" field.</summary>
    public const int ArmorFieldNumber = 16;
    private global::Analytics.RangeI armor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.RangeI Armor {
      get { return armor_; }
      set {
        armor_ = value;
      }
    }

    /// <summary>Field number for the "boundsMin" field.</summary>
    public const int BoundsMinFieldNumber = 17;
    private global::Analytics.Vec3 boundsMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 BoundsMin {
      get { return boundsMin_; }
      set {
        boundsMin_ = value;
      }
    }

    /// <summary>Field number for the "boundsMax" field.</summary>
    public const int BoundsMaxFieldNumber = 18;
    private global::Analytics.Vec3 boundsMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 BoundsMax {
      get { return boundsMax_; }
      set {
        boundsMax_ = value;
      }
    }

    /// <summary>Field number for the "ammo" field.</summary>
    public const int AmmoFieldNumber = 19;
    private static readonly pb::FieldCodec<global::Analytics.GameEntityInfo.Types.Ammo> _repeated_ammo_codec
        = pb::FieldCodec.ForMessage(154, global::Analytics.GameEntityInfo.Types.Ammo.Parser);
    private readonly pbc::RepeatedField<global::Analytics.GameEntityInfo.Types.Ammo> ammo_ = new pbc::RepeatedField<global::Analytics.GameEntityInfo.Types.Ammo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Analytics.GameEntityInfo.Types.Ammo> Ammo {
      get { return ammo_; }
    }

    /// <summary>Field number for the "deleted" field.</summary>
    public const int DeletedFieldNumber = 1000;
    private bool deleted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deleted {
      get { return deleted_; }
      set {
        deleted_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEntityInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEntityInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityName != other.EntityName) return false;
      if (EntityIndex != other.EntityIndex) return false;
      if (EntitySerial != other.EntitySerial) return false;
      if (GroupId != other.GroupId) return false;
      if (ClassId != other.ClassId) return false;
      if (Team != other.Team) return false;
      if (EntityFlags != other.EntityFlags) return false;
      if (Category != other.Category) return false;
      if (PowerUps != other.PowerUps) return false;
      if (NavFlags != other.NavFlags) return false;
      if (!object.Equals(EulerRotation, other.EulerRotation)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(EyeOffset, other.EyeOffset)) return false;
      if (!object.Equals(EyeDir, other.EyeDir)) return false;
      if (!object.Equals(Health, other.Health)) return false;
      if (!object.Equals(Armor, other.Armor)) return false;
      if (!object.Equals(BoundsMin, other.BoundsMin)) return false;
      if (!object.Equals(BoundsMax, other.BoundsMax)) return false;
      if(!ammo_.Equals(other.ammo_)) return false;
      if (Deleted != other.Deleted) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityName.Length != 0) hash ^= EntityName.GetHashCode();
      if (EntityIndex != 0) hash ^= EntityIndex.GetHashCode();
      if (EntitySerial != 0) hash ^= EntitySerial.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (ClassId != 0) hash ^= ClassId.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (EntityFlags != 0L) hash ^= EntityFlags.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (PowerUps != 0) hash ^= PowerUps.GetHashCode();
      if (NavFlags != 0L) hash ^= NavFlags.GetHashCode();
      if (eulerRotation_ != null) hash ^= EulerRotation.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (eyeOffset_ != null) hash ^= EyeOffset.GetHashCode();
      if (eyeDir_ != null) hash ^= EyeDir.GetHashCode();
      if (health_ != null) hash ^= Health.GetHashCode();
      if (armor_ != null) hash ^= Armor.GetHashCode();
      if (boundsMin_ != null) hash ^= BoundsMin.GetHashCode();
      if (boundsMax_ != null) hash ^= BoundsMax.GetHashCode();
      hash ^= ammo_.GetHashCode();
      if (Deleted != false) hash ^= Deleted.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EntityName);
      }
      if (EntityIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EntityIndex);
      }
      if (EntitySerial != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EntitySerial);
      }
      if (GroupId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GroupId);
      }
      if (ClassId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ClassId);
      }
      if (Team != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Team);
      }
      if (EntityFlags != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EntityFlags);
      }
      if (Category != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Category);
      }
      if (PowerUps != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PowerUps);
      }
      if (NavFlags != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(NavFlags);
      }
      if (eulerRotation_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EulerRotation);
      }
      if (position_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Position);
      }
      if (eyeOffset_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EyeOffset);
      }
      if (eyeDir_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EyeDir);
      }
      if (health_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(Health);
      }
      if (armor_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Armor);
      }
      if (boundsMin_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(BoundsMin);
      }
      if (boundsMax_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(BoundsMax);
      }
      ammo_.WriteTo(output, _repeated_ammo_codec);
      if (Deleted != false) {
        output.WriteRawTag(192, 62);
        output.WriteBool(Deleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityName);
      }
      if (EntityIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIndex);
      }
      if (EntitySerial != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntitySerial);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (ClassId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassId);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (EntityFlags != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EntityFlags);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Category);
      }
      if (PowerUps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PowerUps);
      }
      if (NavFlags != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NavFlags);
      }
      if (eulerRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EulerRotation);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (eyeOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EyeOffset);
      }
      if (eyeDir_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EyeDir);
      }
      if (health_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Health);
      }
      if (armor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Armor);
      }
      if (boundsMin_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BoundsMin);
      }
      if (boundsMax_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BoundsMax);
      }
      size += ammo_.CalculateSize(_repeated_ammo_codec);
      if (Deleted != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEntityInfo other) {
      if (other == null) {
        return;
      }
      if (other.EntityName.Length != 0) {
        EntityName = other.EntityName;
      }
      if (other.EntityIndex != 0) {
        EntityIndex = other.EntityIndex;
      }
      if (other.EntitySerial != 0) {
        EntitySerial = other.EntitySerial;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.ClassId != 0) {
        ClassId = other.ClassId;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      if (other.EntityFlags != 0L) {
        EntityFlags = other.EntityFlags;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.PowerUps != 0) {
        PowerUps = other.PowerUps;
      }
      if (other.NavFlags != 0L) {
        NavFlags = other.NavFlags;
      }
      if (other.eulerRotation_ != null) {
        if (eulerRotation_ == null) {
          EulerRotation = new global::Analytics.Vec3();
        }
        EulerRotation.MergeFrom(other.EulerRotation);
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.eyeOffset_ != null) {
        if (eyeOffset_ == null) {
          EyeOffset = new global::Analytics.Vec3();
        }
        EyeOffset.MergeFrom(other.EyeOffset);
      }
      if (other.eyeDir_ != null) {
        if (eyeDir_ == null) {
          EyeDir = new global::Analytics.Vec3();
        }
        EyeDir.MergeFrom(other.EyeDir);
      }
      if (other.health_ != null) {
        if (health_ == null) {
          Health = new global::Analytics.RangeI();
        }
        Health.MergeFrom(other.Health);
      }
      if (other.armor_ != null) {
        if (armor_ == null) {
          Armor = new global::Analytics.RangeI();
        }
        Armor.MergeFrom(other.Armor);
      }
      if (other.boundsMin_ != null) {
        if (boundsMin_ == null) {
          BoundsMin = new global::Analytics.Vec3();
        }
        BoundsMin.MergeFrom(other.BoundsMin);
      }
      if (other.boundsMax_ != null) {
        if (boundsMax_ == null) {
          BoundsMax = new global::Analytics.Vec3();
        }
        BoundsMax.MergeFrom(other.BoundsMax);
      }
      ammo_.Add(other.ammo_);
      if (other.Deleted != false) {
        Deleted = other.Deleted;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EntityName = input.ReadString();
            break;
          }
          case 16: {
            EntityIndex = input.ReadInt32();
            break;
          }
          case 24: {
            EntitySerial = input.ReadInt32();
            break;
          }
          case 32: {
            GroupId = input.ReadInt32();
            break;
          }
          case 40: {
            ClassId = input.ReadInt32();
            break;
          }
          case 48: {
            Team = input.ReadInt32();
            break;
          }
          case 56: {
            EntityFlags = input.ReadInt64();
            break;
          }
          case 64: {
            Category = input.ReadInt32();
            break;
          }
          case 72: {
            PowerUps = input.ReadInt32();
            break;
          }
          case 80: {
            NavFlags = input.ReadInt64();
            break;
          }
          case 90: {
            if (eulerRotation_ == null) {
              EulerRotation = new global::Analytics.Vec3();
            }
            input.ReadMessage(EulerRotation);
            break;
          }
          case 98: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 106: {
            if (eyeOffset_ == null) {
              EyeOffset = new global::Analytics.Vec3();
            }
            input.ReadMessage(EyeOffset);
            break;
          }
          case 114: {
            if (eyeDir_ == null) {
              EyeDir = new global::Analytics.Vec3();
            }
            input.ReadMessage(EyeDir);
            break;
          }
          case 122: {
            if (health_ == null) {
              Health = new global::Analytics.RangeI();
            }
            input.ReadMessage(Health);
            break;
          }
          case 130: {
            if (armor_ == null) {
              Armor = new global::Analytics.RangeI();
            }
            input.ReadMessage(Armor);
            break;
          }
          case 138: {
            if (boundsMin_ == null) {
              BoundsMin = new global::Analytics.Vec3();
            }
            input.ReadMessage(BoundsMin);
            break;
          }
          case 146: {
            if (boundsMax_ == null) {
              BoundsMax = new global::Analytics.Vec3();
            }
            input.ReadMessage(BoundsMax);
            break;
          }
          case 154: {
            ammo_.AddEntriesFrom(input, _repeated_ammo_codec);
            break;
          }
          case 8000: {
            Deleted = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GameEntityInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Ammo : pb::IMessage<Ammo> {
        private static readonly pb::MessageParser<Ammo> _parser = new pb::MessageParser<Ammo>(() => new Ammo());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Ammo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Analytics.GameEntityInfo.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ammo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ammo(Ammo other) : this() {
          ammoType_ = other.ammoType_;
          ammoCount_ = other.ammoCount_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Ammo Clone() {
          return new Ammo(this);
        }

        /// <summary>Field number for the "ammoType" field.</summary>
        public const int AmmoTypeFieldNumber = 1;
        private uint ammoType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AmmoType {
          get { return ammoType_; }
          set {
            ammoType_ = value;
          }
        }

        /// <summary>Field number for the "ammoCount" field.</summary>
        public const int AmmoCountFieldNumber = 2;
        private uint ammoCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint AmmoCount {
          get { return ammoCount_; }
          set {
            ammoCount_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Ammo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Ammo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (AmmoType != other.AmmoType) return false;
          if (AmmoCount != other.AmmoCount) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (AmmoType != 0) hash ^= AmmoType.GetHashCode();
          if (AmmoCount != 0) hash ^= AmmoCount.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (AmmoType != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(AmmoType);
          }
          if (AmmoCount != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(AmmoCount);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (AmmoType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AmmoType);
          }
          if (AmmoCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AmmoCount);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Ammo other) {
          if (other == null) {
            return;
          }
          if (other.AmmoType != 0) {
            AmmoType = other.AmmoType;
          }
          if (other.AmmoCount != 0) {
            AmmoCount = other.AmmoCount;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                AmmoType = input.ReadUInt32();
                break;
              }
              case 16: {
                AmmoCount = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GameEntityPosition : pb::IMessage<GameEntityPosition> {
    private static readonly pb::MessageParser<GameEntityPosition> _parser = new pb::MessageParser<GameEntityPosition>(() => new GameEntityPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameEntityPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEntityPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEntityPosition(GameEntityPosition other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      team_ = other.team_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameEntityPosition Clone() {
      return new GameEntityPosition(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 2;
    private int team_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameEntityPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameEntityPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (Team != other.Team) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (Team != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Team);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameEntityPosition other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 16: {
            Team = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameNode : pb::IMessage<GameNode> {
    private static readonly pb::MessageParser<GameNode> _parser = new pb::MessageParser<GameNode>(() => new GameNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNode(GameNode other) : this() {
      nodePath_ = other.nodePath_;
      eulerRotation_ = other.eulerRotation_ != null ? other.eulerRotation_.Clone() : null;
      translation_ = other.translation_ != null ? other.translation_.Clone() : null;
      meshName_ = other.meshName_;
      entityId_ = other.entityId_;
      entityName_ = other.entityName_;
      activeState_ = other.activeState_;
      navFlagsActive_ = other.navFlagsActive_;
      navFlagsOverride_ = other.navFlagsOverride_;
      shapeMode_ = other.shapeMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNode Clone() {
      return new GameNode(this);
    }

    /// <summary>Field number for the "nodePath" field.</summary>
    public const int NodePathFieldNumber = 1;
    private string nodePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodePath {
      get { return nodePath_; }
      set {
        nodePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "eulerRotation" field.</summary>
    public const int EulerRotationFieldNumber = 2;
    private global::Analytics.Vec3 eulerRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 EulerRotation {
      get { return eulerRotation_; }
      set {
        eulerRotation_ = value;
      }
    }

    /// <summary>Field number for the "translation" field.</summary>
    public const int TranslationFieldNumber = 3;
    private global::Analytics.Vec3 translation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Translation {
      get { return translation_; }
      set {
        translation_ = value;
      }
    }

    /// <summary>Field number for the "meshName" field.</summary>
    public const int MeshNameFieldNumber = 4;
    private string meshName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeshName {
      get { return meshName_; }
      set {
        meshName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 10;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "entityName" field.</summary>
    public const int EntityNameFieldNumber = 11;
    private string entityName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EntityName {
      get { return entityName_; }
      set {
        entityName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activeState" field.</summary>
    public const int ActiveStateFieldNumber = 12;
    private int activeState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActiveState {
      get { return activeState_; }
      set {
        activeState_ = value;
      }
    }

    /// <summary>Field number for the "navFlagsActive" field.</summary>
    public const int NavFlagsActiveFieldNumber = 13;
    private long navFlagsActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NavFlagsActive {
      get { return navFlagsActive_; }
      set {
        navFlagsActive_ = value;
      }
    }

    /// <summary>Field number for the "navFlagsOverride" field.</summary>
    public const int NavFlagsOverrideFieldNumber = 14;
    private long navFlagsOverride_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NavFlagsOverride {
      get { return navFlagsOverride_; }
      set {
        navFlagsOverride_ = value;
      }
    }

    /// <summary>Field number for the "shapeMode" field.</summary>
    public const int ShapeModeFieldNumber = 15;
    private int shapeMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShapeMode {
      get { return shapeMode_; }
      set {
        shapeMode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NodePath != other.NodePath) return false;
      if (!object.Equals(EulerRotation, other.EulerRotation)) return false;
      if (!object.Equals(Translation, other.Translation)) return false;
      if (MeshName != other.MeshName) return false;
      if (EntityId != other.EntityId) return false;
      if (EntityName != other.EntityName) return false;
      if (ActiveState != other.ActiveState) return false;
      if (NavFlagsActive != other.NavFlagsActive) return false;
      if (NavFlagsOverride != other.NavFlagsOverride) return false;
      if (ShapeMode != other.ShapeMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NodePath.Length != 0) hash ^= NodePath.GetHashCode();
      if (eulerRotation_ != null) hash ^= EulerRotation.GetHashCode();
      if (translation_ != null) hash ^= Translation.GetHashCode();
      if (MeshName.Length != 0) hash ^= MeshName.GetHashCode();
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (EntityName.Length != 0) hash ^= EntityName.GetHashCode();
      if (ActiveState != 0) hash ^= ActiveState.GetHashCode();
      if (NavFlagsActive != 0L) hash ^= NavFlagsActive.GetHashCode();
      if (NavFlagsOverride != 0L) hash ^= NavFlagsOverride.GetHashCode();
      if (ShapeMode != 0) hash ^= ShapeMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NodePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NodePath);
      }
      if (eulerRotation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EulerRotation);
      }
      if (translation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Translation);
      }
      if (MeshName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MeshName);
      }
      if (EntityId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EntityId);
      }
      if (EntityName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(EntityName);
      }
      if (ActiveState != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ActiveState);
      }
      if (NavFlagsActive != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(NavFlagsActive);
      }
      if (NavFlagsOverride != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(NavFlagsOverride);
      }
      if (ShapeMode != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ShapeMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NodePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NodePath);
      }
      if (eulerRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EulerRotation);
      }
      if (translation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Translation);
      }
      if (MeshName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeshName);
      }
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (EntityName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EntityName);
      }
      if (ActiveState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveState);
      }
      if (NavFlagsActive != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NavFlagsActive);
      }
      if (NavFlagsOverride != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NavFlagsOverride);
      }
      if (ShapeMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShapeMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNode other) {
      if (other == null) {
        return;
      }
      if (other.NodePath.Length != 0) {
        NodePath = other.NodePath;
      }
      if (other.eulerRotation_ != null) {
        if (eulerRotation_ == null) {
          EulerRotation = new global::Analytics.Vec3();
        }
        EulerRotation.MergeFrom(other.EulerRotation);
      }
      if (other.translation_ != null) {
        if (translation_ == null) {
          Translation = new global::Analytics.Vec3();
        }
        Translation.MergeFrom(other.Translation);
      }
      if (other.MeshName.Length != 0) {
        MeshName = other.MeshName;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.EntityName.Length != 0) {
        EntityName = other.EntityName;
      }
      if (other.ActiveState != 0) {
        ActiveState = other.ActiveState;
      }
      if (other.NavFlagsActive != 0L) {
        NavFlagsActive = other.NavFlagsActive;
      }
      if (other.NavFlagsOverride != 0L) {
        NavFlagsOverride = other.NavFlagsOverride;
      }
      if (other.ShapeMode != 0) {
        ShapeMode = other.ShapeMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NodePath = input.ReadString();
            break;
          }
          case 18: {
            if (eulerRotation_ == null) {
              EulerRotation = new global::Analytics.Vec3();
            }
            input.ReadMessage(EulerRotation);
            break;
          }
          case 26: {
            if (translation_ == null) {
              Translation = new global::Analytics.Vec3();
            }
            input.ReadMessage(Translation);
            break;
          }
          case 34: {
            MeshName = input.ReadString();
            break;
          }
          case 80: {
            EntityId = input.ReadInt32();
            break;
          }
          case 90: {
            EntityName = input.ReadString();
            break;
          }
          case 96: {
            ActiveState = input.ReadInt32();
            break;
          }
          case 104: {
            NavFlagsActive = input.ReadInt64();
            break;
          }
          case 112: {
            NavFlagsOverride = input.ReadInt64();
            break;
          }
          case 120: {
            ShapeMode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameWeaponFired : pb::IMessage<GameWeaponFired> {
    private static readonly pb::MessageParser<GameWeaponFired> _parser = new pb::MessageParser<GameWeaponFired>(() => new GameWeaponFired());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameWeaponFired> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameWeaponFired() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameWeaponFired(GameWeaponFired other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      attackTeam_ = other.attackTeam_;
      weaponId_ = other.weaponId_;
      firedByClass_ = other.firedByClass_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameWeaponFired Clone() {
      return new GameWeaponFired(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "attackTeam" field.</summary>
    public const int AttackTeamFieldNumber = 2;
    private int attackTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTeam {
      get { return attackTeam_; }
      set {
        attackTeam_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 3;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "firedByClass" field.</summary>
    public const int FiredByClassFieldNumber = 4;
    private int firedByClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FiredByClass {
      get { return firedByClass_; }
      set {
        firedByClass_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameWeaponFired);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameWeaponFired other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (AttackTeam != other.AttackTeam) return false;
      if (WeaponId != other.WeaponId) return false;
      if (FiredByClass != other.FiredByClass) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (AttackTeam != 0) hash ^= AttackTeam.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (FiredByClass != 0) hash ^= FiredByClass.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (AttackTeam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttackTeam);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(WeaponId);
      }
      if (FiredByClass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FiredByClass);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (AttackTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTeam);
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      if (FiredByClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FiredByClass);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameWeaponFired other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.AttackTeam != 0) {
        AttackTeam = other.AttackTeam;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.FiredByClass != 0) {
        FiredByClass = other.FiredByClass;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 16: {
            AttackTeam = input.ReadInt32();
            break;
          }
          case 24: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 32: {
            FiredByClass = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameDeath : pb::IMessage<GameDeath> {
    private static readonly pb::MessageParser<GameDeath> _parser = new pb::MessageParser<GameDeath>(() => new GameDeath());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameDeath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDeath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDeath(GameDeath other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      victimTeam_ = other.victimTeam_;
      attackTeam_ = other.attackTeam_;
      meansOfDeath_ = other.meansOfDeath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameDeath Clone() {
      return new GameDeath(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "victimTeam" field.</summary>
    public const int VictimTeamFieldNumber = 2;
    private int victimTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimTeam {
      get { return victimTeam_; }
      set {
        victimTeam_ = value;
      }
    }

    /// <summary>Field number for the "attackTeam" field.</summary>
    public const int AttackTeamFieldNumber = 3;
    private int attackTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTeam {
      get { return attackTeam_; }
      set {
        attackTeam_ = value;
      }
    }

    /// <summary>Field number for the "meansOfDeath" field.</summary>
    public const int MeansOfDeathFieldNumber = 4;
    private string meansOfDeath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeansOfDeath {
      get { return meansOfDeath_; }
      set {
        meansOfDeath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameDeath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameDeath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (VictimTeam != other.VictimTeam) return false;
      if (AttackTeam != other.AttackTeam) return false;
      if (MeansOfDeath != other.MeansOfDeath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (VictimTeam != 0) hash ^= VictimTeam.GetHashCode();
      if (AttackTeam != 0) hash ^= AttackTeam.GetHashCode();
      if (MeansOfDeath.Length != 0) hash ^= MeansOfDeath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (VictimTeam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VictimTeam);
      }
      if (AttackTeam != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttackTeam);
      }
      if (MeansOfDeath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MeansOfDeath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (VictimTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimTeam);
      }
      if (AttackTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTeam);
      }
      if (MeansOfDeath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeansOfDeath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameDeath other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.VictimTeam != 0) {
        VictimTeam = other.VictimTeam;
      }
      if (other.AttackTeam != 0) {
        AttackTeam = other.AttackTeam;
      }
      if (other.MeansOfDeath.Length != 0) {
        MeansOfDeath = other.MeansOfDeath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 16: {
            VictimTeam = input.ReadInt32();
            break;
          }
          case 24: {
            AttackTeam = input.ReadInt32();
            break;
          }
          case 34: {
            MeansOfDeath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameKilledSomeone : pb::IMessage<GameKilledSomeone> {
    private static readonly pb::MessageParser<GameKilledSomeone> _parser = new pb::MessageParser<GameKilledSomeone>(() => new GameKilledSomeone());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameKilledSomeone> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameKilledSomeone() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameKilledSomeone(GameKilledSomeone other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      victimTeam_ = other.victimTeam_;
      attackTeam_ = other.attackTeam_;
      meansOfDeath_ = other.meansOfDeath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameKilledSomeone Clone() {
      return new GameKilledSomeone(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "victimTeam" field.</summary>
    public const int VictimTeamFieldNumber = 2;
    private int victimTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimTeam {
      get { return victimTeam_; }
      set {
        victimTeam_ = value;
      }
    }

    /// <summary>Field number for the "attackTeam" field.</summary>
    public const int AttackTeamFieldNumber = 3;
    private int attackTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTeam {
      get { return attackTeam_; }
      set {
        attackTeam_ = value;
      }
    }

    /// <summary>Field number for the "meansOfDeath" field.</summary>
    public const int MeansOfDeathFieldNumber = 4;
    private string meansOfDeath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeansOfDeath {
      get { return meansOfDeath_; }
      set {
        meansOfDeath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameKilledSomeone);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameKilledSomeone other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (VictimTeam != other.VictimTeam) return false;
      if (AttackTeam != other.AttackTeam) return false;
      if (MeansOfDeath != other.MeansOfDeath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (VictimTeam != 0) hash ^= VictimTeam.GetHashCode();
      if (AttackTeam != 0) hash ^= AttackTeam.GetHashCode();
      if (MeansOfDeath.Length != 0) hash ^= MeansOfDeath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (VictimTeam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VictimTeam);
      }
      if (AttackTeam != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttackTeam);
      }
      if (MeansOfDeath.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MeansOfDeath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (VictimTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimTeam);
      }
      if (AttackTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTeam);
      }
      if (MeansOfDeath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeansOfDeath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameKilledSomeone other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.VictimTeam != 0) {
        VictimTeam = other.VictimTeam;
      }
      if (other.AttackTeam != 0) {
        AttackTeam = other.AttackTeam;
      }
      if (other.MeansOfDeath.Length != 0) {
        MeansOfDeath = other.MeansOfDeath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 16: {
            VictimTeam = input.ReadInt32();
            break;
          }
          case 24: {
            AttackTeam = input.ReadInt32();
            break;
          }
          case 34: {
            MeansOfDeath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRecieveDamage : pb::IMessage<GameRecieveDamage> {
    private static readonly pb::MessageParser<GameRecieveDamage> _parser = new pb::MessageParser<GameRecieveDamage>(() => new GameRecieveDamage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRecieveDamage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecieveDamage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecieveDamage(GameRecieveDamage other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      victimTeam_ = other.victimTeam_;
      attackTeam_ = other.attackTeam_;
      weaponId_ = other.weaponId_;
      damageType_ = other.damageType_;
      damageAmount_ = other.damageAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRecieveDamage Clone() {
      return new GameRecieveDamage(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "victimTeam" field.</summary>
    public const int VictimTeamFieldNumber = 2;
    private int victimTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimTeam {
      get { return victimTeam_; }
      set {
        victimTeam_ = value;
      }
    }

    /// <summary>Field number for the "attackTeam" field.</summary>
    public const int AttackTeamFieldNumber = 3;
    private int attackTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTeam {
      get { return attackTeam_; }
      set {
        attackTeam_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 4;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "damageType" field.</summary>
    public const int DamageTypeFieldNumber = 5;
    private string damageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DamageType {
      get { return damageType_; }
      set {
        damageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damageAmount" field.</summary>
    public const int DamageAmountFieldNumber = 6;
    private float damageAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageAmount {
      get { return damageAmount_; }
      set {
        damageAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRecieveDamage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRecieveDamage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (VictimTeam != other.VictimTeam) return false;
      if (AttackTeam != other.AttackTeam) return false;
      if (WeaponId != other.WeaponId) return false;
      if (DamageType != other.DamageType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageAmount, other.DamageAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (VictimTeam != 0) hash ^= VictimTeam.GetHashCode();
      if (AttackTeam != 0) hash ^= AttackTeam.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (DamageType.Length != 0) hash ^= DamageType.GetHashCode();
      if (DamageAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageAmount);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (VictimTeam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VictimTeam);
      }
      if (AttackTeam != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttackTeam);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeaponId);
      }
      if (DamageType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DamageType);
      }
      if (DamageAmount != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DamageAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (VictimTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimTeam);
      }
      if (AttackTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTeam);
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      if (DamageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DamageType);
      }
      if (DamageAmount != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRecieveDamage other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.VictimTeam != 0) {
        VictimTeam = other.VictimTeam;
      }
      if (other.AttackTeam != 0) {
        AttackTeam = other.AttackTeam;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.DamageType.Length != 0) {
        DamageType = other.DamageType;
      }
      if (other.DamageAmount != 0F) {
        DamageAmount = other.DamageAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 16: {
            VictimTeam = input.ReadInt32();
            break;
          }
          case 24: {
            AttackTeam = input.ReadInt32();
            break;
          }
          case 32: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 42: {
            DamageType = input.ReadString();
            break;
          }
          case 53: {
            DamageAmount = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameInflictDamage : pb::IMessage<GameInflictDamage> {
    private static readonly pb::MessageParser<GameInflictDamage> _parser = new pb::MessageParser<GameInflictDamage>(() => new GameInflictDamage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameInflictDamage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInflictDamage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInflictDamage(GameInflictDamage other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      victimTeam_ = other.victimTeam_;
      attackTeam_ = other.attackTeam_;
      weaponId_ = other.weaponId_;
      damageType_ = other.damageType_;
      damageAmount_ = other.damageAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameInflictDamage Clone() {
      return new GameInflictDamage(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "victimTeam" field.</summary>
    public const int VictimTeamFieldNumber = 2;
    private int victimTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VictimTeam {
      get { return victimTeam_; }
      set {
        victimTeam_ = value;
      }
    }

    /// <summary>Field number for the "attackTeam" field.</summary>
    public const int AttackTeamFieldNumber = 3;
    private int attackTeam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTeam {
      get { return attackTeam_; }
      set {
        attackTeam_ = value;
      }
    }

    /// <summary>Field number for the "weaponId" field.</summary>
    public const int WeaponIdFieldNumber = 4;
    private int weaponId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeaponId {
      get { return weaponId_; }
      set {
        weaponId_ = value;
      }
    }

    /// <summary>Field number for the "damageType" field.</summary>
    public const int DamageTypeFieldNumber = 5;
    private string damageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DamageType {
      get { return damageType_; }
      set {
        damageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damageAmount" field.</summary>
    public const int DamageAmountFieldNumber = 6;
    private float damageAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageAmount {
      get { return damageAmount_; }
      set {
        damageAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameInflictDamage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameInflictDamage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (VictimTeam != other.VictimTeam) return false;
      if (AttackTeam != other.AttackTeam) return false;
      if (WeaponId != other.WeaponId) return false;
      if (DamageType != other.DamageType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageAmount, other.DamageAmount)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (VictimTeam != 0) hash ^= VictimTeam.GetHashCode();
      if (AttackTeam != 0) hash ^= AttackTeam.GetHashCode();
      if (WeaponId != 0) hash ^= WeaponId.GetHashCode();
      if (DamageType.Length != 0) hash ^= DamageType.GetHashCode();
      if (DamageAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageAmount);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (VictimTeam != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VictimTeam);
      }
      if (AttackTeam != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AttackTeam);
      }
      if (WeaponId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(WeaponId);
      }
      if (DamageType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DamageType);
      }
      if (DamageAmount != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(DamageAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (VictimTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VictimTeam);
      }
      if (AttackTeam != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTeam);
      }
      if (WeaponId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeaponId);
      }
      if (DamageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DamageType);
      }
      if (DamageAmount != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameInflictDamage other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.VictimTeam != 0) {
        VictimTeam = other.VictimTeam;
      }
      if (other.AttackTeam != 0) {
        AttackTeam = other.AttackTeam;
      }
      if (other.WeaponId != 0) {
        WeaponId = other.WeaponId;
      }
      if (other.DamageType.Length != 0) {
        DamageType = other.DamageType;
      }
      if (other.DamageAmount != 0F) {
        DamageAmount = other.DamageAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 16: {
            VictimTeam = input.ReadInt32();
            break;
          }
          case 24: {
            AttackTeam = input.ReadInt32();
            break;
          }
          case 32: {
            WeaponId = input.ReadInt32();
            break;
          }
          case 42: {
            DamageType = input.ReadString();
            break;
          }
          case 53: {
            DamageAmount = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameRadiusDamage : pb::IMessage<GameRadiusDamage> {
    private static readonly pb::MessageParser<GameRadiusDamage> _parser = new pb::MessageParser<GameRadiusDamage>(() => new GameRadiusDamage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameRadiusDamage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRadiusDamage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRadiusDamage(GameRadiusDamage other) : this() {
      position_ = other.position_ != null ? other.position_.Clone() : null;
      damageType_ = other.damageType_;
      damageAmount_ = other.damageAmount_;
      damageRadius_ = other.damageRadius_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameRadiusDamage Clone() {
      return new GameRadiusDamage(this);
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 1;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "damageType" field.</summary>
    public const int DamageTypeFieldNumber = 2;
    private string damageType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DamageType {
      get { return damageType_; }
      set {
        damageType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "damageAmount" field.</summary>
    public const int DamageAmountFieldNumber = 3;
    private float damageAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageAmount {
      get { return damageAmount_; }
      set {
        damageAmount_ = value;
      }
    }

    /// <summary>Field number for the "damageRadius" field.</summary>
    public const int DamageRadiusFieldNumber = 4;
    private float damageRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DamageRadius {
      get { return damageRadius_; }
      set {
        damageRadius_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameRadiusDamage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameRadiusDamage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Position, other.Position)) return false;
      if (DamageType != other.DamageType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageAmount, other.DamageAmount)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DamageRadius, other.DamageRadius)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (position_ != null) hash ^= Position.GetHashCode();
      if (DamageType.Length != 0) hash ^= DamageType.GetHashCode();
      if (DamageAmount != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageAmount);
      if (DamageRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DamageRadius);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (position_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Position);
      }
      if (DamageType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DamageType);
      }
      if (DamageAmount != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DamageAmount);
      }
      if (DamageRadius != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DamageRadius);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (DamageType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DamageType);
      }
      if (DamageAmount != 0F) {
        size += 1 + 4;
      }
      if (DamageRadius != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameRadiusDamage other) {
      if (other == null) {
        return;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.DamageType.Length != 0) {
        DamageType = other.DamageType;
      }
      if (other.DamageAmount != 0F) {
        DamageAmount = other.DamageAmount;
      }
      if (other.DamageRadius != 0F) {
        DamageRadius = other.DamageRadius;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
          case 18: {
            DamageType = input.ReadString();
            break;
          }
          case 29: {
            DamageAmount = input.ReadFloat();
            break;
          }
          case 37: {
            DamageRadius = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameNavigationStuck : pb::IMessage<GameNavigationStuck> {
    private static readonly pb::MessageParser<GameNavigationStuck> _parser = new pb::MessageParser<GameNavigationStuck>(() => new GameNavigationStuck());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameNavigationStuck> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavigationStuck() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavigationStuck(GameNavigationStuck other) : this() {
      entityId_ = other.entityId_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameNavigationStuck Clone() {
      return new GameNavigationStuck(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameNavigationStuck);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameNavigationStuck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameNavigationStuck other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameVoiceMacro : pb::IMessage<GameVoiceMacro> {
    private static readonly pb::MessageParser<GameVoiceMacro> _parser = new pb::MessageParser<GameVoiceMacro>(() => new GameVoiceMacro());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameVoiceMacro> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameVoiceMacro() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameVoiceMacro(GameVoiceMacro other) : this() {
      entityId_ = other.entityId_;
      voiceMacro_ = other.voiceMacro_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameVoiceMacro Clone() {
      return new GameVoiceMacro(this);
    }

    /// <summary>Field number for the "entityId" field.</summary>
    public const int EntityIdFieldNumber = 1;
    private int entityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EntityId {
      get { return entityId_; }
      set {
        entityId_ = value;
      }
    }

    /// <summary>Field number for the "voiceMacro" field.</summary>
    public const int VoiceMacroFieldNumber = 2;
    private int voiceMacro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VoiceMacro {
      get { return voiceMacro_; }
      set {
        voiceMacro_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Analytics.Vec3 position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.Vec3 Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameVoiceMacro);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameVoiceMacro other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EntityId != other.EntityId) return false;
      if (VoiceMacro != other.VoiceMacro) return false;
      if (!object.Equals(Position, other.Position)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EntityId != 0) hash ^= EntityId.GetHashCode();
      if (VoiceMacro != 0) hash ^= VoiceMacro.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EntityId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EntityId);
      }
      if (VoiceMacro != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(VoiceMacro);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityId);
      }
      if (VoiceMacro != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoiceMacro);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameVoiceMacro other) {
      if (other == null) {
        return;
      }
      if (other.EntityId != 0) {
        EntityId = other.EntityId;
      }
      if (other.VoiceMacro != 0) {
        VoiceMacro = other.VoiceMacro;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          Position = new global::Analytics.Vec3();
        }
        Position.MergeFrom(other.Position);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EntityId = input.ReadInt32();
            break;
          }
          case 16: {
            VoiceMacro = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              Position = new global::Analytics.Vec3();
            }
            input.ReadMessage(Position);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameLogMessage : pb::IMessage<GameLogMessage> {
    private static readonly pb::MessageParser<GameLogMessage> _parser = new pb::MessageParser<GameLogMessage>(() => new GameLogMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Analytics.AnalyticsReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogMessage(GameLogMessage other) : this() {
      logType_ = other.logType_;
      logMessage_ = other.logMessage_;
      logExtraInfo_ = other.logExtraInfo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogMessage Clone() {
      return new GameLogMessage(this);
    }

    /// <summary>Field number for the "logType" field.</summary>
    public const int LogTypeFieldNumber = 1;
    private global::Analytics.LogType logType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Analytics.LogType LogType {
      get { return logType_; }
      set {
        logType_ = value;
      }
    }

    /// <summary>Field number for the "logMessage" field.</summary>
    public const int LogMessageFieldNumber = 2;
    private string logMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogMessage {
      get { return logMessage_; }
      set {
        logMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logExtraInfo" field.</summary>
    public const int LogExtraInfoFieldNumber = 3;
    private string logExtraInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LogExtraInfo {
      get { return logExtraInfo_; }
      set {
        logExtraInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LogType != other.LogType) return false;
      if (LogMessage != other.LogMessage) return false;
      if (LogExtraInfo != other.LogExtraInfo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LogType != 0) hash ^= LogType.GetHashCode();
      if (LogMessage.Length != 0) hash ^= LogMessage.GetHashCode();
      if (LogExtraInfo.Length != 0) hash ^= LogExtraInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LogType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LogType);
      }
      if (LogMessage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogMessage);
      }
      if (LogExtraInfo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogExtraInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LogType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LogType);
      }
      if (LogMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogMessage);
      }
      if (LogExtraInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogExtraInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLogMessage other) {
      if (other == null) {
        return;
      }
      if (other.LogType != 0) {
        LogType = other.LogType;
      }
      if (other.LogMessage.Length != 0) {
        LogMessage = other.LogMessage;
      }
      if (other.LogExtraInfo.Length != 0) {
        LogExtraInfo = other.LogExtraInfo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LogType = (global::Analytics.LogType) input.ReadEnum();
            break;
          }
          case 18: {
            LogMessage = input.ReadString();
            break;
          }
          case 26: {
            LogExtraInfo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
